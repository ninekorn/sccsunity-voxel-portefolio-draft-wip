
using System;

using System.Collections;
using System.Collections.Generic;

using SimplexNoise;
using sccs;
using System.IO.Compression;
using System.Xml;
using System.IO;
using System.Xml.Linq;
using System.Linq;

using Unity;
using UnityEngine;

namespace sccsr17
{
    public class tutorialchunkcubemap
    {


        /*
        public tutorialcubeaschunkinst.instancetype instancetypelist;//=  tutorialcubeaschunkinst.instancetype>();

        public tutorialcubeaschunkinst.scinstanceintmaps mapints;//= tutorialcubeaschunkinst.scinstanceintmaps>();

        public tutorialcubeaschunkinst.scinstancevertdimensions dimensionsmapsa;// = tutorialcubeaschunkinst.scinstancevertdimensions;
        public tutorialcubeaschunkinst.scinstancevertdimensions dimensionsmapsb;//= tutorialcubeaschunkinst.scinstancevertdimensions;

        public tutorialcubeaschunkinst.scinstancevertdimensions firstvertloca;// =  tutorialcubeaschunkinst.scinstancevertdimensions;
        public tutorialcubeaschunkinst.scinstancevertdimensions firstvertlocb;// =  tutorialcubeaschunkinst.scinstancevertdimensions;
        */



        public int indexofthefirstchunktile = -1;
        public int vertexcountermemory = 0;

        FastNoise fastNoise = new FastNoise();

        int somecountertopface = 0;
        public tutorialchunkcubemap(int x, int y, int z, float[] newchunkpos_)
        {
            /*
            width = sccsgraphicssec.chunkwidthsim;
            height = sccsgraphicssec.chunkheightsim;
            depth = sccsgraphicssec.chunkdepthsim;
            */

            chunkPos = new int[3];

            chunkPos[0] = x;
            chunkPos[1] = y;
            chunkPos[2] = z;

            newchunkpos = newchunkpos_;
        }

        public float[] newchunkpos;
        public int[] chunkPos;
        /*
        public int[] mapvertindexfordims;

        public int[] widthdimtop;
        public int[] heightdimtop;
        public int[] depthdimtop;
        public int[] mapfirstvertxtop;
        public int[] mapfirstvertytop;
        public int[] mapfirstvertztop;*/

        /*public int[] widthdimleft;
        public int[] heightdimleft;
        public int[] depthdimleft;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxleft;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyleft;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzleft;

        public int[] widthdimright;
        public int[] heightdimright;
        public int[] depthdimright;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxright;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyright;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzright;

        public int[] widthdimfront;
        public int[] heightdimfront;
        public int[] depthdimfront;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxfront;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyfront;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzfront;

        public int[] widthdimback;
        public int[] heightdimback;
        public int[] depthdimback;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxback;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyback;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzback;

        public int[] widthdimbottom;
        public int[] heightdimbottom;
        public int[] depthdimbottom;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxbottom;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertybottom;
        public int[] mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzbottom;*/











        int seed = 3420;
        int total = 0;
        //public int[] map;

        public static int width = 8;
        public static int height = 8;
        public static int depth = 8;

        public static int widthflat = 4;
        public static int heightflat = 4;
        public static int depthflat = 4;

        public int maxveclength = 4;


        public int typeofterraintiles;

        //public int levelofdetail = 0;

        tutorialcubeaschunkinststruct componentparent;

        public float levelofdetailmul = 1.0f;

        float levellimitroofy = 5.0f;
        float levellimitfloory = 0.0f;
        float staticPlaneSize;
        float alternateStaticPlaneSize;

        float levelgenmapsplanesize;


        public void buildchunkmaps(int swtc, int typeofterraintiles_, tutorialcubeaschunkinststruct componentparent_, int levelofdetail, int indexinlevelarray, int facetype, int someindexmain)// , int somechunkkeyboardpriminstanceindex_, int chunkprimindex_, int chunkinstindex_
        {



            widthflat = componentparent_.somelevelgenprimglobals.widthlod0;
            heightflat = componentparent_.somelevelgenprimglobals.heightlod0;
            depthflat = componentparent_.somelevelgenprimglobals.depthlod0;


            width = componentparent_.somelevelgenprimglobals.widthlod0 * 2;
            height = componentparent_.somelevelgenprimglobals.heightlod0 * 2;
            depth = componentparent_.somelevelgenprimglobals.depthlod0 * 2;










            typeofterraintiles = typeofterraintiles_;


            componentparent = componentparent_;


            //levelofdetail = levelofdetail;
            //chunkz.Add(this, _chunkPos);


            levellimitfloory = 0;

            /*if (levelofdetail == 0)
            {
                width = componentparent.somelevelgenprimglobals.widthlod0;
                height = componentparent.somelevelgenprimglobals.heightlod0;
                depth = componentparent.somelevelgenprimglobals.depthlod0;

                //width = 10;
                //height = 10;
                //depth = 10;
            }
            else if (levelofdetail == 1)
            {
                width = componentparent.somelevelgenprimglobals.widthlod1;
                height = componentparent.somelevelgenprimglobals.heightlod1;
                depth = componentparent.somelevelgenprimglobals.depthlod1;

                //width = 5;
                //height = 5;
                //depth = 5;
            }

            else if (levelofdetail == 1)
            {
                width = componentparent.somelevelgenprimglobals.widthlod2;
                height = componentparent.somelevelgenprimglobals.heightlod2;
                depth = componentparent.somelevelgenprimglobals.depthlod2;
                //width = 3;
                //height = 3;
                //depth = 3;
            }
            else if (levelofdetail == 2)
            {
                width = componentparent.somelevelgenprimglobals.widthlod3;
                height = componentparent.somelevelgenprimglobals.heightlod3;
                depth = componentparent.somelevelgenprimglobals.depthlod3;

                //width = 2;
                //height = 2;
                //depth = 2;
            }
            else if (levelofdetail == 3)
            {
                width = componentparent.somelevelgenprimglobals.widthlod4;
                height = componentparent.somelevelgenprimglobals.heightlod4;
                depth = componentparent.somelevelgenprimglobals.depthlod4;

                //width = 2;
                //height = 2;
                //depth = 2;
            }*/

            /*
            width = 16;
            height = 16;
            depth = 16;*/






            /*

            if (levelofdetail == 0)
            {
                width = 10;
                height = 10;
                depth = 10;
            }
            else if (levelofdetail == 1)
            {
                width = 5;
                height = 5;
                depth = 5;
            }

            else if (levelofdetail == 1)
            {
                width = 3;
                height = 3;
                depth = 3;
            }
            else if (levelofdetail == 2)
            {
                width = 2;
                height = 2;
                depth = 2;
            }

            */

            /*
            if (levelofdetail == 0)
            {
                width = 6;
                height = 6;
                depth = 6;
            }
            else if (levelofdetail == 1)
            {
                width = 3;
                height = 3;
                depth = 3;
            }

            else if (levelofdetail == 1)
            {
                width = 2;
                height = 2;
                depth = 2;
            }
            else if (levelofdetail == 2)
            {
                width = 1;
                height = 1;
                depth = 1;
            }*/

            /*
            if (levelofdetail == 0)
            {
                width = 20;
                height = 20;
                depth = 20;
            }
            else if (levelofdetail == 1)
            {
                width = 10;
                height = 10;
                depth = 10;
            }

            else if (levelofdetail == 1)
            {
                width = 6;
                height = 6;
                depth = 6;
            }
            else if (levelofdetail == 2)
            {
                width = 5;
                height = 5;
                depth = 5;
            }*/




            /*
            width = width_ / levelofdetail;
            height = height_ / levelofdetail;
            depth = depth_ / levelofdetail;*/



            //chunkPos = _chunkPos;//

            /*
            chunkPos.x *= 2f;
            chunkPos.y *= 2f;
            chunkPos.z *= 2f;*/










            //xChunkPos = _chunkPos.x;
            //yChunkPos = _chunkPos.y;
            //zChunkPos = _chunkPos.z;


            //floorHeight = height;



            float standardwidth = 10.0f;
            float currentratio = standardwidth / width;

            //////Console.WriteLine(currentratio);
            levelgenmapsplanesize = 0.1f * currentratio; //0.05f when 20w20h20d



            staticPlaneSize = levelgenmapsplanesize;

            if (staticPlaneSize == 1)
            {
                staticPlaneSize = levelgenmapsplanesize * 0.1f;
                alternateStaticPlaneSize = levelgenmapsplanesize * 0.1f;
            }
            else if (staticPlaneSize == 0.1f)
            {
                staticPlaneSize = levelgenmapsplanesize;
                alternateStaticPlaneSize = levelgenmapsplanesize * 10;
            }
            else if (staticPlaneSize == 0.01f)
            {
                staticPlaneSize = levelgenmapsplanesize;
                alternateStaticPlaneSize = levelgenmapsplanesize * 1000;
            }
            else if (staticPlaneSize == 0.2f)
            {
                staticPlaneSize = levelgenmapsplanesize;
                alternateStaticPlaneSize = levelgenmapsplanesize * 10;
            }
            else if (staticPlaneSize == 0.02f)
            {
                staticPlaneSize = levelgenmapsplanesize;
                alternateStaticPlaneSize = levelgenmapsplanesize * 1000;
            }







            // new Vector3(currentPosition.x, currentPosition.y, currentPosition.z);


            //planeSize = planeSize;
            //realplanetwidth = 4;
            //width = width;
            //height = height;
            //depth = depth;









            //componentparent = componentparent_;
            //addfracturedcubeonimpact = addfracturedcubeonimpact_;
            //UnityTutorialGameObjectPool = UnityTutorialGameObjectPool_;

            // this.GameObject.position;

            /*
            this.gameObject.tag = "collisionObject";
            this.gameObject.layer = 8; //"collisionObject"
            UnityTutorialGameObjectPool = this.GameObject.GetComponent<NewObjectPoolerScript>();

            parentObject = this.GameObject.parent;
            //componentparent = parentObject.gameObject.GetComponent<sccsproceduralplanetbuilderGen2>().currentplanetbuilder;

            mesh = new Mesh();
            this.gameObject.GetComponent<MeshFilter>().mesh = mesh;
            this.gameObject.GetComponent<MeshFilter>().sharedMesh = mesh;
            */




            //////Console.WriteLine("w" + width + "/h:" + height + "/d:" + depth);



            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map = new int[width * height * depth];


            /*mapvertindexfordims = new int[width * height * depth];
            widthdimtop = new int[width * height * depth];
            heightdimtop = new int[width * height * depth];
            depthdimtop = new int[width * height * depth];
            mapfirstvertxtop = new int[width * height * depth];
            mapfirstvertytop = new int[width * height * depth];
            mapfirstvertztop = new int[width * height * depth];*/

            /*
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims = new int[widthflat * heightflat * depthflat];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop = new int[widthflat * heightflat * depthflat];
            */


            /*
            widthdimleft = new int[width * height * depth];
            heightdimleft = new int[width * height * depth];
            depthdimleft = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxleft = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyleft = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzleft = new int[width * height * depth];

            widthdimright = new int[width * height * depth];
            heightdimright = new int[width * height * depth];
            depthdimright = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxright = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyright = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzright = new int[width * height * depth];

            widthdimfront = new int[width * height * depth];
            heightdimfront = new int[width * height * depth];
            depthdimfront = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxfront = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyfront = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzfront = new int[width * height * depth];

            widthdimback = new int[width * height * depth];
            heightdimback = new int[width * height * depth];
            depthdimback = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxback = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyback = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzback = new int[width * height * depth];

            widthdimbottom = new int[width * height * depth];
            heightdimbottom = new int[width * height * depth];
            depthdimbottom = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxbottom = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertybottom = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzbottom = new int[width * height * depth];*/





            swtc = 0;



            //normalslist = new List<Vector3>();
            //colorslist = new List<Vector4>();
            //indexPoslist = new List<Vector4>();
            //textureslist = new List<Vector2>();

            if (levelofdetail == 0)
            {


                if (swtc == 0)
                {


                    //STALAGMITE CAVE SYSTEM VALUES FOR CEILING 
                    //DETAILSCALE = 10 // 20 // 75.0fgood
                    //HEIGHTSCALE = 1.25f //1.25f //4.55fgood

                    float _detailScaleceiling = 200.0f;//200
                    float _heightScaleceiling = 2.0f;//5

                    float _detailScale = 200;//200
                    float _heightScale = 5;//5

                    float somenoisevalue = 10.0f;
                    float someothernoisevalue = 20.0f;


                    //realplanetwidth = planeSize * width;

                    //map = new int[width * height * depth];

                    float somenoiseval0 = 200; //200
                    float somenoiseval1 = 5; //5

                    var seed0 = 3420;


                    if (typeofterraintiles == 0)
                    {
                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {

                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;


                                    /*float noiseXZ = 20;

                                    noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (currentPosition.x * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (currentPosition.y * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (currentPosition.z * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);
                                    ////Console.WriteLine(noiseXZ);
                                    if (noiseXZ >= 0.2f)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && currentPosition.y == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/

                                    float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z * levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale, 15, 15, 0);


                                    if (chunkPos[1] == sccslevelgen.wallheightsize - 1)
                                    {
                                        //////Console.WriteLine("noiseXZ" + noiseXZ);
                                        if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 1;
                                        }
                                        /*else if (y == height - 1)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                        else
                                        {
                                           sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 0;
                                        }*/
                                    }

                                    float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    if (y == height - 1 && chunkPos[1] == sccslevelgen.wallheightsize - 1)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    /*else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/

                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                            }
                        }
                    }



                    if (typeofterraintiles != 1115 && typeofterraintiles != 0 && chunkPos[1] != 0)
                    {
                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {

                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;


                                    /*float noiseXZ = 20;

                                    noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (currentPosition.x * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (currentPosition.y * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (currentPosition.z * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);
                                    ////Console.WriteLine(noiseXZ);
                                    if (noiseXZ >= 0.2f)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && currentPosition.y == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/

                                    float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScaleceiling) * _heightScaleceiling, (((z * levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScaleceiling) * _heightScaleceiling, 15, 15, 0);


                                    if (chunkPos[1] == sccslevelgen.wallheightsize - 1)
                                    {
                                        //////Console.WriteLine("noiseXZ" + noiseXZ);
                                        if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 1;
                                        }
                                        /*else if (y == height - 1)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                        else
                                        {
                                           sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 0;
                                        }*/
                                    }

                                    float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    if (y == height - 1 && chunkPos[1] == sccslevelgen.wallheightsize - 1)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    /*else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/

                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                            }
                        }
                    }


                    if (typeofterraintiles != 1115 && typeofterraintiles != 0 && chunkPos[1] == 0)
                    {
                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {

                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;


                                    /*float noiseXZ = 20;

                                    noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (currentPosition.x * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (currentPosition.y * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (currentPosition.z * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);
                                    ////Console.WriteLine(noiseXZ);
                                    if (noiseXZ >= 0.2f)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && currentPosition.y == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/

                                    float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z * levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale, 15, 15, 0);


                                    if (chunkPos[1] == sccslevelgen.wallheightsize - 1)
                                    {
                                        //////Console.WriteLine("noiseXZ" + noiseXZ);
                                        if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 1;
                                        }
                                        /*else if (y == height - 1)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                        else
                                        {
                                           sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 0;
                                        }*/
                                    }

                                    float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    if (y == height - 1 && chunkPos[1] == sccslevelgen.wallheightsize - 1)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    /*else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/

                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                            }
                        }
                    }

                    if (typeofterraintiles == 1115)
                    {
                        int[] fakepos = chunkPos;
                        fakepos[1] = 0;

                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {
                                    float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + fakepos.x + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + fakepos.z + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + fakepos[0] + seed) / _detailScaleceiling) * _heightScaleceiling, (((z * levelgenmapsplanesize) + fakepos[2] + seed) / _detailScaleceiling) * _heightScaleceiling, 15, 15, 0);

                                    float size0 = (1 / levelgenmapsplanesize) * fakepos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * fakepos.y;
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 1;
                                    }
                                    else if (y == height - 1 && fakepos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * ((height - 1 - y) + height * z)] = 0;
                                    }
                                }
                            }
                        }
                    }










                    if (typeofterraintiles == -99) //typeofterraintiles == -2
                    {
                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;

                                    /*float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale, 15, 15, 0);

                                    float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/
                                    /* if (y < width /1.15f)
                                     {
                                         sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                     }*/
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                            }
                        }
                    }














                    if (typeofterraintiles == -99) ////typeofterraintiles == -3
                    {
                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;

                                    /*float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale, 15, 15, 0);

                                    float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }*/
                                    if (y < width / 1.05f)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }

                                }
                            }
                        }
                    }



                    //TERRAIN INSIDE TILES. DOES NOT INCLUDE THE WALLS BOTTOM FLOOR THAT IS PART OF WALLS.
                    //TERRAIN INSIDE TILES. DOES NOT INCLUDE THE WALLS BOTTOM FLOOR THAT IS PART OF WALLS.
                    /*if (typeofterraintiles == 0)
                    {
                        for (int x = 0; x < width; x++)
                        {
                            for (int y = 0; y < height; y++)
                            {
                                for (int z = 0; z < depth; z++)
                                {
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;


                                    /*float noiseXZ = 20;

                                    noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);
                                    ////Console.WriteLine(noiseXZ);
                                    if (noiseXZ >= 0.2f)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }

                                    float noiseXZ = somenoisevalue;
                                    //noiseXZ *= OriginalSimplexNoise.Noise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z* levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale);
                                    noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z * levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale, 15, 15, 0);

                                    float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    noiseXZ -= size0;
                                    //noise = (noise + 1.0f) * 0.5f;
                                    //float noiser1 = OriginalSimplexNoise.Noise(x, y);

                                    //float size0 = (1 / levelgenmapsplanesize) * chunkPos[1];
                                    //noise -= size0;
                                    //////Console.WriteLine(noiseXZ + " y: " + y);

                                    if ((int)Math.Round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else if (y == 0 && chunkPos[1] == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                    }
                                    //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                            }
                        }
                    }*/
                    //TERRAIN INSIDE TILES. DOES NOT INCLUDE THE WALLS BOTTOM FLOOR THAT IS PART OF WALLS.
                    //TERRAIN INSIDE TILES. DOES NOT INCLUDE THE WALLS BOTTOM FLOOR THAT IS PART OF WALLS.




                    //0 floor tiles
                    //1115 ceiling tiles
                    //1101 left wall
                    //1102 right wall
                    //1103 front wall
                    //1104 back wall
                    //1105 left back inside corner
                    //1106 right back inside corner
                    //1107 left front inside corner
                    //1108 right front inside corner
                    //1109 left back outside corner
                    //1110 right back outside corner
                    //1111 left front outside corner
                    //1112 right front outside corner



                    //LEFT WALL
                    if (typeofterraintiles == 1101)
                    {
                        //for (int j = 0; j < levelgen.leftWall.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.leftWall[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            /*if ((int)Math.Round(noiseValue) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else if (y == 0 && chunkPos[1] == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                            }*/
                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);

                                            float noiseValue1i = noiseValue2;

                                            noiseValue1i += (5 - (float)x) / 5;
                                            noiseValue1i /= (float)x / 5;


                                            if (noiseValue1i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //leftExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            if (x == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //LEFT WALL



                    //RIGHT WALL
                    if (typeofterraintiles == 1102)
                    {
                        // for (int j = 0; j < levelgen.rightWall.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.rightWall[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < depth; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            /*if ((int)Math.Round(noiseValue) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else if (y == 0 && chunkPos[1] == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                            }*/
                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue3i = noiseValue2;

                                            noiseValue3i += (5 - (float)x) / 5;
                                            noiseValue3i /= (float)x / 5;

                                            if (noiseValue3i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[(width - 1 - x) + width * (y + height * z)] = 1;
                                                //rightExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }
                                            /*
                                            if (x == width-1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }*/
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //RIGHT WALL




                    /////////////////////////////////////FRONT WALL/////////////////////////////////
                    if (typeofterraintiles == 1103)
                    {
                        //for (int j = 0; j < levelgen.frontWall.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.frontWall[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);6
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);

                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            /*if ((int)Math.Round(noiseValue) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else if (y == 0 && chunkPos[1] == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                            }*/

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue6i = noiseValue5;

                                            noiseValue6i += (5 - (float)z) / 5;
                                            noiseValue6i /= (float)z / 5;

                                            if (noiseValue6i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //frontExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            if (z == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }





                    /////////////////////////////////////BACK WALL////////////////////////////////
                    if (typeofterraintiles == 1104)
                    {
                        //for (int j = 0; j < levelgen.backWall.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.backWall[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            /*if ((int)Math.Round(noiseValue) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else if (y == 0 && chunkPos[1] == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                            }*/
                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue4i = noiseValue5;

                                            noiseValue4i += (5 - (float)z) / 5;
                                            noiseValue4i /= (float)z / 5;


                                            if (noiseValue4i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * (depth - 1 - z))] = 1;
                                                //backExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            if (z == depth - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }




                    /////////////////////////////////////LEFT BACK INSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1105)
                    {
                        //for (int j = 0; j < levelgen.builtLeftFrontInsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtLeftFrontInsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);

                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue9i = noiseValue2;

                                            noiseValue9i += (5 - (float)x) / 5;
                                            noiseValue9i /= (float)x / 5;

                                            float noiseValue10i = noiseValue5;
                                            noiseValue10i += (5 - (float)z) / 5;
                                            noiseValue10i /= (float)z / 5;



                                            if (noiseValue9i > 0.2f || noiseValue10i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * (depth - 1 - z))] = 1;
                                                //backInsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            /*if (x == 0 || z == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;*/

                                        }
                                    }
                                }
                            }
                        }
                    }





                    /////////////////////////////////////RIGHT BACK INSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1106)
                    {
                        //for (int j = 0; j < levelgen.builtRightFrontInsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtRightFrontInsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);

                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise(((((width - 1 - x) * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            /*float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);


                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize -1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue11i = noiseValue5;
                                            noiseValue11i += (5 - (float)z) / 5;
                                            noiseValue11i /= (float)z / 5;

                                            float noiseValue12i = noiseValue2;

                                            noiseValue12i += (5 - (float)x) / 5;
                                            noiseValue12i /= (float)x / 5;


                                            if (noiseValue11i > 0.2f || noiseValue12i < 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //frontInsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }*/

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue9i = noiseValue2;

                                            noiseValue9i += (5 - (float)x) / 5;
                                            noiseValue9i /= (float)x / 5;

                                            float noiseValue10i = noiseValue5;
                                            noiseValue10i += (5 - (float)z) / 5;
                                            noiseValue10i /= (float)z / 5;



                                            if (noiseValue9i > 0.2f || noiseValue10i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[(width - 1 - x) + width * (y + height * (depth - 1 - z))] = 1;
                                                //backInsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }
                                            /*
                                            if (x == 0 || z == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;*/

                                        }
                                    }
                                }
                            }
                        }
                    }








                    /////////////////////////////////////LEFT FRONT INSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1107)
                    {
                        //for (int j = 0; j < levelgen.builtLeftBackInsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtLeftBackInsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);

                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue9i = noiseValue2;

                                            noiseValue9i += (5 - (float)x) / 5;
                                            noiseValue9i /= (float)x / 5;

                                            float noiseValue10i = noiseValue5;
                                            noiseValue10i += (5 - (float)z) / 5;
                                            noiseValue10i /= (float)z / 5;



                                            if (noiseValue9i > 0.2f || noiseValue10i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //backInsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            /*if (x == 0 || z == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;*/

                                        }
                                    }
                                }
                            }
                        }
                    }




                    /////////////////////////////////////RIGHT FRONT INSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1108)
                    {
                        //for (int j = 0; j < levelgen.builtRightBackInsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtRightBackInsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);

                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise(((((width - 1 - x) * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            /*float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);


                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize -1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue11i = noiseValue5;
                                            noiseValue11i += (5 - (float)z) / 5;
                                            noiseValue11i /= (float)z / 5;

                                            float noiseValue12i = noiseValue2;

                                            noiseValue12i += (5 - (float)x) / 5;
                                            noiseValue12i /= (float)x / 5;


                                            if (noiseValue11i > 0.2f || noiseValue12i < 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //frontInsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }*/

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue9i = noiseValue2;

                                            noiseValue9i += (5 - (float)x) / 5;
                                            noiseValue9i /= (float)x / 5;

                                            float noiseValue10i = noiseValue5;
                                            noiseValue10i += (5 - (float)z) / 5;
                                            noiseValue10i /= (float)z / 5;



                                            if (noiseValue9i > 0.2f || noiseValue10i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[(width - 1 - x) + width * (y + height * z)] = 1;
                                                //backInsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }
                                            /*
                                            if (x == 0 || z == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;*/

                                        }
                                    }
                                }
                            }
                        }
                    }




                    /////////////////////////////////////LEFT BACK OUTSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1109)
                    {
                        // for (int j = 0; j < levelgen.builtLeftFrontOutsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtLeftFrontOutsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);


                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue17i = noiseValue2;

                                            noiseValue17i += (5 - (float)x) / 5;
                                            noiseValue17i /= (float)x / 5;

                                            float noiseValue18i = noiseValue5;

                                            noiseValue18i += (5 - (float)z) / 5;
                                            noiseValue18i /= (float)z / 5;

                                            if (noiseValue17i > 0.2f && noiseValue18i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * (depth - 1 - z))] = 1;
                                                //backOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                    }
                                }
                            }
                        }
                    }



                    /////////////////////////////////////RIGHT BACK OUTSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1110)
                    {
                        //for (int j = 0; j < levelgen.builtRightFrontOutsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtRightFrontOutsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)((depth - 1 - z) * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);


                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue17i = noiseValue2;

                                            noiseValue17i += (5 - (float)x) / 5;
                                            noiseValue17i /= (float)x / 5;

                                            float noiseValue18i = noiseValue5;

                                            noiseValue18i += (5 - (float)z) / 5;
                                            noiseValue18i /= (float)z / 5;

                                            if (noiseValue17i > 0.2f && noiseValue18i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[(width - 1 - x) + width * (y + height * (depth - 1 - z))] = 1;
                                                //backOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                    }
                                }
                            }
                        }
                    }


                    /////////////////////////////////////LEFT FRONT OUTSIDE CORNER////////////////////////////////

                    if (typeofterraintiles == 1111)
                    {
                        //for (int j = 0; j < levelgen.builtLeftBackOutsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtLeftBackOutsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);


                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue17i = noiseValue2;

                                            noiseValue17i += (5 - (float)x) / 5;
                                            noiseValue17i /= (float)x / 5;

                                            float noiseValue18i = noiseValue5;

                                            noiseValue18i += (5 - (float)z) / 5;
                                            noiseValue18i /= (float)z / 5;

                                            if (noiseValue17i > 0.2f && noiseValue18i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //backOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                    }
                                }
                            }
                        }

                    }


                    /////////////////////////////////////RIGHT FRONT OUTSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 1112)
                    {
                        //for (int j = 0; j < levelgen.builtRightBackOutsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtRightBackOutsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)((width - 1 - x) * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);


                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue17i = noiseValue2;

                                            noiseValue17i += (5 - (float)x) / 5;
                                            noiseValue17i /= (float)x / 5;

                                            float noiseValue18i = noiseValue5;

                                            noiseValue18i += (5 - (float)z) / 5;
                                            noiseValue18i /= (float)z / 5;

                                            if (noiseValue17i > 0.2f && noiseValue18i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[(width - 1 - x) + width * (y + height * z)] = 1;
                                                //backOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                        }
                                    }
                                }
                            }
                        }
                    }





























                    /*
                    /////////////////////////////////////LEFT FRONT OUTSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 13)
                    {
                        // for (int j = 0; j < levelgen.builtLeftFrontOutsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtLeftFrontOutsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);

                                            /*if ((int)Math.Round(noiseValue) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else if (y == 0 && chunkPos[1] == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                            }

                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue13i = noiseValue2;

                                            noiseValue13i += (5 - (float)x) / 5;
                                            noiseValue13i /= (float)x / 5;

                                            float noiseValue14i = noiseValue5;

                                            noiseValue14i += (5 - (float)z) / 5;
                                            noiseValue14i /= (float)z / 5;


                                            if (noiseValue13i > 0.2f && noiseValue14i < 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //leftOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue19i = noiseValue5;
                                            noiseValue19i += (5 - (float)z) / 5;
                                            noiseValue19i /= (float)z / 5;

                                            float noiseValue20i = noiseValue2;
                                            noiseValue20i += (5 - (float)x) / 5;
                                            noiseValue20i /= (float)x / 5;


                                            if (noiseValue19i > 0.2f && noiseValue20i < 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //frontOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    */







                    /*
                    /////////////////////////////////////RIGHT FRONT OUTSIDE CORNER////////////////////////////////
                    if (typeofterraintiles == 14)
                    {
                        //for (int j = 0; j < levelgen.builtRightFrontOutsideCorner.Count; j++)
                        {
                            //if (new Vector3(xChunkPos, yChunkPos, zChunkPos) == levelgen.builtRightFrontOutsideCorner[j])
                            {
                                for (int x = 0; x < width; x++)
                                {
                                    //float noiseX = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) /somenoiseval0);
                                    float noiseX2 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    float noiseX5 = Math.Abs((float)(x * levelgenmapsplanesize + chunkPos[0] + seed0) / somenoiseval1);
                                    for (int y = 0; y < height; y++)
                                    {
                                        //float noiseY = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) /somenoiseval0);
                                        float noiseY2 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        float noiseY5 = Math.Abs((float)(y * levelgenmapsplanesize + chunkPos[1] + seed0) / somenoiseval1);
                                        for (int z = 0; z < width; z++)
                                        {
                                            //float noiseZ = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) /somenoiseval0);
                                            float noiseZ2 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);
                                            float noiseZ5 = Math.Abs((float)(z * levelgenmapsplanesize + chunkPos[2] + seed0) / somenoiseval1);

                                            //float noiseValue = Noise.Generate(noiseX, noiseY, noiseZ);
                                            float noiseValue = someothernoisevalue;
                                            noiseValue *= fastNoise.GetNoise((((x * staticPlaneSize) + (chunkPos[0] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((y * staticPlaneSize) + (chunkPos[1] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale, (((z * staticPlaneSize) + (chunkPos[2] * alternateStaticPlaneSize) + seed) / _detailScale) * _heightScale);


                                            float noiseValue2 = Noise.Generate(noiseY2, noiseX2, noiseZ2);
                                            float noiseValue5 = Noise.Generate(noiseX5, noiseZ5, noiseY5);

                                            //noiseValue += (10 - (float)y) / somenoisevalue;
                                            //noiseValue /= (float)y / 5;

                                            /*if ((int)Math.Round(noiseValue) >= y) //|| (int)Math.Round(noiseXZ) < -y
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else if (y == 0 && chunkPos[1] == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }
                                            else
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 0;
                                            }


                                            if (noiseValue > 0.2f && y < sccslevelgen.wallheightsize - 1)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                            }

                                            float noiseValue15i = noiseValue2;

                                            noiseValue15i += (5 - (float)x) / 5;
                                            noiseValue15i /= (float)x / 5;

                                            float noiseValue16i = noiseValue5;

                                            noiseValue16i += (5 - (float)z) / 5;
                                            noiseValue16i /= (float)z / 5;


                                            if (noiseValue15i < 0.2f && noiseValue16i < 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //rightOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }

                                            float noiseValue17i = noiseValue2;

                                            noiseValue17i += (5 - (float)x) / 5;
                                            noiseValue17i /= (float)x / 5;

                                            float noiseValue18i = noiseValue5;

                                            noiseValue18i += (5 - (float)z) / 5;
                                            noiseValue18i /= (float)z / 5;

                                            if (noiseValue17i > 0.2f && noiseValue18i > 0.2f)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                                //backOutsideCornerExtremity[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }*/
                }
                else
                {
                    for (int x = 0; x < width; x++)
                    {
                        for (int y = 0; y < height; y++)
                        {
                            for (int z = 0; z < width; z++)
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                            }
                        }
                    }
                }
            }
            else if (levelofdetail != 0)
            {

                //Console.WriteLine("levelofdetail:" + levelofdetail + "/levelofdetail:" + levelofdetail);

                for (int x = 0; x < width; x++)
                {
                    for (int y = 0; y < height; y++)
                    {
                        for (int z = 0; z < width; z++)
                        {


                            //0 floor
                            //1101 left wall
                            //1102 right wall
                            //1103 front wall
                            //1104 back wall
                            //1105 left front outside corner
                            //1106 right front outside corner
                            //1107 left back outside corner
                            //1108 right back outside corner
                            //1109 left front inside corner
                            //1110 right front inside corner
                            //1111 left back inside corner
                            //1112 right back inside corner
                            //1115 ceiling




                            /*
                            if (chunkPos[1] == sccslevelgen.wallheightsize - 1)
                            {
                                if (y == height - 1)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if(chunkPos[1] == 0)
                            {
                                if (y == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            */





                            if (typeofterraintiles == 0)
                            {
                                if (y == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1115)
                            {
                                if (y == height - 1)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1101)
                            {
                                if (x == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1102)
                            {
                                if (x == width - 1)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1103)
                            {
                                if (z == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1104)
                            {
                                if (z == depth - 1)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1105)
                            {
                                if (x == 0 || z == depth - 1)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1106)
                            {
                                if (x == width - 1 || z == depth - 1)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1107)
                            {
                                if (x == 0 || z == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1108)
                            {
                                if (x == width - 1 || z == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }


                            //1101 left wall
                            //1102 right wall
                            //1103 front wall
                            //1104 back wall
                            //1105 left front outside corner
                            //1106 right front outside corner
                            //1107 left back outside corner
                            //1108 right back outside corner
                            //1109 left front inside corner
                            //1110 right front inside corner
                            //1111 left back inside corner
                            //1112 right back inside corner











                            else
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];

                            }






                            /*
                            if (chunkPos[1] == sccslevelgen.wallheightsize - 1)
                            {
                                if (y == height - 1)
                                {
                                    map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else
                            {
                                map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];

                            }



                            if (typeofterraintiles == 1102 || typeofterraintiles == 1106 || typeofterraintiles == 1108 || typeofterraintiles == 1110 || typeofterraintiles == 1112)
                            {
                                if (x == width - 1)
                                {
                                    map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];

                                }
                            }
                            else if (typeofterraintiles == 1101 || typeofterraintiles == 1105 || typeofterraintiles == 1107 || typeofterraintiles == 1109 || typeofterraintiles == 1111)
                            {
                                if (x == 0)
                                {
                                    map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1103 || typeofterraintiles == 1105 || typeofterraintiles == 1106 || typeofterraintiles == 1109 || typeofterraintiles == 1110)
                            {
                                if (z == 0)
                                {
                                    map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1104 || typeofterraintiles == 1107 || typeofterraintiles == 1108 || typeofterraintiles == 1111 || typeofterraintiles == 1112)
                            {
                                if (z == depth-1)
                                {
                                    map[x + width * (y + height * z)] = 1;
                                }
                                else
                                {
                                    map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                                }
                            }
                            else if (typeofterraintiles == 1115 || typeofterraintiles == 1101 || typeofterraintiles == 1102 || typeofterraintiles == 1103 || typeofterraintiles == 1104 || typeofterraintiles == 1105 || typeofterraintiles == 1106 || typeofterraintiles == 1109 || typeofterraintiles == 1110 || typeofterraintiles == 1107 || typeofterraintiles == 1108 || typeofterraintiles == 1111 || typeofterraintiles == 1112)
                            {
                                
                            }
                          
                            else
                            {
                                map[x + width * (y + height * z)] = sccslevelgen.chunkdata[levelofdetail][facetype][sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].indexofthefirstchunktile].map[(x) + 8 * ((y) + 8 * (z))];
                            }*/



                            //

                        }
                    }
                }

            }


            //fastNoise = null;
        }



        public void setmapforchunks(int facetype, out double m11, out double m12, out double m13, out double m14,
            out double m21, out double m22, out double m23, out double m24, out double m31, out double m32, out double m33, out double m34, out double m41, out double m42, out double m43, out double m44, int levelofdetail, int indexinlevelarray, int thefirstbundlechunkindex, int someindexmain)
        {
            //int minx,int miny, int minz, int maxx, int maxy, int maxz , 



            maxveclength = 4;

            double arrayofbytemaprowm11a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111 
            double arrayofbytemaprowm22a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            total = width * height * depth;

            int switchXX = 0;
            int switchYY = 0;

            double selectablevectordouble = 0;
            int maxv = width * height * depth;

            int m11adder = 0;
            int m12adder = 0;
            int m13adder = 0;
            int m14adder = 0;

            int m21adder = 0;
            int m22adder = 0;
            int m23adder = 0;
            int m24adder = 0;

            int m31adder = 0;
            int m32adder = 0;
            int m33adder = 0;
            int m34adder = 0;

            int m41adder = 0;
            int m42adder = 0;
            int m43adder = 0;
            int m44adder = 0;



            /*int[] mapdimsx = null;
            int[] mapdimsy = null;
            int[] mapdimsz = null;

            mapdimsx = widthdimtop;
            mapdimsy = heightdimtop;
            mapdimsz = depthdimtop;*/
            int theindexmulprior = 0;
            int theindexmulstart1 = 0;
            int theindexmulcounter = 0;
            int theindexmulfloatincrementer = 0;
            //int theindexmulfloatswapper = 0;
            int theindexmulvectorswapper = 0;
            int theindexmulmatrixswapper = 0;



            int themule = 10;

            for (int x = 0; x < widthflat; x++)
            {
                for (int y = 0; y < heightflat; y++)
                {

                    for (int z = 0; z < depthflat; z++)
                    {
                        //int index = x + (width * (y + (height * z)));
                        ////Console.WriteLine("index:" + index);
                        //int currentByte = map[index];

                        //10*4*4


                        int index = x + widthflat * (y + heightflat * z);//; //x + width * (y + height * z);// max of 64
                        int currentByte = 0;// mapvertindexfordims[index];

                        //Console.Write(" " + index);

                        int somemaxvecdigit = maxveclength;
                        int somecountermul = 0;
                        int somec = 0;

                        int somewidth = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[index];// widthdim[index];
                        int someheight = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[index];
                        int somedepth = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[index];// depthdim[index];


                        //Console.WriteLine("h:" + someheight);
                        if (facetype == 0)
                        {
                            currentByte = someheight;// (((somewidth * 100) + (somedepth)));
                        }
                        else if (facetype == 1)
                        {
                            currentByte = somewidth;// (((someheight * 100) + (somedepth)));
                        }
                        else if (facetype == 2)
                        {
                            currentByte = somewidth;// (((someheight * 100) + (somedepth)));
                        }
                        else if (facetype == 3)
                        {
                            currentByte = somedepth;// (((someheight * 100) + (somewidth)));
                        }
                        else if (facetype == 4)
                        {
                            currentByte = somedepth;// (((someheight * 100) + (somewidth)));
                        }
                        else if (facetype == 5)
                        {
                            currentByte = someheight;// (((somewidth * 100) + (somedepth)));
                        }




                        //3 

                        /*for (int t = 0; t <= index; t++) // index == 45 == 11 
                        {
                            if (somec == somemaxvecdigit)
                            {
                                somecountermul++;
                                somec = 0;
                            }
                            somec++;
                        }*/


                        //for 4 by 4 by 4 and placing 8 digits in a float.
                        //0-4-1-5-2-6-3-7
                        //8-12-9-13-10-14-11-15
                        //16-20-17-21-18-22-19-23
                        //24-28-25-29-26-30-27-31
                        //32-36-33-37-34-38-35-39
                        //40-44-41-45-42-46-43-47
                        //48-52-49-53-50-54-51-55
                        //56-60-57-61-58-62-59-63

                        //0 16 32 48
                        //4 20 36 52
                        //8 24 40 56
                        //12 28 44 60
                        //1 17 33 49
                        //5 21 37 53
                        //9 25 41 57
                        //13 29 45 61
                        //2 18 34 50
                        //6 22 38 54 
                        //10 26 42 58 
                        //14 30 46 62
                        //3 19 35 51
                        //7 23 39 55
                        //11 27 43 59
                        //15 31 47 63





                        //0-9-18
                        //3-12-21
                        //6-15-24

                        //1-10-19
                        //4-13-22
                        //7-16-25

                        //2-11-20
                        //5-14-23
                        //8-17-26






                        if (levelofdetail == 0 || levelofdetail == 1)
                        {
                            //Console.WriteLine(theindexmulprior);

                            theindexmulprior = theindexmulprior + (widthflat * depthflat);

                            if (theindexmulprior > (widthflat * heightflat * depthflat) - 1)
                            {
                                theindexmulprior = 0;
                                theindexmulprior = theindexmulstart1 + (widthflat * (theindexmulcounter + 1));
                                //theindexmulfinal = theindexmulprior;
                            }



                            //Console.WriteLine("theindexmulfloatincrementer:" + theindexmulvectorswapper + "/theindexmulfloatincrementer:" + theindexmulfloatincrementer);


                            double testbuffer = 0;
                            if (theindexmulvectorswapper == 0)
                            {
                                if (theindexmulfloatincrementer == 0)
                                {
                                    arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 1)
                                {
                                    arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 2)
                                {
                                    arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 3)
                                {
                                    arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themule) + currentByte;
                                }
                            }
                            else if (theindexmulvectorswapper == 1)
                            {
                                if (theindexmulfloatincrementer == 0)
                                {
                                    arrayofbytemaprowm21a = (arrayofbytemaprowm21a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 1)
                                {
                                    arrayofbytemaprowm22a = (arrayofbytemaprowm22a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 2)
                                {
                                    arrayofbytemaprowm23a = (arrayofbytemaprowm23a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 3)
                                {
                                    arrayofbytemaprowm24a = (arrayofbytemaprowm24a * themule) + currentByte;
                                }

                            }
                            else if (theindexmulvectorswapper == 2)
                            {
                                if (theindexmulfloatincrementer == 0)
                                {
                                    arrayofbytemaprowm31a = (arrayofbytemaprowm31a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 1)
                                {
                                    arrayofbytemaprowm32a = (arrayofbytemaprowm32a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 2)
                                {
                                    arrayofbytemaprowm33a = (arrayofbytemaprowm33a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 3)
                                {
                                    arrayofbytemaprowm34a = (arrayofbytemaprowm34a * themule) + currentByte;
                                }

                            }

                            else if (theindexmulvectorswapper == 3)
                            {
                                if (theindexmulfloatincrementer == 0)
                                {
                                    arrayofbytemaprowm41a = (arrayofbytemaprowm41a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 1)
                                {
                                    arrayofbytemaprowm42a = (arrayofbytemaprowm42a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 2)
                                {
                                    arrayofbytemaprowm43a = (arrayofbytemaprowm43a * themule) + currentByte;
                                }
                                else if (theindexmulfloatincrementer == 3)
                                {
                                    arrayofbytemaprowm44a = (arrayofbytemaprowm44a * themule) + currentByte;
                                }

                            }
                        }
                        else if (levelofdetail == 2)
                        {
                            if (index == 0 || index == 4 || index == 2 || index == 6)
                            {
                                arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                            }
                            else if (index == 1 || index == 5 || index == 3 || index == 7)
                            {
                                arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                            }
                        }













                        /*
                        if (theindexmulcounter == 0)
                        {

                        }
                        else if (theindexmulcounter == 1)
                        {

                        }
                        else if (theindexmulcounter == 2)
                        {

                        }
                        else if (theindexmulcounter == 3)
                        {

                        }*/












                        /*
                        if (index == 0 || index == 16 || index == 32 || index == 48)
                        {
                            if (index == 0)
                            {
                                arrayofbytemaprowm11a = currentByte;// (arrayofbytemaprowm11a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                            }
                        }
                        else if (index == 4 || index == 20 || index == 36 || index == 52)
                        {
                            if (index == 4)
                            {
                                arrayofbytemaprowm12a = currentByte;// (arrayofbytemaprowm12a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                            }
                        }
                        else if (index == 8 || index == 24 || index == 40 || index == 56)
                        {
                            if (index == 8)
                            {
                                arrayofbytemaprowm13a = currentByte;//(arrayofbytemaprowm13a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themule) + currentByte;
                            }
                        }
                        else if (index == 12 || index == 28 || index == 44 || index == 60)
                        {
                            if (index == 12)
                            {
                                arrayofbytemaprowm14a = currentByte;//(arrayofbytemaprowm14a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themule) + currentByte;
                            }
                        }
                        else if (index == 1 || index == 17 || index == 33 || index == 49)
                        {
                            if (index == 1)
                            {
                                arrayofbytemaprowm21a = currentByte;// (arrayofbytemaprowm21a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm21a = (arrayofbytemaprowm21a * themule) + currentByte;
                            }
                        }
                        else if (index == 5 || index == 21 || index == 37 || index == 53)
                        {
                            if (index == 5)
                            {
                                arrayofbytemaprowm22a = currentByte;//(arrayofbytemaprowm22a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm22a = (arrayofbytemaprowm22a * themule) + currentByte;
                            }
                        }
                        else if (index == 9 || index == 25 || index == 41 || index == 57)
                        {
                            if (index == 9)
                            {
                                arrayofbytemaprowm23a = currentByte;//(arrayofbytemaprowm23a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm23a = (arrayofbytemaprowm23a * themule) + currentByte;
                            }
                        }
                        else if (index == 13 || index == 29 || index == 45 || index == 61)
                        {
                            if (index == 13)
                            {
                                arrayofbytemaprowm24a = currentByte;// (arrayofbytemaprowm24a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm24a = (arrayofbytemaprowm24a * themule) + currentByte;
                            }
                        }
                        else if (index == 2 || index == 18 || index == 34 || index == 50)
                        {
                            if (index == 2)
                            {
                                arrayofbytemaprowm31a = currentByte;//(arrayofbytemaprowm31a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm31a = (arrayofbytemaprowm31a * themule) + currentByte;
                            }
                        }
                        else if (index == 6 || index == 22 || index == 38 || index == 54)
                        {
                            if (index == 6)
                            {
                                arrayofbytemaprowm32a = currentByte;//(arrayofbytemaprowm32a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm32a = (arrayofbytemaprowm32a * themule) + currentByte;
                            }
                        }
                        else if (index == 10 || index == 26 || index == 42 || index == 58)
                        {
                            if (index == 10)
                            {
                                arrayofbytemaprowm33a = currentByte;//arrayofbytemaprowm33a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm33a = (arrayofbytemaprowm33a * themule) + currentByte;
                            }
                        }
                        else if (index == 14 || index == 30 || index == 46 || index == 62)
                        {
                            if (index == 14)
                            {
                                arrayofbytemaprowm34a = currentByte;// (arrayofbytemaprowm34a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm34a = (arrayofbytemaprowm34a * themule) + currentByte;
                            }
                        }
                        else if (index == 3 || index == 19 || index == 35 || index == 51)
                        {
                            if (index == 3)
                            {
                                arrayofbytemaprowm41a = currentByte;// (arrayofbytemaprowm41a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm41a = (arrayofbytemaprowm41a * themule) + currentByte;
                            }
                        }
                        else if (index == 7 || index == 23 || index == 39 || index == 55)
                        {
                            if (index == 7)
                            {
                                arrayofbytemaprowm42a = currentByte;//(arrayofbytemaprowm42a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm42a = (arrayofbytemaprowm42a * themule) + currentByte;
                            }
                        }
                        else if (index == 11 || index == 27 || index == 43 || index == 59)
                        {
                            if (index == 11)
                            {
                                arrayofbytemaprowm43a = currentByte;//(arrayofbytemaprowm43a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm43a = (arrayofbytemaprowm43a * themule) + currentByte;
                            }
                        }
                        else if (index == 15 || index == 31 || index == 47 || index == 63)
                        {
                            if (index == 15)
                            {
                                arrayofbytemaprowm44a = currentByte;// (arrayofbytemaprowm44a * themule);
                            }
                            else
                            {
                                arrayofbytemaprowm44a = (arrayofbytemaprowm44a * themule) + currentByte;
                            }
                        }*/
                    }



                    //Console.WriteLine("theindexmulfloatincrementer:" + theindexmulvectorswapper + "/theindexmulfloatincrementer:" + theindexmulfloatincrementer);

                    theindexmulfloatincrementer++;

                    if (theindexmulfloatincrementer > 3)
                    {
                        theindexmulfloatincrementer = 0;

                        theindexmulvectorswapper++;
                    }

                    if (theindexmulvectorswapper > 3)
                    {
                        //theindexmulfloatincrementer = 0;
                        theindexmulmatrixswapper++;
                    }



                    if (theindexmulcounter == depthflat - 1)
                    {

                        theindexmulstart1++;
                        theindexmulcounter = 0;
                        theindexmulprior = theindexmulstart1;
                    }
                    else
                    {

                        theindexmulcounter++;
                    }

                }
            }

            //Console.WriteLine(arrayofbytemaprowm11a);

            m11 = arrayofbytemaprowm11a;
            m12 = arrayofbytemaprowm12a;
            m13 = arrayofbytemaprowm13a;
            m14 = arrayofbytemaprowm14a;
            m21 = arrayofbytemaprowm21a;
            m22 = arrayofbytemaprowm22a;
            m23 = arrayofbytemaprowm23a;
            m24 = arrayofbytemaprowm24a;
            m31 = arrayofbytemaprowm31a;
            m32 = arrayofbytemaprowm32a;
            m33 = arrayofbytemaprowm33a;
            m34 = arrayofbytemaprowm34a;
            m41 = arrayofbytemaprowm41a;
            m42 = arrayofbytemaprowm42a;
            m43 = arrayofbytemaprowm43a;
            m44 = arrayofbytemaprowm44a;
        }



        /*int[] mapdimsx;
        int[] mapdimsy;
        int[] mapdimsz;

        int[] mapvertx;
        int[] mapverty;
        int[] mapvertz;*/

        /*int[] somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx;
        int[] somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty;
        int[] somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz;*/

        //int maxveclengthalt;

        int vertminx = 0;
        int vertminy = 0;
        int vertminz = 0;


        public void setmapforfirstverts(int minx, int miny, int minz, int maxx, int maxy, int maxz, int typeofterraintiles_, tutorialcubeaschunkinststruct componentparent_, int levelofdetail, int maxveclengthalt, int facetype,
           out double m11, out double m12, out double m13, out double m14,
           out double m21, out double m22, out double m23, out double m24, out double m31, out double m32, out double m33, out double m34, out double m41, out double m42, out double m43, out double m44,

           out double m11b, out double m12b, out double m13b, out double m14b,
           out double m21b, out double m22b, out double m23b, out double m24b, out double m31b, out double m32b, out double m33b, out double m34b, out double m41b, out double m42b, out double m43b, out double m44b, int indexinlevelarray, int thefirstbundlechunkindex, int someindexmain)// , int somechunkkeyboardpriminstanceindex_, int chunkprimindex_, int chunkinstindex_
        {

            /*
            int[] mapvertx = null;
            int[] mapverty = null;
            int[] mapvertz = null;

            mapvertx = mapfirstvertxtop;
            mapverty = mapfirstvertytop;
            mapvertz = mapfirstvertztop;*/

            /*
            if (facetype == 0)
            {
                mapvertx = mapfirstvertxtop;
                mapverty = mapfirstvertytop;
                mapvertz = mapfirstvertztop;

            }
            else if (facetype == 1)
            {
                mapvertx = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxleft;
                mapverty = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyleft;
                mapvertz = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzleft;
            }
            else if (facetype == 2)
            {
                mapvertx = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxright;
                mapverty = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyright;
                mapvertz = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzright;
            }
            else if (facetype == 3)
            {
                mapvertx = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxfront;
                mapverty = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyfront;
                mapvertz = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzfront;
            }
            else if (facetype == 4)
            {
                mapvertx = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxback;
                mapverty = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyback;
                mapvertz = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzback;
            }
            else if (facetype == 5)
            {
                mapvertx = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxbottom;
                mapverty = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertybottom;
                mapvertz = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzbottom;
            }*/







            /*
            List<int> somedata = new List<int>();
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = new int[mapvertindexfordims.Length];
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = new int[mapvertindexfordims.Length];
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = new int[mapvertindexfordims.Length];
            */
            int somecounter = 0;
            /*for (int i = 0; i < mapvertindexfordims.Length; i++)
            {
                if (mapvertindexfordims[i] == 1)
                {
                    somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx[somecounter] = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx[i];
                    somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty[somecounter] = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty[i];
                    somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz[somecounter] = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz[i];
                    somedata.Add(i);
                    somecounter++;
                }
            }*/









            /*
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    for (int z = 0; z < depth; z++)
                    {
                        int index = x + width * (y + height * z);

                        if (mapvertindexfordims[index] != 0)
                        {
                            //somenewdimswidth[somecounter] = widthdim[i];
                            //somenewdimsheight[somecounter] = heightdim[i];
                            //somenewdimsdepth[somecounter] = depthdim[i];
                            somedata.Add(index);
                            somecounter++;
                        }
                    }
                }
            }
            
            int someothercounter = 0;
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    for (int z = 0; z < depth; z++)
                    {
                        int index = x + width * (y + height * z);

                        if (someothercounter < somedata.Count)
                        {
                            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx[index] = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx[somedata[someothercounter]];
                            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty[index] = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty[somedata[someothercounter]];
                            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz[index] = mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz[somedata[someothercounter]];

                        }
                        someothercounter++;
                    }
                }
            }
            */


            //somedata = null;














            double arrayofbytemaprowm11a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111 
            double arrayofbytemaprowm22a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm11b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm22b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm11c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm22c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm11d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm22d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111



            int maxv = width * height * depth;



            int m11adder = 0;
            int m12adder = 0;
            int m13adder = 0;
            int m14adder = 0;

            int m21adder = 0;
            int m22adder = 0;
            int m23adder = 0;
            int m24adder = 0;

            int m31adder = 0;
            int m32adder = 0;
            int m33adder = 0;
            int m34adder = 0;

            int m41adder = 0;
            int m42adder = 0;
            int m43adder = 0;
            int m44adder = 0;


            int m11badder = 0;
            int m12badder = 0;
            int m13badder = 0;
            int m14badder = 0;

            int m21badder = 0;
            int m22badder = 0;
            int m23badder = 0;
            int m24badder = 0;

            int m31badder = 0;
            int m32badder = 0;
            int m33badder = 0;
            int m34badder = 0;

            int m41badder = 0;
            int m42badder = 0;
            int m43badder = 0;
            int m44badder = 0;



            int m11cadder = 0;
            int m12cadder = 0;
            int m13cadder = 0;
            int m14cadder = 0;

            int m21cadder = 0;
            int m22cadder = 0;
            int m23cadder = 0;
            int m24cadder = 0;

            int m31cadder = 0;
            int m32cadder = 0;
            int m33cadder = 0;
            int m34cadder = 0;

            int m41cadder = 0;
            int m42cadder = 0;
            int m43cadder = 0;
            int m44cadder = 0;


            int m11dadder = 0;
            int m12dadder = 0;
            int m13dadder = 0;
            int m14dadder = 0;

            int m21dadder = 0;
            int m22dadder = 0;
            int m23dadder = 0;
            int m24dadder = 0;

            int m31dadder = 0;
            int m32dadder = 0;
            int m33dadder = 0;
            int m34dadder = 0;

            int m41dadder = 0;
            int m42dadder = 0;
            int m43dadder = 0;
            int m44dadder = 0;

            int themule = 100;//10000

            int theindexmulprior = 0;
            int theindexmulstart1 = 0;
            int theindexmulcounter = 0;
            int theindexmulfloatincrementer = 0;
            //int theindexmulfloatswapper = 0;
            int theindexmulvectorswapper = 0;
            int theindexmulmatrixswapper = 0;
            int theindexmulfloathalfswapper = 0;


            for (int x = 0; x < widthflat; x++)
            {
                for (int y = 0; y < heightflat; y++)
                {
                    for (int z = 0; z < depthflat; z++)
                    {
                        //int index = x + (width * (y + (height * z)));
                        ////Console.WriteLine("index:" + index);
                        //int currentByte = map[index];

                        //10*4*4


                        int index = x + widthflat * (y + heightflat * z);//; //x + width * (y + height * z);//
                        int currentByte = 0;// = map[index];

                        int somevertx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[index];// widthdim[index];
                        int someverty = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[index];
                        int somevertz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[index];// depthdim[index];

                        //currentByte = (((somevertx * 10) + (someverty)) * 10) + somevertz;


                        if (facetype == 0)
                        {
                            currentByte = (((somevertx * 10) + (somevertz)));
                        }
                        else if (facetype == 1)
                        {
                            currentByte = (((someverty * 10) + (somevertz)));
                        }
                        else if (facetype == 2)
                        {
                            currentByte = (((someverty * 10) + (somevertz)));
                        }
                        else if (facetype == 3)
                        {
                            currentByte = (((someverty * 10) + (somevertx)));
                        }
                        else if (facetype == 4)
                        {
                            currentByte = (((someverty * 10) + (somevertx)));
                        }
                        else if (facetype == 5)
                        {
                            currentByte = (((somevertx * 10) + (somevertz)));
                        }




                        ////Console.WriteLine(currentByte);


                        //Console.Write(" " + index);

                        /*
                        int somemaxvecdigit = maxveclengthalt / 2;
                        int somecountermul = 0;
                        int somec = 0;

                        //3 

                        for (int t = 0; t <= index; t++) // index == 45 == 11 
                        {
                            if (somec == somemaxvecdigit)
                            {
                                somecountermul++;
                                somec = 0;
                            }
                            somec++;
                        }*/











                        if (levelofdetail == 0 || levelofdetail == 1)
                        {



                            theindexmulprior = theindexmulprior + (widthflat * depthflat);

                            if (theindexmulprior > (widthflat * heightflat * depthflat) - 1)
                            {
                                theindexmulprior = 0;
                                theindexmulprior = theindexmulstart1 + (widthflat * (theindexmulcounter + 1));
                                //theindexmulfinal = theindexmulprior;
                            }



                            //Console.WriteLine("theindexmulfloatincrementer:" + theindexmulvectorswapper + "/theindexmulfloatincrementer:" + theindexmulfloatincrementer);


                            double testbuffer = 0;

                            if (theindexmulmatrixswapper == 0)
                            {

                                if (theindexmulvectorswapper == 0)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themule) + currentByte;
                                    }
                                }
                                else if (theindexmulvectorswapper == 1)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm21a = (arrayofbytemaprowm21a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm22a = (arrayofbytemaprowm22a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm23a = (arrayofbytemaprowm23a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm24a = (arrayofbytemaprowm24a * themule) + currentByte;
                                    }

                                }
                                else if (theindexmulvectorswapper == 2)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm31a = (arrayofbytemaprowm31a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm32a = (arrayofbytemaprowm32a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm33a = (arrayofbytemaprowm33a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm34a = (arrayofbytemaprowm34a * themule) + currentByte;
                                    }

                                }

                                else if (theindexmulvectorswapper == 3)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm41a = (arrayofbytemaprowm41a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm42a = (arrayofbytemaprowm42a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm43a = (arrayofbytemaprowm43a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm44a = (arrayofbytemaprowm44a * themule) + currentByte;
                                    }

                                }
                            }
                            else if (theindexmulmatrixswapper == 1)
                            {




                                if (theindexmulvectorswapper == 0)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm11b = (arrayofbytemaprowm11b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm12b = (arrayofbytemaprowm12b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm13b = (arrayofbytemaprowm13b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm14b = (arrayofbytemaprowm14b * themule) + currentByte;
                                    }
                                }
                                else if (theindexmulvectorswapper == 1)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm21b = (arrayofbytemaprowm21b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm22b = (arrayofbytemaprowm22b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm23b = (arrayofbytemaprowm23b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm24b = (arrayofbytemaprowm24b * themule) + currentByte;
                                    }

                                }
                                else if (theindexmulvectorswapper == 2)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm31b = (arrayofbytemaprowm31b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm32b = (arrayofbytemaprowm32b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm33b = (arrayofbytemaprowm33b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm34b = (arrayofbytemaprowm34b * themule) + currentByte;
                                    }

                                }

                                else if (theindexmulvectorswapper == 3)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm41b = (arrayofbytemaprowm41b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm42b = (arrayofbytemaprowm42b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm43b = (arrayofbytemaprowm43b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm44b = (arrayofbytemaprowm44b * themule) + currentByte;
                                    }

                                }
                            }
                        }
                        else if (levelofdetail == 2)
                        {

                            if (index == 0 || index == 4)
                            {
                                arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                            }
                            else if (index == 2 || index == 6)
                            {
                                arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                            }
                            else if (index == 1 || index == 5)
                            {
                                arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themule) + currentByte;
                            }
                            else if (index == 3 || index == 7)
                            {
                                arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themule) + currentByte;
                            }

                        }


















                        /*
                        if (index == 0 || index == 16)
                        {
                            if (index == 0)
                            {
                                arrayofbytemaprowm11a = currentByte;
                            }
                            else if (index == 16)
                            {
                                arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themul) + currentByte;
                            }
                        }
                        else if (index == 32 || index == 48)
                        {
                            if (index == 32)
                            {
                                arrayofbytemaprowm12a = currentByte;
                            }
                            else if (index == 48)
                            {
                                arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themul) + currentByte;
                            }
                        }
                        else if (index == 4 || index == 20)
                        {
                            if (index == 4)
                            {
                                arrayofbytemaprowm13a = currentByte;
                            }
                            else if (index == 20)
                            {
                                arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themul) + currentByte;
                            }
                        }
                        else if (index == 36 || index == 52)
                        {
                            if (index == 36)
                            {
                                arrayofbytemaprowm14a = currentByte;
                            }
                            else if (index == 52)
                            {
                                arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themul) + currentByte;
                            }
                        }
                        else if (index == 8 || index == 24)
                        {
                            if (index == 8)
                            {
                                arrayofbytemaprowm21a = currentByte;
                            }
                            else if (index == 24)
                            {
                                arrayofbytemaprowm21a = (arrayofbytemaprowm21a * themul) + currentByte;
                            }
                        }
                        else if (index == 40 || index == 56)
                        {
                            if (index == 40)
                            {
                                arrayofbytemaprowm22a = currentByte;
                            }
                            else if (index == 56)
                            {
                                arrayofbytemaprowm22a = (arrayofbytemaprowm22a * themul) + currentByte;
                            }
                        }
                        else if (index == 12 || index == 28)
                        {
                            if (index == 12)
                            {
                                arrayofbytemaprowm23a = currentByte;
                            }
                            else if (index == 28)
                            {
                                arrayofbytemaprowm23a = (arrayofbytemaprowm23a * themul) + currentByte;
                            }
                        }
                        else if (index == 44 || index == 60)
                        {
                            if (index == 44)
                            {
                                arrayofbytemaprowm24a = currentByte;
                            }
                            else if (index == 60)
                            {
                                arrayofbytemaprowm24a = (arrayofbytemaprowm24a * themul) + currentByte;
                            }
                        }
                        else if (index == 1 || index == 17)
                        {
                            if (index == 1)
                            {
                                arrayofbytemaprowm31a = currentByte;
                            }
                            else if (index == 17)
                            {
                                arrayofbytemaprowm31a = (arrayofbytemaprowm31a * themul) + currentByte;
                            }
                        }
                        else if (index == 33 || index == 49)
                        {
                            if (index == 33)
                            {
                                arrayofbytemaprowm32a = currentByte;
                            }
                            else if (index == 49)
                            {
                                arrayofbytemaprowm32a = (arrayofbytemaprowm32a * themul) + currentByte;
                            }
                        }
                        else if (index == 5 || index == 21)
                        {
                            if (index == 5)
                            {
                                arrayofbytemaprowm33a = currentByte;
                            }
                            else if (index == 21)
                            {
                                arrayofbytemaprowm33a = (arrayofbytemaprowm33a * themul) + currentByte;
                            }
                        }
                        else if (index == 37 || index == 53)
                        {
                            if (index == 37)
                            {
                                arrayofbytemaprowm34a = currentByte;
                            }
                            else if (index == 53)
                            {
                                arrayofbytemaprowm34a = (arrayofbytemaprowm34a * themul) + currentByte;
                            }
                        }
                        else if (index == 9 || index == 25)
                        {
                            if (index == 9)
                            {
                                arrayofbytemaprowm41a = currentByte;
                            }
                            else if (index == 25)
                            {
                                arrayofbytemaprowm41a = (arrayofbytemaprowm41a * themul) + currentByte;
                            }
                        }
                        else if (index == 41 || index == 57)
                        {
                            if (index == 41)
                            {
                                arrayofbytemaprowm42a = currentByte;
                            }
                            else if (index == 57)
                            {
                                arrayofbytemaprowm42a = (arrayofbytemaprowm42a * themul) + currentByte;
                            }
                        }
                        else if (index == 13 || index == 29)
                        {
                            if (index == 13)
                            {
                                arrayofbytemaprowm43a = currentByte;
                            }
                            else if (index == 29)
                            {
                                arrayofbytemaprowm43a = (arrayofbytemaprowm43a * themul) + currentByte;
                            }
                        }
                        else if (index == 45 || index == 61)
                        {
                            if (index == 45)
                            {
                                arrayofbytemaprowm44a = currentByte;
                            }
                            else if (index == 61)
                            {
                                arrayofbytemaprowm44a = (arrayofbytemaprowm44a * themul) + currentByte;
                            }
                        }
                        else if (index == 2 || index == 18)
                        {
                            if (index == 2)
                            {
                                arrayofbytemaprowm11b = currentByte;
                            }
                            else if (index == 18)
                            {
                                arrayofbytemaprowm11b = (arrayofbytemaprowm11b * themul) + currentByte;
                            }
                        }
                        else if (index == 34 || index == 50)
                        {
                            if (index == 34)
                            {
                                arrayofbytemaprowm12b = currentByte;
                            }
                            else if (index == 50)
                            {
                                arrayofbytemaprowm12b = (arrayofbytemaprowm12b * themul) + currentByte;
                            }
                        }
                        else if (index == 6 || index == 22)
                        {
                            if (index == 6)
                            {
                                arrayofbytemaprowm13b = currentByte;
                            }
                            else if (index == 22)
                            {
                                arrayofbytemaprowm13b = (arrayofbytemaprowm13b * themul) + currentByte;
                            }
                        }
                        else if (index == 38 || index == 54)
                        {
                            if (index == 38)
                            {
                                arrayofbytemaprowm14b = currentByte;
                            }
                            else if (index == 54)
                            {
                                arrayofbytemaprowm14b = (arrayofbytemaprowm14b * themul) + currentByte;
                            }
                        }
                        else if (index == 10 || index == 26)
                        {
                            if (index == 10)
                            {
                                arrayofbytemaprowm21b = currentByte;
                            }
                            else if (index == 26)
                            {
                                arrayofbytemaprowm21b = (arrayofbytemaprowm21b * themul) + currentByte;
                            }
                        }
                        else if (index == 42 || index == 58)
                        {
                            if (index == 42)
                            {
                                arrayofbytemaprowm22b = currentByte;
                            }
                            else if (index == 58)
                            {
                                arrayofbytemaprowm22b = (arrayofbytemaprowm22b * themul) + currentByte;
                            }
                        }
                        else if (index == 14 || index == 30)
                        {
                            if (index == 14)
                            {
                                arrayofbytemaprowm23b = currentByte;
                            }
                            else if (index == 30)
                            {
                                arrayofbytemaprowm23b = (arrayofbytemaprowm23b * themul) + currentByte;
                            }
                        }
                        else if (index == 46 || index == 62)
                        {
                            if (index == 46)
                            {
                                arrayofbytemaprowm24b = currentByte;
                            }
                            else if (index == 62)
                            {
                                arrayofbytemaprowm24b = (arrayofbytemaprowm24b * themul) + currentByte;
                            }
                        }
                        else if (index == 3 || index == 19)
                        {
                            if (index == 3)
                            {
                                arrayofbytemaprowm31b = currentByte;
                            }
                            else if (index == 19)
                            {
                                arrayofbytemaprowm31b = (arrayofbytemaprowm31b * themul) + currentByte;
                            }
                        }
                        else if (index == 35 || index == 51)
                        {
                            if (index == 35)
                            {
                                arrayofbytemaprowm32b = currentByte;
                            }
                            else if (index == 51)
                            {
                                arrayofbytemaprowm32b = (arrayofbytemaprowm32b * themul) + currentByte;
                            }
                        }
                        else if (index == 7 || index == 23)
                        {
                            if (index == 7)
                            {
                                arrayofbytemaprowm33b = currentByte;
                            }
                            else if (index == 23)
                            {
                                arrayofbytemaprowm33b = (arrayofbytemaprowm33b * themul) + currentByte;
                            }
                        }
                        else if (index == 39 || index == 55)
                        {
                            if (index == 39)
                            {
                                arrayofbytemaprowm34b = currentByte;
                            }
                            else if (index == 55)
                            {
                                arrayofbytemaprowm34b = (arrayofbytemaprowm34b * themul) + currentByte;
                            }
                        }
                        else if (index == 11 || index == 27)
                        {
                            if (index == 11)
                            {
                                arrayofbytemaprowm41b = currentByte;
                            }
                            else if (index == 27)
                            {
                                arrayofbytemaprowm41b = (arrayofbytemaprowm41b * themul) + currentByte;
                            }
                        }
                        else if (index == 43 || index == 59)
                        {
                            if (index == 43)
                            {
                                arrayofbytemaprowm42b = currentByte;
                            }
                            else if (index == 59)
                            {
                                arrayofbytemaprowm42b = (arrayofbytemaprowm42b * themul) + currentByte;
                            }
                        }
                        else if (index == 15 || index == 31)
                        {
                            if (index == 15)
                            {
                                arrayofbytemaprowm43b = currentByte;
                            }
                            else if (index == 31)
                            {
                                arrayofbytemaprowm43b = (arrayofbytemaprowm43b * themul) + currentByte;
                            }
                        }
                        else if (index == 47 || index == 63)
                        {
                            if (index == 47)
                            {
                                arrayofbytemaprowm44b = currentByte;
                            }
                            else if (index == 63)
                            {
                                arrayofbytemaprowm44b = (arrayofbytemaprowm44b * themul) + currentByte;
                            }
                        }
                        */


                        //Console.WriteLine(theindexmulfloathalfswapper);

                        theindexmulfloathalfswapper++;
                        if (theindexmulfloathalfswapper >= 2)
                        {
                            theindexmulfloathalfswapper = 0;
                            theindexmulfloatincrementer++;

                            if (theindexmulfloatincrementer > 3)
                            {
                                theindexmulfloatincrementer = 0;

                                theindexmulvectorswapper++;
                            }

                            if (theindexmulvectorswapper > 3)
                            {
                                //theindexmulfloatincrementer = 0;
                                theindexmulvectorswapper = 0;
                                theindexmulmatrixswapper++;
                            }

                        }
                    }






                    if (theindexmulcounter == depthflat - 1)
                    {

                        theindexmulstart1++;
                        theindexmulcounter = 0;
                        theindexmulprior = theindexmulstart1;
                    }
                    else
                    {

                        theindexmulcounter++;
                    }
                }
            }







            m11 = arrayofbytemaprowm11a;
            m12 = arrayofbytemaprowm12a;
            m13 = arrayofbytemaprowm13a;
            m14 = arrayofbytemaprowm14a;
            m21 = arrayofbytemaprowm21a;
            m22 = arrayofbytemaprowm22a;
            m23 = arrayofbytemaprowm23a;
            m24 = arrayofbytemaprowm24a;
            m31 = arrayofbytemaprowm31a;
            m32 = arrayofbytemaprowm32a;
            m33 = arrayofbytemaprowm33a;
            m34 = arrayofbytemaprowm34a;
            m41 = arrayofbytemaprowm41a;
            m42 = arrayofbytemaprowm42a;
            m43 = arrayofbytemaprowm43a;
            m44 = arrayofbytemaprowm44a;


            m11b = arrayofbytemaprowm11b;
            m12b = arrayofbytemaprowm12b;
            m13b = arrayofbytemaprowm13b;
            m14b = arrayofbytemaprowm14b;

            m21b = arrayofbytemaprowm21b;
            m22b = arrayofbytemaprowm22b;
            m23b = arrayofbytemaprowm23b;
            m24b = arrayofbytemaprowm24b;

            m31b = arrayofbytemaprowm31b;
            m32b = arrayofbytemaprowm32b;
            m33b = arrayofbytemaprowm33b;
            m34b = arrayofbytemaprowm34b;

            m41b = arrayofbytemaprowm41b;
            m42b = arrayofbytemaprowm42b;
            m43b = arrayofbytemaprowm43b;
            m44b = arrayofbytemaprowm44b;

            /*
            m11c = arrayofbytemaprowm11c;
            m12c = arrayofbytemaprowm12c;
            m13c = arrayofbytemaprowm13c;
            m14c = arrayofbytemaprowm14c;

            m21c = arrayofbytemaprowm21c;
            m22c = arrayofbytemaprowm22c;
            m23c = arrayofbytemaprowm23c;
            m24c = arrayofbytemaprowm24c;

            m31c = arrayofbytemaprowm31c;
            m32c = arrayofbytemaprowm32c;
            m33c = arrayofbytemaprowm33c;
            m34c = arrayofbytemaprowm34c;

            m41c = arrayofbytemaprowm41c;
            m42c = arrayofbytemaprowm42c;
            m43c = arrayofbytemaprowm43c;
            m44c = arrayofbytemaprowm44c;

            m11d = arrayofbytemaprowm11d;
            m12d = arrayofbytemaprowm12d;
            m13d = arrayofbytemaprowm13d;
            m14d = arrayofbytemaprowm14d;

            m21d = arrayofbytemaprowm21d;
            m22d = arrayofbytemaprowm22d;
            m23d = arrayofbytemaprowm23d;
            m24d = arrayofbytemaprowm24d;

            m31d = arrayofbytemaprowm31d;
            m32d = arrayofbytemaprowm32d;
            m33d = arrayofbytemaprowm33d;
            m34d = arrayofbytemaprowm34d;

            m41d = arrayofbytemaprowm41d;
            m42d = arrayofbytemaprowm42d;
            m43d = arrayofbytemaprowm43d;
            m44d = arrayofbytemaprowm44d;*/




            /*
            if (arrayofbytemaprowm11a != 1000000000.0)
            {
                //Console.WriteLine(arrayofbytemaprowm11a);
            }
            */


        }





        //int[] somenewdimswidth;
        //int[] somenewdimsheight;
        //int[] somenewdimsdepth;

        //int maxveclengthalt;
        public void insertdimensionsinint(int minx, int miny, int minz, int maxx, int maxy, int maxz, int typeofterraintiles_, tutorialcubeaschunkinststruct componentparent_, int levelofdetail, int maxveclengthalt, int facetype,
           out double m11, out double m12, out double m13, out double m14,
           out double m21, out double m22, out double m23, out double m24, out double m31, out double m32, out double m33, out double m34, out double m41, out double m42, out double m43, out double m44,

           out double m11b, out double m12b, out double m13b, out double m14b,
           out double m21b, out double m22b, out double m23b, out double m24b, out double m31b, out double m32b, out double m33b, out double m34b, out double m41b, out double m42b, out double m43b, out double m44b, int indexinlevelarray, int thefirstbundlechunkindex, int someindexmain)// , int somechunkkeyboardpriminstanceindex_, int chunkprimindex_, int chunkinstindex_
        {
            /*
            int[] mapdimsx = null;
            int[] mapdimsy = null;
            int[] mapdimsz = null;



            mapdimsx = widthdimtop;
            mapdimsy = heightdimtop;
            mapdimsz = depthdimtop;*/

            /* if (facetype == 0)
             {
                 mapdimsx = widthdimtop;
                 mapdimsy = heightdimtop;
                 mapdimsz = depthdimtop;

             }
             else if (facetype == 1)
             {
                 mapdimsx = widthdimleft;
                 mapdimsy = heightdimleft;
                 mapdimsz = depthdimleft;
             }
             else if (facetype == 2)
             {
                 mapdimsx = widthdimright;
                 mapdimsy = heightdimright;
                 mapdimsz = depthdimright;
             }
             else if (facetype == 3)
             {
                 mapdimsx = widthdimfront;
                 mapdimsy = heightdimfront;
                 mapdimsz = depthdimfront;
             }
             else if (facetype == 4)
             {
                 mapdimsx = widthdimback;
                 mapdimsy = heightdimback;
                 mapdimsz = depthdimback;
             }
             else if (facetype == 5)
             {
                 mapdimsx = widthdimbottom;
                 mapdimsy = heightdimbottom;
                 mapdimsz = depthdimbottom;
             }
            */



            /*List<int> somedata = new List<int>();

            somenewdimswidth = new int[map.Length];
            somenewdimsheight = new int[map.Length];
            somenewdimsdepth = new int[map.Length];
            */
            int somecounter = 0;
            /*for (int i = 0; i < mapvertindexfordims.Length; i++)
            {
                if (mapvertindexfordims[i] == 1)
                {
                    somenewdimswidth[somecounter] = widthdim[i];
                    somenewdimsheight[somecounter] = heightdim[i];
                    somenewdimsdepth[somecounter] = depthdim[i];

                    somedata.Add(i);
                    somecounter++;
                }
            }*/
            /*
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    for (int z = 0; z < depth; z++)
                    {
                        int index = x + width * (y + height * z);

                        if (mapvertindexfordims[index] != 0)
                        {
                            //somenewdimswidth[somecounter] = widthdim[i];
                            //somenewdimsheight[somecounter] = heightdim[i];
                            //somenewdimsdepth[somecounter] = depthdim[i];
                            somedata.Add(index);
                            somecounter++;
                        }
                    }
                }
            }

            int someothercounter = 0;

            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    for (int z = 0; z < depth; z++)
                    {
                        int index = x + width * (y + height * z);

                        //////Console.WriteLine(index);
                        if (someothercounter < somedata.Count)
                        {
                            somenewdimswidth[index] = widthdim[somedata[someothercounter]];
                            somenewdimsheight[index] = heightdim[somedata[someothercounter]];
                            somenewdimsdepth[index] = depthdim[somedata[someothercounter]];
                        }
                        someothercounter++;
                    }
                }
            }*/






            //for 4 by 4 by 4 and placing 8 digits in a float.
            //0-4-1-5-2-6-3-7
            //8-12-9-13-10-14-11-15
            //16-20-17-21-18-22-19-23
            //24-28-25-29-26-30-27-31
            //32-36-33-37-34-38-35-39
            //40-44-41-45-42-46-43-47
            //48-52-49-53-50-54-51-55
            //56-60-57-61-58-62-59-63

            //0 16 32 48
            //4 20 36 52
            //8 24 40 56
            //12 28 44 60
            //1 17 33 49
            //5 21 37 53
            //9 25 41 57
            //13 29 45 61
            //2 18 34 50
            //6 22 38 54 
            //10 26 42 58 
            //14 30 46 62
            //3 19 35 51
            //7 23 39 55
            //11 27 43 59
            //15 31 47 63



            //somedata = null;







            double arrayofbytemaprowm11a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111 
            double arrayofbytemaprowm22a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44a = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm11b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm22b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44b = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm11c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm22c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44c = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm11d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm12d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm13d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm14d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm21d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm22d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm23d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm24d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm31d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm32d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm33d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm34d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111

            double arrayofbytemaprowm41d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm42d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm43d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111
            double arrayofbytemaprowm44d = sccsgraphicssec.paddingformaps;// 1; //111111111111111111111111111



            int maxv = width * height * depth;



            int m11adder = 0;
            int m12adder = 0;
            int m13adder = 0;
            int m14adder = 0;

            int m21adder = 0;
            int m22adder = 0;
            int m23adder = 0;
            int m24adder = 0;

            int m31adder = 0;
            int m32adder = 0;
            int m33adder = 0;
            int m34adder = 0;

            int m41adder = 0;
            int m42adder = 0;
            int m43adder = 0;
            int m44adder = 0;


            int m11badder = 0;
            int m12badder = 0;
            int m13badder = 0;
            int m14badder = 0;

            int m21badder = 0;
            int m22badder = 0;
            int m23badder = 0;
            int m24badder = 0;

            int m31badder = 0;
            int m32badder = 0;
            int m33badder = 0;
            int m34badder = 0;

            int m41badder = 0;
            int m42badder = 0;
            int m43badder = 0;
            int m44badder = 0;



            int m11cadder = 0;
            int m12cadder = 0;
            int m13cadder = 0;
            int m14cadder = 0;

            int m21cadder = 0;
            int m22cadder = 0;
            int m23cadder = 0;
            int m24cadder = 0;

            int m31cadder = 0;
            int m32cadder = 0;
            int m33cadder = 0;
            int m34cadder = 0;

            int m41cadder = 0;
            int m42cadder = 0;
            int m43cadder = 0;
            int m44cadder = 0;


            int m11dadder = 0;
            int m12dadder = 0;
            int m13dadder = 0;
            int m14dadder = 0;

            int m21dadder = 0;
            int m22dadder = 0;
            int m23dadder = 0;
            int m24dadder = 0;

            int m31dadder = 0;
            int m32dadder = 0;
            int m33dadder = 0;
            int m34dadder = 0;

            int m41dadder = 0;
            int m42dadder = 0;
            int m43dadder = 0;
            int m44dadder = 0;


            int themule = 100;

            int theindexmulprior = 0;
            int theindexmulstart1 = 0;
            int theindexmulcounter = 0;
            int theindexmulfloatincrementer = 0;
            //int theindexmulfloatswapper = 0;
            int theindexmulvectorswapper = 0;
            int theindexmulmatrixswapper = 0;
            int theindexmulfloathalfswapper = 0;


            //512 nope... 0 to 64 when using map of 
            for (int x = 0; x < widthflat; x++)
            {
                for (int y = 0; y < heightflat; y++)
                {
                    for (int z = 0; z < depthflat; z++)
                    {
                        //int index = x + (width * (y + (height * z)));
                        ////Console.WriteLine("index:" + index);
                        //int currentByte = map[index];

                        //10*4*4


                        int index = x + widthflat * (y + heightflat * z);//; //x + width * (y + height * z);//
                        int currentByte = 0;// = map[index];

                        int somewidth = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[index];// widthdim[index];
                        int someheight = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[index];
                        int somedepth = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[index];// depthdim[index];

                        //currentByte = (((somewidth * 10) + (someheight)) * 10) + somedepth;



                        //43 21.
                        //432 432.0f
                        //432 432 432 432.0f // 12 digits don't work in an integer. Precision on a float is less than 12 digits.



                        if (facetype == 0)
                        {
                            currentByte = (((somewidth * 10) + (somedepth)));
                        }
                        else if (facetype == 1)
                        {
                            currentByte = (((someheight * 10) + (somedepth)));
                        }
                        else if (facetype == 2)
                        {
                            currentByte = (((someheight * 10) + (somedepth)));
                        }
                        else if (facetype == 3)
                        {
                            currentByte = (((someheight * 10) + (somewidth)));
                        }
                        else if (facetype == 4)
                        {
                            currentByte = (((someheight * 10) + (somewidth)));
                        }
                        else if (facetype == 5)
                        {
                            currentByte = (((somewidth * 10) + (somedepth)));
                        }




                        /*if (levelofdetail == 2)
                        {
                            Console.WriteLine(index);
                        }*/


                        if (levelofdetail == 0 || levelofdetail == 1)
                        {



                            theindexmulprior = theindexmulprior + (widthflat * depthflat);

                            if (theindexmulprior > (widthflat * heightflat * depthflat) - 1)
                            {
                                theindexmulprior = 0;
                                theindexmulprior = theindexmulstart1 + (widthflat * (theindexmulcounter + 1));
                                //theindexmulfinal = theindexmulprior;
                            }

                            //Console.WriteLine("theindexmulfloatincrementer:" + theindexmulvectorswapper + "/theindexmulfloatincrementer:" + theindexmulfloatincrementer);

                            double testbuffer = 0;

                            if (theindexmulmatrixswapper == 0)
                            {

                                if (theindexmulvectorswapper == 0)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themule) + currentByte;
                                    }
                                }
                                else if (theindexmulvectorswapper == 1)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm21a = (arrayofbytemaprowm21a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm22a = (arrayofbytemaprowm22a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm23a = (arrayofbytemaprowm23a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm24a = (arrayofbytemaprowm24a * themule) + currentByte;
                                    }

                                }
                                else if (theindexmulvectorswapper == 2)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm31a = (arrayofbytemaprowm31a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm32a = (arrayofbytemaprowm32a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm33a = (arrayofbytemaprowm33a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm34a = (arrayofbytemaprowm34a * themule) + currentByte;
                                    }

                                }

                                else if (theindexmulvectorswapper == 3)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm41a = (arrayofbytemaprowm41a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm42a = (arrayofbytemaprowm42a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm43a = (arrayofbytemaprowm43a * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm44a = (arrayofbytemaprowm44a * themule) + currentByte;
                                    }

                                }
                            }
                            else if (theindexmulmatrixswapper == 1)
                            {




                                if (theindexmulvectorswapper == 0)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm11b = (arrayofbytemaprowm11b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm12b = (arrayofbytemaprowm12b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm13b = (arrayofbytemaprowm13b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm14b = (arrayofbytemaprowm14b * themule) + currentByte;
                                    }
                                }
                                else if (theindexmulvectorswapper == 1)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm21b = (arrayofbytemaprowm21b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm22b = (arrayofbytemaprowm22b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm23b = (arrayofbytemaprowm23b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm24b = (arrayofbytemaprowm24b * themule) + currentByte;
                                    }

                                }
                                else if (theindexmulvectorswapper == 2)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm31b = (arrayofbytemaprowm31b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm32b = (arrayofbytemaprowm32b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm33b = (arrayofbytemaprowm33b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm34b = (arrayofbytemaprowm34b * themule) + currentByte;
                                    }

                                }

                                else if (theindexmulvectorswapper == 3)
                                {
                                    if (theindexmulfloatincrementer == 0)
                                    {
                                        arrayofbytemaprowm41b = (arrayofbytemaprowm41b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 1)
                                    {
                                        arrayofbytemaprowm42b = (arrayofbytemaprowm42b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 2)
                                    {
                                        arrayofbytemaprowm43b = (arrayofbytemaprowm43b * themule) + currentByte;
                                    }
                                    else if (theindexmulfloatincrementer == 3)
                                    {
                                        arrayofbytemaprowm44b = (arrayofbytemaprowm44b * themule) + currentByte;
                                    }

                                }
                            }
                        }
                        else if (levelofdetail == 2)
                        {

                            if (index == 0 || index == 4)
                            {
                                arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themule) + currentByte;
                            }
                            else if (index == 2 || index == 6)
                            {
                                arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themule) + currentByte;
                            }
                            else if (index == 1 || index == 5)
                            {
                                arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themule) + currentByte;
                            }
                            else if (index == 3 || index == 7)
                            {
                                arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themule) + currentByte;
                            }

                        }









                        ////Console.WriteLine(currentByte);


                        //Console.Write(" " + index);

                        /*
                        int somemaxvecdigit = maxveclengthalt /2;
                        int somecountermul = 0;
                        int somec = 0;

                        //3 

                        for (int t = 0; t <= index; t++) // index == 45 == 11 
                        {
                            if (somec == somemaxvecdigit)
                            {
                                somecountermul++;
                                somec = 0;
                            }
                            somec++;
                        }*/




                        /*
                        if (index == 0 || index == 16)
                        {
                            if (index == 0)
                            {
                                arrayofbytemaprowm11a = currentByte;
                            }
                            else if (index == 16)
                            {
                                arrayofbytemaprowm11a = (arrayofbytemaprowm11a * themul) + currentByte;
                                ////Console.WriteLine(arrayofbytemaprowm11a);
                            }
                        }
                        else if (index == 32 || index == 48)
                        {
                            if (index == 32)
                            {
                                arrayofbytemaprowm12a = currentByte;
                            }
                            else if (index == 48)
                            {
                                arrayofbytemaprowm12a = (arrayofbytemaprowm12a * themul) + currentByte;
                            }
                        }
                        else if (index == 4 || index == 20)
                        {
                            if (index == 4)
                            {
                                arrayofbytemaprowm13a = currentByte;
                            }
                            else if (index == 20)
                            {
                                arrayofbytemaprowm13a = (arrayofbytemaprowm13a * themul) + currentByte;
                            }
                        }
                        else if (index == 36 || index == 52)
                        {
                            if (index == 36)
                            {
                                arrayofbytemaprowm14a = currentByte;
                            }
                            else if (index == 52)
                            {
                                arrayofbytemaprowm14a = (arrayofbytemaprowm14a * themul) + currentByte;
                            }
                        }
                        else if (index == 8 || index == 24)
                        {
                            if (index == 8)
                            {
                                arrayofbytemaprowm21a = currentByte;
                            }
                            else if (index == 24)
                            {
                                arrayofbytemaprowm21a = (arrayofbytemaprowm21a * themul) + currentByte;
                            }
                        }
                        else if (index == 40 || index == 56)
                        {
                            if (index == 40)
                            {
                                arrayofbytemaprowm22a = currentByte;
                            }
                            else if (index == 56)
                            {
                                arrayofbytemaprowm22a = (arrayofbytemaprowm22a * themul) + currentByte;
                            }
                        }
                        else if (index == 12 || index == 28)
                        {
                            if (index == 12)
                            {
                                arrayofbytemaprowm23a = currentByte;
                            }
                            else if (index == 28)
                            {
                                arrayofbytemaprowm23a = (arrayofbytemaprowm23a * themul) + currentByte;
                            }
                        }
                        else if (index == 44 || index == 60)
                        {
                            if (index == 44)
                            {
                                arrayofbytemaprowm24a = currentByte;
                            }
                            else if (index == 60)
                            {
                                arrayofbytemaprowm24a = (arrayofbytemaprowm24a * themul) + currentByte;
                            }
                        }
                        else if (index == 1 || index == 17)
                        {
                            if (index == 1)
                            {
                                arrayofbytemaprowm31a = currentByte;
                            }
                            else if (index == 17)
                            {
                                arrayofbytemaprowm31a = (arrayofbytemaprowm31a * themul) + currentByte;
                            }
                        }
                        else if (index == 33 || index == 49)
                        {
                            if (index == 33)
                            {
                                arrayofbytemaprowm32a = currentByte;
                            }
                            else if (index == 49)
                            {
                                arrayofbytemaprowm32a = (arrayofbytemaprowm32a * themul) + currentByte;
                            }
                        }
                        else if (index == 5 || index == 21)
                        {
                            if (index == 5)
                            {
                                arrayofbytemaprowm33a = currentByte;
                            }
                            else if (index == 21)
                            {
                                arrayofbytemaprowm33a = (arrayofbytemaprowm33a * themul) + currentByte;
                            }
                        }
                        else if (index == 37 || index == 53)
                        {
                            if (index == 37)
                            {
                                arrayofbytemaprowm34a = currentByte;
                            }
                            else if (index == 53)
                            {
                                arrayofbytemaprowm34a = (arrayofbytemaprowm34a * themul) + currentByte;
                            }
                        }
                        else if (index == 9 || index == 25)
                        {
                            if (index == 9)
                            {
                                arrayofbytemaprowm41a = currentByte;
                            }
                            else if (index == 25)
                            {
                                arrayofbytemaprowm41a = (arrayofbytemaprowm41a * themul) + currentByte;
                            }
                        }
                        else if (index == 41 || index == 57)
                        {
                            if (index == 41)
                            {
                                arrayofbytemaprowm42a = currentByte;
                            }
                            else if (index == 57)
                            {
                                arrayofbytemaprowm42a = (arrayofbytemaprowm42a * themul) + currentByte;
                            }
                        }
                        else if (index == 13 || index == 29)
                        {
                            if (index == 13)
                            {
                                arrayofbytemaprowm43a = currentByte;
                            }
                            else if (index == 29)
                            {
                                arrayofbytemaprowm43a = (arrayofbytemaprowm43a * themul) + currentByte;
                            }
                        }
                        else if (index == 45 || index == 61)
                        {
                            if (index == 45)
                            {
                                arrayofbytemaprowm44a = currentByte;
                            }
                            else if (index == 61)
                            {
                                arrayofbytemaprowm44a = (arrayofbytemaprowm44a * themul) + currentByte;
                            }
                        }
                        else if (index == 2 || index == 18)
                        {
                            if (index == 2)
                            {
                                arrayofbytemaprowm11b = currentByte;
                            }
                            else if (index == 18)
                            {
                                arrayofbytemaprowm11b = (arrayofbytemaprowm11b * themul) + currentByte;
                            }
                        }
                        else if (index == 34 || index == 50)
                        {
                            if (index == 34)
                            {
                                arrayofbytemaprowm12b = currentByte;
                            }
                            else if (index == 50)
                            {
                                arrayofbytemaprowm12b = (arrayofbytemaprowm12b * themul) + currentByte;
                            }
                        }
                        else if (index == 6 || index == 22)
                        {
                            if (index == 6)
                            {
                                arrayofbytemaprowm13b = currentByte;
                            }
                            else if (index == 22)
                            {
                                arrayofbytemaprowm13b = (arrayofbytemaprowm13b * themul) + currentByte;
                            }
                        }
                        else if (index == 38 || index == 54)
                        {
                            if (index == 38)
                            {
                                arrayofbytemaprowm14b = currentByte;
                            }
                            else if (index == 54)
                            {
                                arrayofbytemaprowm14b = (arrayofbytemaprowm14b * themul) + currentByte;
                            }
                        }
                        else if (index == 10 || index == 26)
                        {
                            if (index == 10)
                            {
                                arrayofbytemaprowm21b = currentByte;
                            }
                            else if (index == 26)
                            {
                                arrayofbytemaprowm21b = (arrayofbytemaprowm21b * themul) + currentByte;
                            }
                        }
                        else if (index == 42 || index == 58)
                        {
                            if (index == 42)
                            {
                                arrayofbytemaprowm22b = currentByte;
                            }
                            else if (index == 58)
                            {
                                arrayofbytemaprowm22b = (arrayofbytemaprowm22b * themul) + currentByte;
                            }
                        }
                        else if (index == 14 || index == 30)
                        {
                            if (index == 14)
                            {
                                arrayofbytemaprowm23b = currentByte;
                            }
                            else if (index == 30)
                            {
                                arrayofbytemaprowm23b = (arrayofbytemaprowm23b * themul) + currentByte;
                            }
                        }
                        else if (index == 46 || index == 62)
                        {
                            if (index == 46)
                            {
                                arrayofbytemaprowm24b = currentByte;
                            }
                            else if (index == 62)
                            {
                                arrayofbytemaprowm24b = (arrayofbytemaprowm24b * themul) + currentByte;
                            }
                        }
                        else if (index == 3 || index == 19)
                        {
                            if (index == 3)
                            {
                                arrayofbytemaprowm31b = currentByte;
                            }
                            else if (index == 19)
                            {
                                arrayofbytemaprowm31b = (arrayofbytemaprowm31b * themul) + currentByte;
                            }
                        }
                        else if (index == 35 || index == 51)
                        {
                            if (index == 35)
                            {
                                arrayofbytemaprowm32b = currentByte;
                            }
                            else if (index == 51)
                            {
                                arrayofbytemaprowm32b = (arrayofbytemaprowm32b * themul) + currentByte;
                            }
                        }
                        else if (index == 7 || index == 23)
                        {
                            if (index == 7)
                            {
                                arrayofbytemaprowm33b = currentByte;
                            }
                            else if (index == 23)
                            {
                                arrayofbytemaprowm33b = (arrayofbytemaprowm33b * themul) + currentByte;
                            }
                        }
                        else if (index == 39 || index == 55)
                        {
                            if (index == 39)
                            {
                                arrayofbytemaprowm34b = currentByte;
                            }
                            else if (index == 55)
                            {
                                arrayofbytemaprowm34b = (arrayofbytemaprowm34b * themul) + currentByte;
                            }
                        }
                        else if (index == 11 || index == 27)
                        {
                            if (index == 11)
                            {
                                arrayofbytemaprowm41b = currentByte;
                            }
                            else if (index == 27)
                            {
                                arrayofbytemaprowm41b = (arrayofbytemaprowm41b * themul) + currentByte;
                            }
                        }
                        else if (index == 43 || index == 59)
                        {
                            if (index == 43)
                            {
                                arrayofbytemaprowm42b = currentByte;
                            }
                            else if (index == 59)
                            {
                                arrayofbytemaprowm42b = (arrayofbytemaprowm42b * themul) + currentByte;
                            }
                        }
                        else if (index == 15 || index == 31)
                        {
                            if (index == 15)
                            {
                                arrayofbytemaprowm43b = currentByte;
                            }
                            else if (index == 31)
                            {
                                arrayofbytemaprowm43b = (arrayofbytemaprowm43b * themul) + currentByte;
                            }
                        }
                        else if (index == 47 || index == 63)
                        {
                            if (index == 47)
                            {
                                arrayofbytemaprowm44b = currentByte;
                            }
                            else if (index == 63)
                            {
                                arrayofbytemaprowm44b = (arrayofbytemaprowm44b * themul) + currentByte;
                            }
                        }*/






                        theindexmulfloathalfswapper++;
                        if (theindexmulfloathalfswapper >= 2) //4 digits max by vectors. so halfway through 4 is 2 since we are putting 2 values per face, and 2 faces per float.
                        {
                            theindexmulfloathalfswapper = 0;
                            theindexmulfloatincrementer++;

                            if (theindexmulfloatincrementer > 3) //0-1-2-3
                            {
                                theindexmulfloatincrementer = 0;

                                theindexmulvectorswapper++;
                            }

                            if (theindexmulvectorswapper > 3)//0-1-2-3
                            {
                                //theindexmulfloatincrementer = 0;
                                theindexmulvectorswapper = 0;
                                theindexmulmatrixswapper++;
                            }

                        }
                    }






                    if (theindexmulcounter == depthflat - 1)
                    {

                        theindexmulstart1++;
                        theindexmulcounter = 0;
                        theindexmulprior = theindexmulstart1;
                    }
                    else
                    {

                        theindexmulcounter++;
                    }
                }
            }







            m11 = arrayofbytemaprowm11a;
            m12 = arrayofbytemaprowm12a;
            m13 = arrayofbytemaprowm13a;
            m14 = arrayofbytemaprowm14a;
            m21 = arrayofbytemaprowm21a;
            m22 = arrayofbytemaprowm22a;
            m23 = arrayofbytemaprowm23a;
            m24 = arrayofbytemaprowm24a;
            m31 = arrayofbytemaprowm31a;
            m32 = arrayofbytemaprowm32a;
            m33 = arrayofbytemaprowm33a;
            m34 = arrayofbytemaprowm34a;
            m41 = arrayofbytemaprowm41a;
            m42 = arrayofbytemaprowm42a;
            m43 = arrayofbytemaprowm43a;
            m44 = arrayofbytemaprowm44a;


            m11b = arrayofbytemaprowm11b;
            m12b = arrayofbytemaprowm12b;
            m13b = arrayofbytemaprowm13b;
            m14b = arrayofbytemaprowm14b;

            m21b = arrayofbytemaprowm21b;
            m22b = arrayofbytemaprowm22b;
            m23b = arrayofbytemaprowm23b;
            m24b = arrayofbytemaprowm24b;

            m31b = arrayofbytemaprowm31b;
            m32b = arrayofbytemaprowm32b;
            m33b = arrayofbytemaprowm33b;
            m34b = arrayofbytemaprowm34b;

            m41b = arrayofbytemaprowm41b;
            m42b = arrayofbytemaprowm42b;
            m43b = arrayofbytemaprowm43b;
            m44b = arrayofbytemaprowm44b;

            /*
            m11c = arrayofbytemaprowm11c;
            m12c = arrayofbytemaprowm12c;
            m13c = arrayofbytemaprowm13c;
            m14c = arrayofbytemaprowm14c;

            m21c = arrayofbytemaprowm21c;
            m22c = arrayofbytemaprowm22c;
            m23c = arrayofbytemaprowm23c;
            m24c = arrayofbytemaprowm24c;

            m31c = arrayofbytemaprowm31c;
            m32c = arrayofbytemaprowm32c;
            m33c = arrayofbytemaprowm33c;
            m34c = arrayofbytemaprowm34c;

            m41c = arrayofbytemaprowm41c;
            m42c = arrayofbytemaprowm42c;
            m43c = arrayofbytemaprowm43c;
            m44c = arrayofbytemaprowm44c;

            m11d = arrayofbytemaprowm11d;
            m12d = arrayofbytemaprowm12d;
            m13d = arrayofbytemaprowm13d;
            m14d = arrayofbytemaprowm14d;

            m21d = arrayofbytemaprowm21d;
            m22d = arrayofbytemaprowm22d;
            m23d = arrayofbytemaprowm23d;
            m24d = arrayofbytemaprowm24d;

            m31d = arrayofbytemaprowm31d;
            m32d = arrayofbytemaprowm32d;
            m33d = arrayofbytemaprowm33d;
            m34d = arrayofbytemaprowm34d;

            m41d = arrayofbytemaprowm41d;
            m42d = arrayofbytemaprowm42d;
            m43d = arrayofbytemaprowm43d;
            m44d = arrayofbytemaprowm44d;*/





            /*
            if (arrayofbytemaprowm11a != 1000000000.0)
            {
                Console.WriteLine("dim:" + arrayofbytemaprowm11a);
            }*/



        }
















        float padding0 = 0.0f;
        float padding1 = 0.0f;
        float padding2 = 0.0f;

        int index;
        //public tutorialcubeaschunkinst.DVertex[] arrayofvertstop;


        /*public int[] arrayoftrigstop;        
        public tutorialcubeaschunkinst.DVertex[] arrayofvertsbottom;
        public int[] arrayoftrigsbottom;
        public tutorialcubeaschunkinst.DVertex[] arrayofvertsleft;
        public int[] arrayoftrigsleft;
        public tutorialcubeaschunkinst.DVertex[] arrayofvertsright;
        public int[] arrayoftrigsright;
        public tutorialcubeaschunkinst.DVertex[] arrayofvertsfront;
        public int[] arrayoftrigsfront;
        public tutorialcubeaschunkinst.DVertex[] arrayofvertsback;
        public int[] arrayoftrigsback;*/

        /*
        int[][] somearrayofcoords = new int[6][];
        int[][] somearrayofcoordsfloor = new int[6][];
        */
        //public List<int> triangles;
        //public int[] _chunkArray;
        //public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray;


        /*public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace;
        public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace;
        public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace;
        public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace;
        public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace;
        */

        //public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0;
        /*public int[] _chunkVertexArray1;
        public int[] _chunkVertexArray2;
        public int[] _chunkVertexArray3;
        public int[] _chunkVertexArray4;
        public int[] _chunkVertexArray5;*/


        //public int[] sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0;
        /*public int[] _testVertexArray1;
        public int[] _testVertexArray2;
        public int[] _testVertexArray3;
        public int[] _testVertexArray4;
        public int[] _testVertexArray5;*/

        float planeSize;
        //int facetype;
        int vertexlistWidth;
        int vertexlistHeight;
        int vertexlistDepth;
        Vector4 chunkoriginpos;
        int totalints;
        private Vector4 topfacecolor = new Vector4(0, 1, 1, 1);
        private Vector4 leftfacecolor = new Vector4(1, 0, 0, 1);
        private Vector4 rightfacecolor = new Vector4(0, 1, 0, 1);
        private Vector4 frontfacecolor = new Vector4(0, 0, 1, 1);
        private Vector4 backfacecolor = new Vector4(1, 1, 0, 1);
        private Vector4 bottomfacecolor = new Vector4(1, 0, 1, 1);
        /*
        public int X;
        public int Y;
        public int Z;*/
        /*
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth;// = 0;*/
        /*
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;// = 0;*/
        /*
        bool sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne;// = false;
        bool sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo;// = false;
        bool sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree;// = false;
        bool sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour;// = false;*/


        //public List<sclevelgenclass.DVertex> vertexlist = new List<sclevelgenclass.DVertex>(); //listOfVerts
        //public List<tutorialcubeaschunkinst.DVertex> vertexlisttop = new List<tutorialcubeaschunkinst.DVertex>(); //listOfVerts

        /*public List<int> listOfTriangleIndicestop = new List<int>();

        public List<tutorialcubeaschunkinst.DVertex> vertexlistright = new List<tutorialcubeaschunkinst.DVertex>(); //listOfVerts
        public List<int> listOfTriangleIndicesright = new List<int>();

        public List<tutorialcubeaschunkinst.DVertex> vertexlistleft = new List<tutorialcubeaschunkinst.DVertex>(); //listOfVerts
        public List<int> listOfTriangleIndicesleft = new List<int>();

        public List<tutorialcubeaschunkinst.DVertex> vertexlistbottom = new List<tutorialcubeaschunkinst.DVertex>(); //listOfVerts
        public List<int> listOfTriangleIndicesbottom = new List<int>();

        public List<tutorialcubeaschunkinst.DVertex> vertexlistfront = new List<tutorialcubeaschunkinst.DVertex>(); //listOfVerts
        public List<int> listOfTriangleIndicesfront = new List<int>();

        public List<tutorialcubeaschunkinst.DVertex> vertexlistback = new List<tutorialcubeaschunkinst.DVertex>(); //listOfVerts
        public List<int> listOfTriangleIndicesback = new List<int>();*/

        /*
        public chunkdata[] listofchunksadjacent = new chunkdata[6];
        public chunkdata[] listofchunksadjacentfloor = new chunkdata[6];
        */

        //tutorialchunkcubemap[] listofchunksadjacent = new tutorialchunkcubemap[6];
        //tutorialchunkcubemap[] listofchunksadjacentfloor = new tutorialchunkcubemap[6];

        int _index0;// = 0;
        int _index1;// = 0;
        int _index2;// = 0;
        int _index3;// = 0;
        //int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;// = 0;
        /*
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;// = 0;

        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;// = 0;

        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;//= 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ;// = 0;

        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY;// = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ;// = 0;*/
        int block;











        public void findneighbooringchunks(int facetype, tutorialcubeaschunkinststruct componentparent_, int levelofdetail, int minx, int miny, int minz, int maxx, int maxy, int maxz, int indexinlevelarray, int[] chunkinbundlepos, int thefirstbundlechunkindex, tutorialcubeaschunkinststruct thechunk, int someindexmain) //, out int vertexNum, out int indicesNum
        //public void startBuildingArray(Vector4 currentPosition, out sclevelgenclass.DVertex[] vertexArray, out int[] triangleArray, out int[] mapper, int padding0_, int padding1_, int padding2_, int numberOfObjectInWidth_, int numberOfObjectInHeight_, int numberOfObjectInDepth_, int numberOfInstancesPerObjectInWidth_, int numberOfInstancesPerObjectInHeight_, int numberOfInstancesPerObjectInDepth_, int width_, int height_, int depth_, float planeSize_, sclevelgenclassPrim componentparentprim_, sclevelgenclass componentparentinstance_, sclevelgenclass_instances componentparentthischunk_, int fullface_, int voxeltype_)
        {


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor = new chunkdata[sccslevelgen.NUMBEROFFACES];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent = new chunkdata[sccslevelgen.NUMBEROFFACES];


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords = new int[sccslevelgen.NUMBEROFFACES][]; //adjacent chunks left/right/top/bottom/front/back
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor = new int[sccslevelgen.NUMBEROFFACES][];


            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords.Length; i++)
            {
                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i] = new int[3];
            }

            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor.Length; i++)
            {
                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[i] = new int[3];
            }




            //Console.WriteLine("indexofthefirstchunktile:" + indexofthefirstchunktile);


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[0][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x - 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[0][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[0][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[1][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x + 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[1][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[1][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[2][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[2][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[2][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z - 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[3][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[3][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[3][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z + 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[4][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[4][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y - 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[4][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[5][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[5][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y + 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[5][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;



            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[0][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x - 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[0][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[0][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[1][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x + 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[1][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[1][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[2][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[2][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[2][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z - 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[3][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[3][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[3][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z + 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[4][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[4][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[4][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[5][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[5][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[5][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;














            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords.Length; i++)
            {
                //if (levelofdetail == 0)
                {
     

                    int xx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][0];
                    int yy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][1];
                    int zz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][2];

                    if (xx < 0)
                    {
                        xx *= -1;
                        xx = xx + (sccslevelgen.maxx - 1);
                    }

                    if (yy < 0)
                    {
                        yy *= -1;
                        yy = yy + (sccslevelgen.maxy - 1);
                    }
                    if (zz < 0)
                    {
                        zz *= -1;
                        zz = zz + (sccslevelgen.maxz - 1);
                    }

                    int theneighboorchunkindex = xx + sccslevelgen.somewidth * (yy + sccslevelgen.someheight * zz); //y is always 0 on floor tiles


                    if (theneighboorchunkindex < sccslevelgen.somewidth * sccslevelgen.someheight * sccslevelgen.somedepth)
                    {
                        int typeofterraintile = sccslevelgen.levelmap[theneighboorchunkindex];

                        if (typeofterraintile == 0 ||
                           typeofterraintile == 1101 ||
                           typeofterraintile == 1102 ||
                           typeofterraintile == 1103 ||
                           typeofterraintile == 1104 ||
                           typeofterraintile == 1105 ||
                           typeofterraintile == 1106 ||
                           typeofterraintile == 1107 ||
                           typeofterraintile == 1108 ||
                           typeofterraintile == 1109 ||
                           typeofterraintile == 1110 ||
                           typeofterraintile == 1111 ||
                           typeofterraintile == 1112 ||
                           typeofterraintile == -99 ||
                           typeofterraintile == 1115)
                        {

                            //int theindexofthenewchunk = 
                            int indexofchunkinbundle = 0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx) * (0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony) * 0); //y is always 0 on floor tiles

                            //int thecounterofloop = sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                            //int thecounterofloop = (indexofthefirstchunktile * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;// sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                            //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;


                            //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theindexalt];
                            

                            //int thecorrectneighboornindex = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;
                            

                            //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;
                            //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theneighboorchunkindex];




                            int indexinmapplusbundlechunks = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;

                            int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[indexinmapplusbundlechunks];






                            int oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainx;
                            int oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainy;
                            int oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainz;


                            if (i == 0) //check chunk left
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypex == 0)
                                {
                                    oriposmainx -= 1;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                }

                            }
                            else if (i == 1) //check chunk right
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypex == 1)
                                {
                                    oriposmainx += 1;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                }
                            }
                            else if (i == 2) //check chunk back
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypez == 4)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz -= 1;
                                }
                            }
                            else if (i == 3) //check chunk front
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypez == 5)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz += 1;
                                }
                            }
                            else if (i == 4) //check chunk bottom
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypey == 2)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy -= 1;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;

                                }
                            }
                            else if (i == 5) //check chunk top
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypey == 3)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy += 1;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                }
                            }

                            int posmainx = oriposmainx;
                            int posmainy = oriposmainy;
                            int posmainz = oriposmainz;


                            if (posmainx < 0)
                            {
                                posmainx *= -1;
                                posmainx = posmainx + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisionx / 2) - 1);
                            }

                            if (posmainy < 0)
                            {
                                posmainy *= -1;
                                posmainy = posmainy + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisiony / 2) - 1);
                            }
                            if (posmainz < 0)
                            {
                                posmainz *= -1;
                                posmainz = posmainz + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisionz / 2) - 1);
                            }




                            if (posmainx < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx && posmainy < sccsgraphicssec.currentsccsgraphicssec.leveldivisiony && posmainz < sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                            {
                                //var thesomeindexmain = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainz);
                                var thesomeindexmain = posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * posmainz);





                                //achunk = sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain];


                                if (thesomeindexmain >= 0 && thesomeindexmain < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx * sccsgraphicssec.currentsccsgraphicssec.leveldivisiony * sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                                {



                                    //sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].counterofindexes




                                    //lock (sccsgraphicssec.emptyobjectlocks[thesomeindexmain])
                                    {

                                        /*if (sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str != null)
                                        {
                                            if (sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Length > 0)
                                            {



                                                if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex] != null)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes != -1)
                                                    {
                                                        int mul = (width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes);

                                                        int linelength = width * height * depth;

                                                        if (mul + linelength <= sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Length)
                                                        {
                                                            var thestring1 = sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Substring(((width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes)), width * height * depth);

                                                            //Console.WriteLine(thestring1);
                                                            if (thestring1.Length > 0)
                                                            {
                                                                //listofchunksadjacent[i] = sccslevelgen.chunkdata[levelofdetail][0][thecorrectneighboornidex];// new chunkdata();
                                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[i] = new chunkdata();

                                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[i].map = new int[width * height * depth];

                                                                int counter = 0;
                                                                int hasbroken = 0;

                                                                foreach (var strdata in thestring1)
                                                                {
                                                                    int bar;
                                                                    if (int.TryParse(strdata.ToString(), out bar))
                                                                    {
                                                                        //Do something to correct the problem
                                                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[i].map[counter] = bar;
                                                                    }
                                                                    counter++;

                                                                    //else
                                                                    //{
                                                                    //    Console.WriteLine("bar:" + bar);
                                                                    //    hasbroken = 1;
                                                                    //    break;
                                                                    //}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                        }*/




                                        
                                        //if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex] != null)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map != null)
                                            {
                                                //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[i] = new chunkdata();

                                                if (thecorrectneighboornindex < sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain].Length)
                                                {
                                                   // sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[i].map = sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map;
                                                }

                                            }
                                        }

                                        //Console.WriteLine("0_:" + sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes);
                                    }
                                }
                            }


                        }
                    }

                }
  
            }




            /*

         


            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor.Length; i++)
            {
                //if (levelofdetail == 0)
                {
         

                    int xx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[i][0];
                    int yy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[i][1];
                    int zz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[i][2];

                    if (xx < 0)
                    {
                        xx *= -1;
                        xx = xx + (sccslevelgen.maxx - 1);
                    }

                    if (yy < 0)
                    {
                        yy *= -1;
                        yy = yy + (sccslevelgen.maxy - 1);
                    }
                    if (zz < 0)
                    {
                        zz *= -1;
                        zz = zz + (sccslevelgen.maxz - 1);
                    }





                    int theneighboorchunkindex = xx + sccslevelgen.somewidth * (yy + sccslevelgen.someheight * zz); //y is always 0 on floor tiles


                    if (theneighboorchunkindex < sccslevelgen.somewidth * sccslevelgen.someheight * sccslevelgen.somedepth)
                    {


                        int typeofterraintile = sccslevelgen.levelmap[theneighboorchunkindex];

                        if (typeofterraintile == 0 ||
                           typeofterraintile == 1101 ||
                           typeofterraintile == 1102 ||
                           typeofterraintile == 1103 ||
                           typeofterraintile == 1104 ||
                           typeofterraintile == 1105 ||
                           typeofterraintile == 1106 ||
                           typeofterraintile == 1107 ||
                           typeofterraintile == 1108 ||
                           typeofterraintile == 1109 ||
                           typeofterraintile == 1110 ||
                           typeofterraintile == 1111 ||
                           typeofterraintile == 1112 ||
                            typeofterraintile == -99 ||
                            typeofterraintile == 1115)
                        {

                            //int theindexofthenewchunk = 
                            int indexofchunkinbundle = 0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx) * (0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony) * 0); //y is always 0 on floor tiles

                            //int thecounterofloop = sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                            //int thecounterofloop = (indexofthefirstchunktile * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;// sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                            //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;


                            //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theindexalt];
                            

                            //int thecorrectneighboornindex = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;
                            

                            //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;
                            //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theindexalt];
                            
                            //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;
                            //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theneighboorchunkindex];


                            int indexinmapplusbundlechunks = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;


                            int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[indexinmapplusbundlechunks];



                            int oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainx;
                            int oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainy;
                            int oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainz;


                            if (i == 0) //check chunk left
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypex == 0)
                                {
                                    oriposmainx -= 1;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    //Console.WriteLine("isextremitytypex: " + 0);
                                }
                            }
                            else if (i == 1) //check chunk right
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypex == 1)
                                {
                                    oriposmainx += 1;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    //Console.WriteLine("isextremitytypex: " + 1);

                                }
                            }
                            else if (i == 2) //check chunk back
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypez == 4)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz -= 1;
                                    //Console.WriteLine("isextremitytypex: " + 4);
                                }
                            }
                            else if (i == 3) //check chunk front
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypez == 5)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                    oriposmainz += 1;
                                    //Console.WriteLine("isextremitytypex: " + 5);
                                }
                            }
                            else if (i == 4) //check chunk bottom
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypey == 2)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy -= 1;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    // Console.WriteLine("isextremitytypex: " + 2);
                                }
                            }
                            else if (i == 5) //check chunk top
                            {
                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypey == 3)
                                {
                                    oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                    oriposmainy += 1;
                                    oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    //Console.WriteLine("isextremitytypex: " + 3);
                                }
                            }

                            int posmainx = oriposmainx;
                            int posmainy = oriposmainy;
                            int posmainz = oriposmainz;


                            if (posmainx < 0)
                            {
                                posmainx *= -1;
                                posmainx = posmainx + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisionx / 2) - 1);
                            }

                            if (posmainy < 0)
                            {
                                posmainy *= -1;
                                posmainy = posmainy + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisiony / 2) - 1);
                            }
                            if (posmainz < 0)
                            {
                                posmainz *= -1;
                                posmainz = posmainz + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisionz / 2) - 1);
                            }



                            if (posmainx < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx && posmainy < sccsgraphicssec.currentsccsgraphicssec.leveldivisiony && posmainz < sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                            {
                                //var thesomeindexmain = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainz);
                                var thesomeindexmain = posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * posmainz);


                                if (thesomeindexmain >= 0 && thesomeindexmain < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx * sccsgraphicssec.currentsccsgraphicssec.leveldivisiony * sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                                {
                                    //achunk = sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain];

                                    //lock (sccsgraphicssec.emptyobjectlocks[thesomeindexmain])
                                    {
                                        if (sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str != null)
                                        {
                                            if (sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Length > 0)
                                            {
                                                


                                                if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex] != null)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes != -1)
                                                    {


                                                        int mul = (width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes);
                                                        int linelength = width * height * depth;

                                                        if (mul + linelength <= sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Length)
                                                        {
                                                            var thestring1 = sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Substring(((width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes)), width * height * depth);

                                                            //Console.WriteLine(thestring1);
                                                            if (thestring1.Length > 0)
                                                            {
                                                                //listofchunksadjacent[i] = sccslevelgen.chunkdata[levelofdetail][0][thecorrectneighboornidex];// new chunkdata();
                                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor[i] = new chunkdata();

                                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor[i].map = new int[width * height * depth];
                                                                int counter = 0;
                                                                int hasbroken = 0;


                                                                //Console.WriteLine(thestring1);

                                                                foreach (var strdata in thestring1)
                                                                {
                                                                    int bar;
                                                                    if (int.TryParse(strdata.ToString(), out bar))
                                                                    {
                                                                        //Do something to correct the problem
                                                                        //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor[i].map[counter] = bar;
                                                                    }
                                                                    counter++;

                                                                    //else
                                                                    //{
                                                                    //    Console.WriteLine("bar:" + bar);
                                                                    //    hasbroken = 1;
                                                                    //    break;
                                                                    //}
                                                                }
                                                                //Console.WriteLine("counter:" + counter);
                                                            }
                                                        }
                                                    }
                                                }

                                            }
                                        }

                                        /*
                                        if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex] != null)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map != null)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor[i] = new chunkdata();

                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor[i].map = sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map;
                                            }
                                        }
                                        //Console.WriteLine("1_:" + sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes);

                                    }
                                }
                            }

                        }
                    }
                }

            }*/






        }













        public void startBuildingArray(int facetype, tutorialcubeaschunkinststruct componentparent_, int levelofdetail, int minx, int miny, int minz, int maxx, int maxy, int maxz, int indexinlevelarray, int[] chunkinbundlepos, int thefirstbundlechunkindex, tutorialcubeaschunkinststruct thechunk, int someindexmain) //, out int vertexNum, out int indicesNum
        //public void startBuildingArray(Vector4 currentPosition, out sclevelgenclass.DVertex[] vertexArray, out int[] triangleArray, out int[] mapper, int padding0_, int padding1_, int padding2_, int numberOfObjectInWidth_, int numberOfObjectInHeight_, int numberOfObjectInDepth_, int numberOfInstancesPerObjectInWidth_, int numberOfInstancesPerObjectInHeight_, int numberOfInstancesPerObjectInDepth_, int width_, int height_, int depth_, float planeSize_, sclevelgenclassPrim componentparentprim_, sclevelgenclass componentparentinstance_, sclevelgenclass_instances componentparentthischunk_, int fullface_, int voxeltype_)
        {
            widthflat = componentparent_.somelevelgenprimglobals.widthlod0;
            heightflat = componentparent_.somelevelgenprimglobals.heightlod0;
            depthflat = componentparent_.somelevelgenprimglobals.depthlod0;


            width = componentparent_.somelevelgenprimglobals.widthlod0 * 2;
            height = componentparent_.somelevelgenprimglobals.heightlod0 * 2;
            depth = componentparent_.somelevelgenprimglobals.depthlod0 * 2;



            //realpos = newchunkpos_;
            levelofdetail = levelofdetail;
            // TOFIX
            // TOFIX
            // TOFIX
            //levelofdetail
            //width = 10;
            //height = 10;
            //depth = 10;
            // TOFIX
            // TOFIX
            // TOFIX
            //newchunkpos = newchunkpos_;

            componentparent = componentparent_;

            //map = map_;

            facetype = facetype;

            //width = 4;
            //height = 4;
            //depth = 4;

            //////Console.WriteLine(chunkPos);



            if (levelofdetail == 0)
            {
                levelofdetailmul = 1.15f;
            }
            if (levelofdetail == 1)
            {
                levelofdetailmul = 1.15f;
            }
            if (levelofdetail == 2)
            {
                levelofdetailmul = 1.25f;
            }
            if (levelofdetail == 3)
            {
                levelofdetailmul = 2.0f;
            }



            /*
            if (levelofdetail == 0)
            {
                width = componentparent.somelevelgenprimglobals.widthlod0;
                height = componentparent.somelevelgenprimglobals.heightlod0;
                depth = componentparent.somelevelgenprimglobals.depthlod0;

                //width = 10;
                //height = 10;
                //depth = 10;
            }
            else if (levelofdetail == 1)
            {
                width = componentparent.somelevelgenprimglobals.widthlod1;
                height = componentparent.somelevelgenprimglobals.heightlod1;
                depth = componentparent.somelevelgenprimglobals.depthlod1;

                //width = 5;
                //height = 5;
                //depth = 5;
            }

            else if (levelofdetail == 1)
            {
                width = componentparent.somelevelgenprimglobals.widthlod2;
                height = componentparent.somelevelgenprimglobals.heightlod2;
                depth = componentparent.somelevelgenprimglobals.depthlod2;
                //width = 3;
                //height = 3;
                //depth = 3;
            }
            else if (levelofdetail == 2)
            {
                width = componentparent.somelevelgenprimglobals.widthlod3;
                height = componentparent.somelevelgenprimglobals.heightlod3;
                depth = componentparent.somelevelgenprimglobals.depthlod3;

                //width = 2;
                //height = 2;
                //depth = 2;
            }
            else if (levelofdetail == 3)
            {
                width = componentparent.somelevelgenprimglobals.widthlod4;
                height = componentparent.somelevelgenprimglobals.heightlod4;
                depth = componentparent.somelevelgenprimglobals.depthlod4;

                //width = 2;
                //height = 2;
                //depth = 2;
            }
            */

            /*
            width = 8;
            height = 8;
            depth = 8;*/
            /*
            width = 16;
            height = 16;
            depth = 16;*/

            planeSize = 0.01f;//  componentparent.somelevelgenprimglobals.planeSize;












            /*
            planeSize = 0.1f;
            staticPlaneSize = planeSize;

            if (staticPlaneSize == 1)
            {
                staticPlaneSize = planeSize * 0.1f;
                alternateStaticPlaneSize = planeSize * 0.1f;
            }
            else if (staticPlaneSize == 0.1f)
            {
                staticPlaneSize = planeSize;
                alternateStaticPlaneSize = planeSize * 10;
            }
            else if (staticPlaneSize == 0.01f)
            {
                staticPlaneSize = planeSize;
                alternateStaticPlaneSize = planeSize * 1000;
            }*/
            //width = 10;
            seed = 3420;


            chunkoriginpos = new Vector4(newchunkpos[0], newchunkpos[1], newchunkpos[2], 0.0f);

            //floorHeight = height;


            total = width * height * depth;
            totalints = width * height * depth;

            vertexlistWidth = width + 1;
            vertexlistHeight = height + 1;
            vertexlistDepth = depth + 1;
            //map = new int[width * height * depth];

            /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = new int[width * height * depth];*/
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = new int[width * height * depth];

            /*_chunkArray = new int[width * height * depth];*/

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_chunkVertexArray1 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray2 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray3 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray4 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray5 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_testVertexArray1 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray2 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray3 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray4 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray5 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/

            //vertexlist = new List<Vector3>();

            //vertexlisttop = new List<tutorialcubeaschunkinst.DVertex>();
            /*listOfTriangleIndicestop = new List<int>();

            vertexlistback = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesback = new List<int>();


            vertexlistleft = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesleft = new List<int>();


            vertexlistright = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesright = new List<int>();


            vertexlistbottom = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesbottom = new List<int>();

            vertexlistfront = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesfront = new List<int>();*/





            //normalslist = new List<Vector3>();
            //colorslist = new List<Vector4>();
            //indexPoslist = new List<Vector4>();
            //textureslist = new List<Vector2>();

            //////Console.WriteLine(width + " " + width);

            /*
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    for (int z = 0; z < depth; z++)
                    {
                        float noiseXZ = 20;

                        noiseXZ *= fastNoise.GetNoise((((x * staticPlaneSize) + (currentPosition.x * alternateStaticPlaneSize) + seed) / detailScale) * HeightScale, (((y * staticPlaneSize) + (currentPosition.y * alternateStaticPlaneSize) + seed) / detailScale) * HeightScale, (((z * staticPlaneSize) + (currentPosition.z * alternateStaticPlaneSize) + seed) / detailScale) * HeightScale);

                        //////Console.WriteLine(noiseXZ);

                        if (noiseXZ >= 0.1f)
                        {
                            map[x + width * (y + height * z)] = 1;
                        }
                        else if (y == 0 && currentPosition.y == 0)
                        {
                            map[x + width * (y + height * z)] = 1;
                        }
                        else
                        {
                            map[x + width * (y + height * z)] = 0;
                        }

                        //map[x + width * (y + height * z)] = 1;
                    }
                }
            }*/

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims = new int[widthflat * heightflat * depthflat];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop = new int[widthflat * heightflat * depthflat];


            /*
            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords.Length; i++)
            {
                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i] = new int[3];
            }
            */

            /*
            somearrayofcoords[0][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x - 1;
            somearrayofcoords[0][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            somearrayofcoords[0][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            somearrayofcoords[1][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x + 1;
            somearrayofcoords[1][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            somearrayofcoords[1][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            somearrayofcoords[2][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            somearrayofcoords[2][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            somearrayofcoords[2][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z - 1;

            somearrayofcoords[3][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            somearrayofcoords[3][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            somearrayofcoords[3][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z + 1;

            somearrayofcoords[4][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            somearrayofcoords[4][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y - 1;
            somearrayofcoords[4][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            somearrayofcoords[5][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            somearrayofcoords[5][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y + 1;
            somearrayofcoords[5][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;*/


            // ////Console.WriteLine(chunkPos);

            //float somemul = 1.0f;

            //List<Vector3> listofvecs = new List<Vector3>();

            //////Console.WriteLine(chunkPos);

            //LEFT CHUNK
            /*Vector3 somechunkpos = chunkPos;
            somechunkpos.x -= 1.0f;
            listofvecs.Add(somechunkpos);

            //RIGHT CHUNK
            somechunkpos = chunkPos;
            somechunkpos.x += 1.0f;
            listofvecs.Add(somechunkpos);

            //BACK CHUNK
            somechunkpos = chunkPos;
            somechunkpos.z -= 1.0f;
            listofvecs.Add(somechunkpos);

            //FRONT CHUNK
            somechunkpos = chunkPos;
            somechunkpos.z += 1.0f;
            listofvecs.Add(somechunkpos);

            //BOTTOM CHUNK
            somechunkpos = chunkPos;
            somechunkpos.y -= 1.0f;
            listofvecs.Add(somechunkpos);

            //TOP CHUNK
            somechunkpos = chunkPos;
            somechunkpos.y += 1.0f;
            listofvecs.Add(somechunkpos);*/




            int arrayindex;



            /*for (int i = 0; i < listofvecs.Count; i++)
            {
                listofchunksadjacent[i] = componentparent_.getChunklod0((int)Math.Round(listofvecs[i].x), (int)Math.Round(listofvecs[i].y), (int)Math.Round(listofvecs[i].z), out arrayindex); //(int)listofvecs[i].y
                //listofchunksadjacent[i] = componentparent_.getchunkinlevelgenmap((int)Math.Round(listofvecs[i].x), (int)Math.Round(listofvecs[i].y), (int)Math.Round(listofvecs[i].z), levelofdetail); //(int)listofvecs[i].y

                if (listofchunksadjacent[i] != null)
                {
                    //////Console.WriteLine(listofchunksadjacent[i].chunkPos);
                }
            }*/




            //////Console.WriteLine("LOD:" + levelofdetail);

            /*for (int i = 0; i < somearrayofcoords.Length; i++)
            {
                //if (levelofdetail == 0)
                {
                    //listofchunksadjacent[i] = (sclevelgenvert)componentparent.getChunklod0(somearrayofcoords[i][0], somearrayofcoords[i][1], somearrayofcoords[i][2], out arrayindex);
                    listofchunksadjacent[i] = (tutorialchunkcubemap)sccslevelgen.currentlevelgen.getchunkinlevelgenmap(somearrayofcoords[i][0], somearrayofcoords[i][1], somearrayofcoords[i][2], levelofdetail, out arrayindex);
                }
                /* else if (levelofdetail == 1)
                 {
                     listofchunksadjacent[i] = (sclevelgenvert)componentparent.getChunklod1(listofvecs[i].x, listofvecs[i].y, listofvecs[i].z, out arrayindex);


                 }
                 else if (levelofdetail == 1)
                 {
                     listofchunksadjacent[i] = (sclevelgenvert)componentparent.getChunklod2(listofvecs[i].x, listofvecs[i].y, listofvecs[i].z, out arrayindex);


                 }
                 else if (levelofdetail == 2)
                 {
                     listofchunksadjacent[i] = (sclevelgenvert)componentparent.getChunklod3(listofvecs[i].x, listofvecs[i].y, listofvecs[i].z, out arrayindex);

                 }
                 else if (levelofdetail == 3)
                 {
                     listofchunksadjacent[i] = (sclevelgenvert)componentparent.getChunklod4(listofvecs[i].x, listofvecs[i].y, listofvecs[i].z, out arrayindex);

                 }
            }*/




            /*
            for (int i = 0; i < listofvecsadjacentfloor.Count; i++)
            {
                //////Console.WriteLine("x:" + listofvecsadjacentfloor[i].x + "/y:" + listofvecsadjacentfloor[i].y + "/z:" + listofvecsadjacentfloor[i].z);
                //listofchunksadjacentfloor[i] = componentparent_.getChunklod0((int)Math.Round(listofvecsadjacentfloor[i].x), 0, (int)Math.Round(listofvecsadjacentfloor[i].z) , out arrayindex);
                listofchunksadjacentfloor[i] = componentparent_.getChunklod0((int)Math.Round(listofvecsadjacentfloor[i].x), 0, (int)Math.Round(listofvecsadjacentfloor[i].z), out arrayindex); //(int)listofvecs[i].y
                //listofchunksadjacentfloor[i] = componentparent_.getchunkinlevelgenmap((int)Math.Round(listofvecsadjacentfloor[i].x), (int)Math.Round(listofvecsadjacentfloor[i].y), (int)Math.Round(listofvecsadjacentfloor[i].z), levelofdetail); //(int)listofvecs[i].y



                if (listofchunksadjacentfloor[i] != null)
                {
                    //////Console.WriteLine(listofchunksadjacentfloor[i].chunkPos);
                }

            }*/





            //cannot be zero otherwise each vertex will be at zero
            //levelofdetail += 1;
            //cannot be zero otherwise each vertex will be at zero
            /*
            string elementname0 = "x" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[0] + "y" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] + "z" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[2];

            var chunkinfo = (chunkdata)sccslevelgen.getmapfromfile(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[0], sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1], sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[2], levelofdetail, out arrayindex, myXmlDoc, reader, path, output, datafs, str, elementname0, thechunk.ienumstring,thechunk, sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]);

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map = chunkinfo.map;
            */


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacentfloor = new chunkdata[sccslevelgen.NUMBEROFFACES];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent = new chunkdata[sccslevelgen.NUMBEROFFACES];


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords = new int[sccslevelgen.NUMBEROFFACES][]; //adjacent chunks left/right/top/bottom/front/back
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor = new int[sccslevelgen.NUMBEROFFACES][];


            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords.Length; i++)
            {
                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i] = new int[3];
            }

            for (int i = 0; i < sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor.Length; i++)
            {
                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[i] = new int[3];
            }




            //Console.WriteLine("indexofthefirstchunktile:" + indexofthefirstchunktile);


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[0][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x - 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[0][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[0][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[1][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x + 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[1][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[1][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[2][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[2][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[2][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z - 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[3][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[3][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[3][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z + 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[4][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[4][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y - 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[4][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[5][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[5][1] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].y + 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[5][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;



            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[0][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x - 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[0][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[0][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[1][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x + 1;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[1][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[1][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[2][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[2][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[2][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z - 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[3][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[3][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[3][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z + 1;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[4][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[4][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[4][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[5][0] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].x;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[5][1] = 0;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoordsfloor[5][2] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].z;







            sccsSetMap(indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, thechunk, someindexmain);
            Regenerate(facetype, minx, miny, minz, maxx, maxy, maxz, indexinlevelarray, chunkinbundlepos, levelofdetail, thefirstbundlechunkindex, someindexmain); //currentPosition





            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].memoryvertexcounter = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;


            //vertexcountermemory = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;


            //vertexArray = vertexlist.ToArray();
            //triangleArray = listOfTriangleIndices.ToArray();






            /*arrayofvertstop = vertexlisttop.ToArray();
            //arrayoftrigstop = listOfTriangleIndicestop.ToArray();
            vertexcountermemory = vertexlisttop.Count;*/













            /*if (facetype == 0)
            {
                arrayofvertstop = vertexlisttop.ToArray();
                //arrayoftrigstop = listOfTriangleIndicestop.ToArray();
                vertexcountermemory = vertexlisttop.Count;
            }
            else if (facetype == 1)
            {
                arrayofvertsleft = vertexlistleft.ToArray();
                arrayoftrigsleft = listOfTriangleIndicesleft.ToArray();

                vertexcountermemory = vertexlistleft.Count;
            }
            else if (facetype == 2)
            {
                arrayofvertsright = vertexlistright.ToArray();
                arrayoftrigsright = listOfTriangleIndicesright.ToArray();

                vertexcountermemory = vertexlistright.Count;
            }
            else if (facetype == 3)
            {

                arrayofvertsfront = vertexlistfront.ToArray();
                arrayoftrigsfront = listOfTriangleIndicesfront.ToArray();
                vertexcountermemory = vertexlistfront.Count;
            }
            else if (facetype == 4)
            {
                arrayofvertsback = vertexlistback.ToArray();
                arrayoftrigsback = listOfTriangleIndicesback.ToArray();

                vertexcountermemory = vertexlistback.Count;
            }
            else if (facetype == 5)
            {
                arrayofvertsbottom = vertexlistbottom.ToArray();
                arrayoftrigsbottom = listOfTriangleIndicesbottom.ToArray();
                vertexcountermemory = vertexlistbottom.Count;
            }*/


            /*
            
            if (facetype == 0)
            {
                //vertexArray = vertexlist.ToArray();
                //triangleArray = listOfTriangleIndices.ToArray();
                arrayofvertstop = vertexlisttop.ToArray();
                arrayoftrigstop = listOfTriangleIndicestop.ToArray();
            }
            else if (facetype == 1)
            {
                arrayofvertsleft = vertexlistleft.ToArray();
                arrayoftrigsleft = listOfTriangleIndicesleft.ToArray();

            }
            else if (facetype == 2)
            {
                arrayofvertsright = vertexlistright.ToArray();
                arrayoftrigsright = listOfTriangleIndicesright.ToArray();
            }
            else if (facetype == 3)
            {
                arrayofvertsfront = vertexlistfront.ToArray();
                arrayoftrigsfront = listOfTriangleIndicesfront.ToArray();
            }
            else if (facetype == 4)
            {
                arrayofvertsback = vertexlistback.ToArray();
                arrayoftrigsback = listOfTriangleIndicesback.ToArray();

            }
            else if (facetype == 5)
            {
                arrayofvertsbottom = vertexlistbottom.ToArray();
                arrayoftrigsbottom = listOfTriangleIndicesbottom.ToArray();
            }*/



            /*
            vertexArray = new Vector4[vertexlist.Count];

            for (int i = 0; i < vertexArray.Length; i++)
            {
                vertexArray[i] = vertexlist[i].position;
            }*/

            /*
            norms = new Vector3[vertexlist.Count];

            for (int i = 0; i < vertexArray.Length; i++)
            {
                norms[i] = vertexlist[i].normal;
            }

            tex = new Vector2[vertexlist.Count];

            for (int i = 0; i < vertexArray.Length; i++)
            {
                tex[i] = vertexlist[i].tex;
            }
            */







            /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = null;//new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = null;//new int[width * height * depth];*/
            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = null;// new int[width * height * depth];

            //_chunkArray = null;//new int[width * height * depth];

            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_chunkVertexArray1 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray2 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray3 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray4 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray5 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/

            //sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_testVertexArray1 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray2 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray3 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray4 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray5 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/

            /*vertexlisttop = null;
            listOfTriangleIndicestop = null;

            vertexlistbottom = null;
            listOfTriangleIndicesbottom = null;

            vertexlistleft = null;
            listOfTriangleIndicesleft = null;

            vertexlistright = null;
            listOfTriangleIndicesright = null;

            vertexlistfront = null;
            listOfTriangleIndicesfront = null;

            vertexlistback = null;
            listOfTriangleIndicesback = null;*/


            /*
            widthdim = null;
            heightdim = null;
            depthdim = null;
            mapvertindexfordims = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = null;

            somenewdimswidth = null;
            somenewdimsheight = null;
            somenewdimsdepth = null;

            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = null;
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = null;
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = null;*/


            //map = null;

            //listofchunksadjacent = null;
            //listofchunksadjacentfloor = null;

            //return sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map;
        }

        public void newregenerate(int facetype, int minx, int miny, int minz, int maxx, int maxy, int maxz, int indexinlevelarray, int[] chunkinbundlepos, int levelofdetail, int thefirstbundlechunkindex, tutorialcubeaschunkinststruct thechunk, int someindexmain)
        {


            //vertexcount = 0;

            /*
            if (vertexlisttop != null)
            {

                vertexlisttop.Clear();
            }*/

            vertexcountermemory = 0;
            /*
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter = 0;


            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims = new int[widthflat * heightflat * depthflat];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop = new int[widthflat * heightflat * depthflat];*/




            /*
            mapvertindexfordims = new int[widthflat * heightflat * depthflat];
            widthdimtop = new int[widthflat * heightflat * depthflat];
            heightdimtop = new int[widthflat * heightflat * depthflat];
            depthdimtop = new int[widthflat * heightflat * depthflat];
            mapfirstvertxtop = new int[widthflat * heightflat * depthflat];
            mapfirstvertytop = new int[widthflat * heightflat * depthflat];
            mapfirstvertztop = new int[widthflat * heightflat * depthflat];*/

            sccsSetMap(indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, thechunk, someindexmain);
            Regenerate(facetype, minx, miny, minz, maxx, maxy, maxz, indexinlevelarray, chunkinbundlepos, levelofdetail, thefirstbundlechunkindex, someindexmain); //currentPosition


            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].memoryvertexcounter = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;

            //vertexArray = vertexlist.ToArray();
            //triangleArray = listOfTriangleIndices.ToArray();


            /*arrayofvertstop = vertexlisttop.ToArray();
            //arrayoftrigstop = listOfTriangleIndicestop.ToArray();
            vertexcountermemory = vertexlisttop.Count;*/
        }







        public void cleararrays(int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain)
        {

            /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = null;//new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = null;//new int[width * height * depth];*/
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = null;// new int[width * height * depth];

            //_chunkArray = null;//new int[width * height * depth];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_chunkVertexArray1 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray2 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray3 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray4 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray5 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_testVertexArray1 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray2 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray3 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray4 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray5 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/


            //vertexlisttop = null;
            /*listOfTriangleIndicestop = null;
            
            vertexlistbottom = null;
            listOfTriangleIndicesbottom = null;

            vertexlistleft = null;
            listOfTriangleIndicesleft = null;

            vertexlistright = null;
            listOfTriangleIndicesright = null;

            vertexlistfront = null;
            listOfTriangleIndicesfront = null;

            vertexlistback = null;
            listOfTriangleIndicesback = null;*/






            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims = null;

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop = null;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop = null;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop = null;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop = null;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop = null;
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop = null;


            /*
            widthdimleft = null;
            heightdimleft = null;
            depthdimleft = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxleft = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyleft = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzleft = null;

            widthdimright = null;
            heightdimright = null;
            depthdimright = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxright = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyright = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzright = null;

            widthdimfront = null;
            heightdimfront = null;
            depthdimfront = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxfront = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyfront = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzfront = null;

            widthdimback = null;
            heightdimback = null;
            depthdimback = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxback = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyback = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzback = null;


            widthdimbottom = null;
            heightdimbottom = null;
            depthdimbottom = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxbottom = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertybottom = null;
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzbottom = null;*/

            /*
            mapdimsx = null;
            mapdimsy = null;
            mapdimsz = null;

            mapvertx = null;
            mapverty = null;
            mapvertz = null;*/

            //map = null;


            /*somenewdimswidth = null;
            somenewdimsheight = null;
            somenewdimsdepth = null;

            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = null;
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = null;
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = null;*/

        }


        /*
        public void clearsecarrays(int indexinlevelarray, int levelofdetail,int facetype)
        {

            /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = null;// new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = null;//new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = null;//new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = null;// new int[width * height * depth];

            //_chunkArray = null;//new int[width * height * depth];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_chunkVertexArray1 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray2 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray3 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray4 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray5 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_testVertexArray1 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray2 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray3 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray4 = null;//new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray5 = null;// new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/


        //vertexlisttop = null;
        /*listOfTriangleIndicestop = null;

        vertexlistbottom = null;
        listOfTriangleIndicesbottom = null;

        vertexlistleft = null;
        listOfTriangleIndicesleft = null;

        vertexlistright = null;
        listOfTriangleIndicesright = null;

        vertexlistfront = null;
        listOfTriangleIndicesfront = null;

        vertexlistback = null;
        listOfTriangleIndicesback = null;







        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims = null;

        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop = null;
        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop = null;
        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop = null;
        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop = null;
        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop = null;
        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop = null;

        /*
        widthdimleft = null;
        heightdimleft = null;
        depthdimleft = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxleft = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyleft = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzleft = null;

        widthdimright = null;
        heightdimright = null;
        depthdimright = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxright = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyright = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzright = null;

        widthdimfront = null;
        heightdimfront = null;
        depthdimfront = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxfront = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyfront = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzfront = null;

        widthdimback = null;
        heightdimback = null;
        depthdimback = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxback = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyback = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzback = null;


        widthdimbottom = null;
        heightdimbottom = null;
        depthdimbottom = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxbottom = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertybottom = null;
        mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzbottom = null;*/

        /*
        mapdimsx = null;
        mapdimsy = null;
        mapdimsz = null;

        mapvertx = null;
        mapverty = null;
        mapvertz = null;*/

        //map = null;


        /*somenewdimswidth = null;
        somenewdimsheight = null;
        somenewdimsdepth = null;

        somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = null;
        somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = null;
        somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = null;

    }
*/


        public void sccsSetMap(int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, tutorialcubeaschunkinststruct thechunk, int someindexmain)
        {

            someix = 0;
            someiy = 0;
            someiz = 0;


            //sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter = 0;
            /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = new int[width * height * depth];

            _chunkArray = new int[width * height * depth];

            _chunkVertexArray = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];

            vertexlist = new List<Vector3>();
            triangles = new List<int>();*/
            /*
            if (vertexlisttop == null)
            {
                vertexlisttop = new List<tutorialcubeaschunkinst.DVertex>();
            }
            else
            {
                vertexlisttop.Clear();
            }*/

            /*if (listOfTriangleIndicestop == null)
            {
                listOfTriangleIndicestop = new List<int>();
            }
            else
            {
                listOfTriangleIndicestop.Clear();
            }*/

            /*if (vertexlistbottom == null)
            {
                vertexlistbottom = new List<tutorialcubeaschunkinst.DVertex>();
            }
            else
            {
                vertexlistbottom.Clear();
            }

            if (listOfTriangleIndicesbottom == null)
            {
                listOfTriangleIndicesbottom = new List<int>();
            }
            else
            {
                listOfTriangleIndicesbottom.Clear();
            }



            if (vertexlistleft == null)
            {
                vertexlistleft = new List<tutorialcubeaschunkinst.DVertex>();
            }
            else
            {
                vertexlistleft.Clear();
            }

            if (listOfTriangleIndicesleft == null)
            {
                listOfTriangleIndicesleft = new List<int>();
            }
            else
            {
                listOfTriangleIndicesleft.Clear();
            }




            if (vertexlistright == null)
            {
                vertexlistright = new List<tutorialcubeaschunkinst.DVertex>();
            }
            else
            {
                vertexlistright.Clear();
            }

            if (listOfTriangleIndicesright == null)
            {
                listOfTriangleIndicesright = new List<int>();
            }
            else
            {
                listOfTriangleIndicesright.Clear();
            }

            if (vertexlistfront == null)
            {
                vertexlistfront = new List<tutorialcubeaschunkinst.DVertex>();
            }
            else
            {
                vertexlistfront.Clear();
            }

            if (listOfTriangleIndicesfront == null)
            {
                listOfTriangleIndicesfront = new List<int>();
            }
            else
            {
                listOfTriangleIndicesfront.Clear();
            }

            if (vertexlistback == null)
            {
                vertexlistback = new List<tutorialcubeaschunkinst.DVertex>();
            }
            else
            {
                vertexlistback.Clear();
            }

            if (listOfTriangleIndicesback == null)
            {
                listOfTriangleIndicesback = new List<int>();
            }
            else
            {
                listOfTriangleIndicesback.Clear();
            }*/






            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter = 0;
            //vertexlist.Clear();
            //listOfTriangleIndices.Clear();



            /*
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = new int[width * height * depth];*/
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = new int[width * height * depth];

            //_chunkArray = new int[width * height * depth];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_chunkVertexArray1 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray2 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray3 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray4 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray5 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            /*_testVertexArray1 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray2 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray3 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray4 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray5 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/




            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims = new int[widthflat * heightflat * depthflat];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop = new int[widthflat * heightflat * depthflat];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop = new int[widthflat * heightflat * depthflat];

            /*widthdimleft = new int[width * height * depth];
            heightdimleft = new int[width * height * depth];
            depthdimleft = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxleft = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyleft = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzleft = new int[width * height * depth];

            widthdimright = new int[width * height * depth];
            heightdimright = new int[width * height * depth];
            depthdimright = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxright = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyright = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzright = new int[width * height * depth];

            widthdimfront = new int[width * height * depth];
            heightdimfront = new int[width * height * depth];
            depthdimfront = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxfront = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyfront = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzfront = new int[width * height * depth];

            widthdimback = new int[width * height * depth];
            heightdimback = new int[width * height * depth];
            depthdimback = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxback = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertyback = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzback = new int[width * height * depth];

            widthdimbottom = new int[width * height * depth];
            heightdimbottom = new int[width * height * depth];
            depthdimbottom = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertxbottom = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertybottom = new int[width * height * depth];
            mapsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertzbottom = new int[width * height * depth];*/


            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop = 0;

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft = 0;

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright = 0;

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixfront = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyfront = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizfront = 0;

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback = 0;

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom = 0;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom = 0;



            //vertexlist = new List<Vector3>();
            /*
            vertexlisttop = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicestop = new List<int>();

            vertexlistback = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesback = new List<int>();


            vertexlistleft = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesleft = new List<int>();


            vertexlistright = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesright = new List<int>();


            vertexlistbottom = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesbottom = new List<int>();

            vertexlistfront = new List<tutorialcubeaschunkinst.DVertex>();
            listOfTriangleIndicesfront = new List<int>();
            */

            /*somenewdimswidth = new int[width * height * depth];
            somenewdimsheight = new int[width * height * depth];
            somenewdimsdepth = new int[width * height * depth];

            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = new int[width * height * depth];
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = new int[width * height * depth];
            somenewsccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = new int[width * height * depth];
            */



            /*
            int arrayindex = 0;
            var chunkdata = (tutorialcubeaschunkinst.chunkdata)sccslevelgen.getmapfromfile(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].chunkPos[0], sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].chunkPos[1], sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].chunkPos[2], levelofdetail, out arrayindex, myXmlDoc);
            
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map = chunkdata.map;
            */

            /*
            int arrayindex = 0;
            string elementname = "x" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[0] + "y" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] + "z" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[2];

            var chunkinfo = (chunkdata)sccslevelgen.getmapfromfile(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[0], sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1], sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[2], levelofdetail, out arrayindex, myXmlDoc, reader, path, output, datafs, str, elementname, thechunk.ienumstring, thechunk, sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]);

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map = chunkinfo.map;
            */



            /*
            int xx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[0];// somearrayofcoordsfloor[i][0];
            int yy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1];//somearrayofcoordsfloor[i][1];
            int zz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[2];//somearrayofcoordsfloor[i][2];

            if (xx < 0)
            {
                xx *= -1;
                xx = xx + (sccslevelgen.maxx - 1);
            }

            if (yy < 0)
            {
                yy *= -1;
                yy = yy + (sccslevelgen.maxy - 1);
            }
            if (zz < 0)
            {
                zz *= -1;
                zz = zz + (sccslevelgen.maxz - 1);
            }


            int theneighboorchunkindex = xx + sccslevelgen.somewidth * (yy + sccslevelgen.someheight * zz); //y is always 0 on floor tiles

            if (theneighboorchunkindex < sccslevelgen.somewidth * sccslevelgen.someheight * sccslevelgen.somedepth)
            {


                int typeofterraintile = sccslevelgen.levelmap[theneighboorchunkindex];

                if (typeofterraintile == 0 ||
                   typeofterraintile == 1101 ||
                   typeofterraintile == 1102 ||
                   typeofterraintile == 1103 ||
                   typeofterraintile == 1104 ||
                   typeofterraintile == 1105 ||
                   typeofterraintile == 1106 ||
                   typeofterraintile == 1107 ||
                   typeofterraintile == 1108 ||
                   typeofterraintile == 1109 ||
                   typeofterraintile == 1110 ||
                   typeofterraintile == 1111 ||
                   typeofterraintile == 1112 ||
                    typeofterraintile == -99 ||
                    typeofterraintile == 1115)
                {
                    //int theindexofthenewchunk = 
                    int indexofchunkinbundle = 0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx) * (0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony) * 0); //y is always 0 on floor tiles

                    //int thecounterofloop = sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                    //int thecounterofloop = (indexofthefirstchunktile * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;// sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                    int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;

                    int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theindexalt];




                    //string elementname = "x" + somearrayofcoordsfloor[i][0] + "y" + somearrayofcoordsfloor[i][1] + "z" + somearrayofcoordsfloor[i][2];

                    //listofchunksadjacent[i] = (sclevelgenvert)componentparent.getChunklod0(somearrayofcoords[i][0], somearrayofcoords[i][1], somearrayofcoords[i][2], out arrayindex);
                    // listofchunksadjacentfloor[i] = (chunkdata)sccslevelgen.getmapfromfile(somearrayofcoordsfloor[i][0], somearrayofcoordsfloor[i][1], somearrayofcoordsfloor[i][2], levelofdetail, out arrayindex, elementname, thechunk.ienumstring, thechunk, sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]);


                    //var thestring1 = thechunk.str.Substring(((width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thecorrectneighboornidex].counterofindexes)), width * height * depth);


                    //listofchunksadjacentfloor[i] = sccslevelgen.chunkdata[levelofdetail][0][thecorrectneighboornidex];// new chunkdata();
                    var someindexmain = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainz);


                    //achunk = sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain];


                    if (sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain].str != null)
                    {
                        if (sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain].str.Length > 0)
                        {
                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].counterofindexes != -1)
                            {

                                int mul = (width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].counterofindexes);
                                int linelength = width * height * depth;

                                if (mul + linelength <= sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain].str.Length)
                                {
                                    var thestring1 = sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain].str.Substring(((width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].counterofindexes)), width * height * depth);


                                    if (thestring1.Length > 0)
                                    {
                                        //listofchunksadjacentfloor[i] = sccslevelgen.chunkdata[levelofdetail][0][thecorrectneighboornidex];// new chunkdata();
                                        //listofchunksadjacentfloor[i] = new chunkdata();

                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map = new int[width * height * depth];
                                        int counter = 0;
                                        int hasbroken = 0;

                                        foreach (var strdata in thestring1)
                                        {
                                            int bar;
                                            if (int.TryParse(strdata.ToString(), out bar))
                                            {
                                                //Do something to correct the problem
                                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map[counter] = bar;
                                            }
                                            counter++;

                                            /*else
                                            {
                                                Console.WriteLine("bar:" + bar);
                                                hasbroken = 1;
                                                break;
                                            }
                                        }
                                    }
                                }



                            }
                        }
                    }



                }
            }*/





            for (int t = 0; t < vertexlistWidth * vertexlistHeight * vertexlistDepth; t++) //total
            {
                if (t < total)
                {
                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map[t] == 1 || sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map[t] == 3)
                    {
                        //_chunkArray[t] = 1;

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[t] = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map[t]; //map[t]
                        /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace[t] = 1;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace[t] = 1;

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace[t] = 1;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace[t] = 1;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace[t] = 1;*/
                    }
                    else
                    {
                        //_chunkArray[t] = 0;

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[t] = 0;
                        /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace[t] = 0;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace[t] = 0;

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace[t] = 0;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace[t] = 0;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace[t] = 0;*/

                    }
                }

                if (t < vertexlistWidth * vertexlistHeight * vertexlistDepth)
                {
                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[t] = 0;
                    /*_chunkVertexArray1[t] = 0;
                    _chunkVertexArray2[t] = 0;
                    _chunkVertexArray3[t] = 0;
                    _chunkVertexArray4[t] = 0;
                    _chunkVertexArray5[t] = 0;*/

                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[t] = 0;
                    /*_testVertexArray1[t] = 0;
                    _testVertexArray2[t] = 0;
                    _testVertexArray3[t] = 0;
                    _testVertexArray4[t] = 0;
                    _testVertexArray5[t] = 0;*/
                }
            }
        }















        public void Regenerate(int facetype, int minx, int miny, int minz, int maxx, int maxy, int maxz, int indexinlevelarray, int[] chunkinbundlepos, int levelofdetail, int thefirstbundlechunkindex, int someindexmain)
        {





            //vertexlist.Clear();
            //listOfTriangleIndices.Clear();

            /*sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBottomFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayBackFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayFrontFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayLeftFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArrayRightFace = new int[width * height * depth];
            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray = new int[width * height * depth];

            _chunkArray = new int[width * height * depth];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray1 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray2 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray3 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray4 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _chunkVertexArray5 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];

            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray1 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray2 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray3 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray4 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];
            _testVertexArray5 = new int[vertexlistWidth * vertexlistHeight * vertexlistDepth];*/
            //normalslist.Clear();
            //colorslist.Clear();
            //indexPoslist.Clear();
            //textureslist.Clear();

            /*
            int xi = 0;
            int yi = 0;
            int zi = 0;*/

            //CalculateintsForFaces();
            //CreateChunkFaces();

            int someswitchforbuildtype = 1;


            //


            //0 to 512 when using map of 8x8x8...

            //for (int x = 0; x < 4; x++)
            for (int x = minx * widthflat; x < maxx * widthflat; x++) // * 4
            {

                var xi = x;
                //for (int y = 0; y < 8; y++)
                for (int y = miny * heightflat; y < maxy * heightflat; y++) // * 8
                {
                    var yi = y;
                    //for (int z = 0; z < 4; z++)
                    for (int z = minz * depthflat; z < maxz * depthflat; z++) // * 4
                    {
                        var zi = z;





                        /*
                        buildTopFace(xi, yi, zi, 1.0f);
                        buildTopLeft(xi, yi, zi, 1.0f);
                        buildTopRight(xi, yi, zi, 1.0f);
                        //buildFrontFace(xi, yi, zi, 1.0f);
                        buildBackFace(xi, yi, zi, 1.0f);
                        buildBottomFace(xi, yi, zi, 1.0f);*/








                        if (someswitchforbuildtype == 0)
                        {


                            /*
                            if (facetype == 0)
                            {
                                Vector4 start = new Vector4(xi * planeSize, yi * planeSize, zi * planeSize, 1) + chunkoriginpos;
                                var offset1 = Vector4.UnitZ * planeSize;
                                var offset2 = Vector4.UnitX * planeSize;
                                createTopFace(start + Vector4.UnitY * planeSize, offset1, offset2, xi, yi, zi);

                            }
                            else if (facetype == 5)
                            {
                                buildBottomFace(xi, yi, zi, 1.0f);
                            }*/





                            index = xi + (width) * (yi + (height) * zi);
                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map[index];
                            if (block == 1)
                            {
                                if (facetype == 0)
                                {
                                    buildTopFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                }
                                else if (facetype == 1)
                                {
                                    buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                }
                                else if (facetype == 2)
                                {
                                    buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                }
                                else if (facetype == 3)
                                {
                                    buildFrontFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                }
                                else if (facetype == 4)
                                {
                                    buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                }
                                else if (facetype == 5)
                                {
                                    buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                }
                            }
                        }




                        if (someswitchforbuildtype == 1)
                        {
                            index = xi + (width) * (yi + (height) * zi);
                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].map[index];

                            if (block == 1)
                            {
                                ////Console.WriteLine("test");


                                if (facetype == 1)
                                {
                                    if (IsTransparent(xi - 1, yi, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                                    {
                                        //sccslevelgen.chunkdata[facetype][indexinlevelarray] = buildTopLeft(xi, yi, zi, 1.0f, sccslevelgen.chunkdata[facetype][indexinlevelarray]);


                                        //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                        //1101 left wall
                                        //1102 right wall
                                        //1103 front wall
                                        //1104 back wall
                                        //1105 left back inside corner
                                        //1106 right back inside corner
                                        //1107 left front inside corner
                                        //1108 right front inside corner
                                        //1109 left back outside corner
                                        //1110 right back outside corner
                                        //1111 left front outside corner
                                        //1112 right front outside corner


                                        //1101 left wall
                                        //1102 right wall
                                        //1103 front wall
                                        //1104 back wall
                                        //1105 left front outside corner
                                        //1106 right front outside corner
                                        //1107 left back outside corner
                                        //1108 right back outside corner
                                        //1109 left front inside corner
                                        //1110 right front inside corner
                                        //1111 left back inside corner
                                        //1112 right back inside corner



                                     


                                        if (xi != width - 1 && xi != 0)
                                        {
                                            buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (xi == width - 1)
                                        {
                                            buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (xi == 0)
                                        {
                                            if (levelofdetail == 0)
                                            {
                                                int resultneighboor = getneighboortileblock(levelofdetail, facetype, someindexmain, thefirstbundlechunkindex, xi, yi, zi, 0, width - 1, yi, zi);

                                                if (resultneighboor == -1)
                                                {
                                                    if (typeofterraintiles == 1101 || typeofterraintiles == 1105 || typeofterraintiles == 1107 || typeofterraintiles == 1109 || typeofterraintiles == 1111 || typeofterraintiles == 0 || typeofterraintiles == 1115)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    }
                                                    //there is no neighboor to the left.

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                }
                                                else if (resultneighboor == 0)
                                                {
                                                    buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                                else if (resultneighboor == 1)
                                                {

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (facetype == 0)
                                {
                                    if (IsTransparent(xi, yi+1, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                                    {
                                        if (yi != height - 1 && yi != 0)
                                        {
                                            buildTopFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (yi == 0)
                                        {
                                            buildTopFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (yi == height - 1)
                                        {
                                            if (levelofdetail == 0)
                                            {
                                                int resultneighboor = getneighboortileblock(levelofdetail, facetype, someindexmain, thefirstbundlechunkindex, xi, yi, zi, 5, xi, 0, zi);

                                                if (resultneighboor == -1)
                                                {
                                                    //there is no neighboor to the left.

                                                    //if the current chunk is within bounds and the next chunk isn't, then this chunk is a ceiling chunk.
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] >= 0 && sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] < sccslevelgen.wallheightsize - 1)
                                                    {
                                                        buildTopFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    }

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    //buildTopFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                }
                                                else if (resultneighboor == 0)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] >= 0 && sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] < sccslevelgen.wallheightsize - 1)
                                                    {
                                                        buildTopFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    }
                                                }
                                                else if (resultneighboor == 1)
                                                {

                                                }
                                            }
                                        }
                                    }
                                }
                                else if (facetype == 2)
                                {
                                    if (IsTransparent(xi + 1, yi, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                                    {
                                        
                                        
                                        if (xi != width - 1 && xi != 0)
                                        {
                                            buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (xi == 0)
                                        {
                                            buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (xi == width - 1)
                                        {
                                            if (levelofdetail == 0)
                                            {
                                                int resultneighboor = getneighboortileblock(levelofdetail, facetype, someindexmain, thefirstbundlechunkindex, xi, yi, zi, 1, 0, yi, zi);

                                                if (resultneighboor == -1)
                                                {

                                                    /*if (typeofterraintiles == 1101 || typeofterraintiles == 1105 || typeofterraintiles == 1107 || typeofterraintiles == 1109 || typeofterraintiles == 1111 || typeofterraintiles == 0 || typeofterraintiles == 1115)
                                                    {

                                                    }
                                                    else
                                                    {

                                                    }*/

                                                    if (typeofterraintiles == 1102 || typeofterraintiles == 1106 || typeofterraintiles == 1108 || typeofterraintiles == 1110 || typeofterraintiles == 1112 || typeofterraintiles == 0 || typeofterraintiles == 1115)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    }
                                                    //there is no neighboor to the left.

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);#

                                                }
                                                else if (resultneighboor == 0)
                                                {
                                                    buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                                else if (resultneighboor == 1)
                                                {

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                            }
                                            //buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                        }

                                        //buildTopRight(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);


                                    }
                                }
                                else if (facetype == 3)
                                {
                                    if (IsTransparent(xi, yi, zi+1, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                                    {
                                        if (zi != depth - 1 && zi != 0)
                                        {
                                            buildFrontFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (zi == 0)
                                        {
                                            buildFrontFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (zi == depth - 1)
                                        {
                                            if (levelofdetail == 0)
                                            {
                                                int resultneighboor = getneighboortileblock(levelofdetail, facetype, someindexmain, thefirstbundlechunkindex, xi, yi, zi, 3, xi, yi, 0);

                                                if (resultneighboor == -1)
                                                {
                                                    if (typeofterraintiles == 1104 || typeofterraintiles == 1105 || typeofterraintiles == 1106 || typeofterraintiles == 1109 || typeofterraintiles == 1110)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildFrontFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    }
                                                    /*if (typeofterraintiles == 1104 || typeofterraintiles == 1105 || typeofterraintiles == 1106 || typeofterraintiles == 1109 || typeofterraintiles == 1110 || typeofterraintiles == 0 || typeofterraintiles == 1115)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildFrontFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    }*/


                                                }
                                                else if (resultneighboor == 0)
                                                {
                                                    buildFrontFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                                else if (resultneighboor == 1)
                                                {

                                                }
                                            }
                                        }

                                    }
                                }
                                else if (facetype == 4)
                                {
                                    //if (typeofterraintiles == 1104 || typeofterraintiles == 1107 || typeofterraintiles == 1108 || typeofterraintiles == 1111 || typeofterraintiles == 1112)



                                    //1101 left wall
                                    //1102 right wall
                                    //1103 front wall
                                    //1104 back wall
                                    //1105 left back inside corner
                                    //1106 right back inside corner
                                    //1107 left front inside corner
                                    //1108 right front inside corner
                                    //1109 left back outside corner
                                    //1110 right back outside corner
                                    //1111 left front outside corner
                                    //1112 right front outside corner


                                    //1101 left wall
                                    //1102 right wall
                                    //1103 front wall
                                    //1104 back wall
                                    //1105 left front outside corner
                                    //1106 right front outside corner
                                    //1107 left back outside corner
                                    //1108 right back outside corner
                                    //1109 left front inside corner
                                    //1110 right front inside corner
                                    //1111 left back inside corner
                                    //1112 right back inside corner



                                    if (IsTransparent(xi, yi, zi-1, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                                    {
                                        if (zi != depth - 1 && zi != 0)
                                        {
                                            buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (zi == depth - 1)
                                        {
                                            buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (zi == 0)
                                        {
                                            if (levelofdetail == 0)
                                            {
                                                int resultneighboor = getneighboortileblock(levelofdetail, facetype, someindexmain, thefirstbundlechunkindex, xi, yi, zi, 2, xi, yi, depth - 1);

                                                if (resultneighboor == -1)
                                                {

                                                    if (typeofterraintiles == 1103 || typeofterraintiles == 1107 || typeofterraintiles == 1108 || typeofterraintiles == 1111 || typeofterraintiles == 1112)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    }





                                                    /*if (typeofterraintiles == 1103 || typeofterraintiles == 1107 || typeofterraintiles == 1108 || typeofterraintiles == 1110 || typeofterraintiles == 1112 || typeofterraintiles == 0 || typeofterraintiles == 1115)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    }*/

                                                    /*
                                                    if (typeofterraintiles == 1104 || typeofterraintiles == 1105 || typeofterraintiles == 1106 || typeofterraintiles == 1109 || typeofterraintiles == 1110 || typeofterraintiles == 0 || typeofterraintiles == 1115)
                                                    {

                                                    }
                                                    else
                                                    {
                                                        buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    }*/

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);#

                                                }
                                                else if (resultneighboor == 0)
                                                {
                                                    buildBackFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                                else if (resultneighboor == 1)
                                                {

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                            }
                                        }

                                    }
                                }
                                else if (facetype == 5)
                                {

                                    //1101 left wall
                                    //1102 right wall
                                    //1103 front wall
                                    //1104 back wall
                                    //1105 left back inside corner
                                    //1106 right back inside corner
                                    //1107 left front inside corner
                                    //1108 right front inside corner
                                    //1109 left back outside corner
                                    //1110 right back outside corner
                                    //1111 left front outside corner
                                    //1112 right front outside corner


                                    //1101 left wall
                                    //1102 right wall
                                    //1103 front wall
                                    //1104 back wall
                                    //1105 left front outside corner
                                    //1106 right front outside corner
                                    //1107 left back outside corner
                                    //1108 right back outside corner
                                    //1109 left front inside corner
                                    //1110 right front inside corner
                                    //1111 left back inside corner
                                    //1112 right back inside corner


                                    if (IsTransparent(xi, yi - 1, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                                    {
                                        //buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                        if (yi != height - 1 && yi != 0)
                                        {
                                            buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (yi == height- 1)
                                        {
                                            buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                        }
                                        else if (yi == 0)
                                        {
                                            if (levelofdetail == 0)
                                            {
                                                
                                                int resultneighboor = getneighboortileblock(levelofdetail, facetype, someindexmain, thefirstbundlechunkindex, xi, yi, zi, 4, xi, height-1, zi);

                                                if (resultneighboor == -1)
                                                {
                                                    buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    /*
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] > 0 && sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] <= sccslevelgen.wallheightsize - 1)
                                                    {
                                                        buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);

                                                    }*/
                                                    //there is no neighboor to the left.

                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);#

                                                }
                                                else if (resultneighboor == 0)
                                                {
                                                    //if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] > 0 && sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].chunkPos[1] <= sccslevelgen.wallheightsize - 1)
                                                    {
                                                        buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    }
                                                    //buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                                else if (resultneighboor == 1)
                                                {


                                                    //buildBottomFace(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                    //buildTopLeft(xi, yi, zi, 1.0f, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain);
                                                }
                                            }
                                        }
                                    }
                                }


















                            }
                        }
                    }





                    //CalculateintsForFaces();
                    /*if (swtchz == 0)
                    {
                        CreateChunkFaces();
                        //CalculateintsForFaces();


                    }
                    else
                    {
                        break;
                    }*/

                }
            }

            ////Console.WriteLine("vertexcountermemory:" + vertexcountermemory);
        }




        /*
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = 0;


        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondvertx = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondverty = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondvertz = 0;



        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = 0;



        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthvertx = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthverty = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthvertz = 0;



        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop = 0;


        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft = 0;


        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright = 0;


        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixfront = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyfront = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizfront = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront = 0;


        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback = 0;


        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom = 0;
        int sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom = 0;*/






        //UnityEngine.Debug.Log("_xx: " + _xx + " _zz: " + _zz + " sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth: " + sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth + " sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth: " + sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth + " sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX: " + sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + " sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ: " + sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ);
        void buildTopFace(int xi, int yi, int zi, float block, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain) //int _x, int _y, int _z, Vector3 chunkPos
        {
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = width;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = depth;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = height;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour = false;
            //TOPFACE




            var theblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[xi + width * (yi + height * zi)];



            int neighboorblock = -1;


            if (theblock == 1) //|| block == 2
            {

                if (IsTransparent(xi, yi + 1, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                {
                    for (int _xx = 0; _xx < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth; _xx++)
                    {
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX = xi + _xx;
                        for (int _zz = 0; _zz < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth; _zz++)
                        {
                            neighboorblock = -1;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ = zi + _zz;

                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX < width && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ < depth)
                            {

                                //if (someswtc == 1)
                                {
                                    if (_xx == 0 && _zz == 0)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY = yi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = true;




                                        //each time a first corner vertex is found, tag the byte as a face byte;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty = yi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;





                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                            //int neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                            /*
                                            neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                }
                                            }*/






                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;

                                            if (block == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;



                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y+1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);

                                            }
                                            else if (block == 1 || block == 2)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;

                                                    //sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                    //sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = yi;
                                                    //sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;

                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;


                                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }

                                        }
                                        else
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;

                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;


                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = yi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;


                                            /*sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;*/
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;


                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthverty = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;

                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];


                                            /*
                                            neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                }
                                            }*/


                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondverty = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;


                                            if (block == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthverty = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourthvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;

                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                }
                                            }
                                            else if (block == 1 || block == 2) //block == 1||
                                            {
                                                if (block == 1)
                                                {
                                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                    {
                                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];


                                                        /*neighboorblock = -1;

                                                        if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                                        {
                                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                            {
                                                                neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                            }
                                                        }*/


                                                        if (block == 1 || block == 2)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;

                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondverty = yi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].secondvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;

                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                            {
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;

                                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                            }
                                                        }
                                                    }
                                                }
                                                else if (block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }
                                    }

                                    else if (_xx == 0 && _zz > 0)
                                    {
                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                            /*
                                            neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                }
                                            }*/



                                            if (block == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                }


                                            }
                                            else if (block == 1 || block == 2) //block == 1||
                                            {
                                                if (block == 1)
                                                {
                                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                    {
                                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                        /*neighboorblock = -1;

                                                        if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                                        {
                                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                            {
                                                                neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                            }
                                                        }*/


                                                        if (block == 1 || block == 2)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                            {
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                            }
                                                        }
                                                    }
                                                    else //continue??
                                                    {

                                                    }
                                                }
                                                else if (block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);
                                        }

                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];


                                            /*neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                }
                                            }*/




                                            if (block == 0)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;


                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertx = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdverty = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].thirdvertz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;


                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                }
                                            }
                                            else if (block == 1 || block == 2)
                                            {
                                                //********************************************************
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];


                                                    /*neighboorblock = -1;

                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                                    {
                                                        if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                        {
                                                            neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                        }
                                                    }*/




                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                                //************************************************************
                                            }
                                        }
                                        else
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }
                                    }
                                    else if (_xx > 0 && _zz == 0)
                                    {
                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                            /*
                                            neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                }
                                            }*/



                                            if (block == 0)
                                            {
                                                //UnityEngine.Debug.Log("test");
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            else if (block == 1 || block == 2)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];


                                                    /*
                                                    neighboorblock = -1;

                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                                    {
                                                        if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                        {
                                                            neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                        }
                                                    }*/


                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                            /*
                                            neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                }
                                            }*/


                                            if (block == 1 || block == 2)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                }
                                            }

                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                            {
                                                //*****************************************************************************
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                                
                                                /*
                                                neighboorblock = -1;

                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                    {
                                                        neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                    }
                                                }*/


                                                if (block == 1 || block == 2)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                                //*****************************************************************************
                                            }
                                        }
                                        else
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }
                                    }

                                    else if (_xx > 0 && _zz > 0)
                                    {
                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                        {
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                            /*
                                            neighboorblock = -1;

                                            if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                {
                                                    neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                }
                                            }*/

                                            if (block == 0)
                                            {
                                                //UnityEngine.Debug.Log("test");
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                            else if (block == 1 || block == 2)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColorOrange, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                }

                                                //***********************************************************
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                    /*
                                                    neighboorblock = -1;

                                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5] != null)
                                                    {
                                                        if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map != null)
                                                        {
                                                            neighboorblock = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].listofchunksadjacent[5].map[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                        }
                                                    }*/


                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;

                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                            ////////Instantiate(_sphereVisualOtherColorOrange, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                                //*******************************************************
                                            }
                                        }
                                        else
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (!blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                            }
                                        }
                                    }
                                }
                            }

                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * (yi + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))] = 2;
                                ////////Instantiate(blockZero, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 0.5f, y, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 0.5f) * planeSize + chunkPos, Quaternion.identity);
                            }
                        }
                    }






                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1)//
                    {











                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz));
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop + widthflat * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop) + heightflat * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop));
                        //sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop = xi + widthflat * ((yi) + heightflat * (zi));

                        //////Console.WriteLine("index:" + someindex);

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = 1;

                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 1),
                            color = topfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 2),
                            color = topfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
                        //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                         {
                             position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                             indexPos = new Vector4(xi, yi, zi, 3),
                             color = topfacecolor,
                             normal = new Vector3(0, 1, 0),
                             padding0 = padding0,
                             tex = new Vector2(1, 1),
                             padding1 = padding1,
                             padding2 = padding2,
                         });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 4),
                            color = topfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        _index0 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)];
                        _index1 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)];
                        _index2 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)];
                        _index3 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)];

                        var vert0 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1);
                        var vert1 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
                        var vert2 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
                        var vert3 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

                        ////Console.WriteLine("/x:" + vert2.x + "/y:" + vert2.y  + "/z:" + vert2.z);


                        //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

                        //widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(vert0.x - vert2.x); //0  3 == 3 
                        //heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(vert0.y);
                        //depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(vert0.z - vert1.z);


                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert2.x)); //0  3 == 3 
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;// (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));


                        /*
                        widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)((vert2.x) - (vert0.x)); //0  3 == 3 
                        heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;// (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                        depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)((vert1.z) - (vert0.z));
                        */


















                        ////Console.WriteLine("/h:" + sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY);
                        //MAKING THE BYTES UNAVAILABLE TO BE BUILT AS FACES FOR THE NEXT ITERATIONS.
                        /*for (int x = 0; x < widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop]; x++)
                        {
                            for (int z = 0; z < depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop]; z++)
                            {
                                int theindex = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + x) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ + z));
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[theindex] = 3;
                            }
                        }*/




                        //MAKING THE BYTES UNAVAILABLE TO BE BUILT AS FACES FOR THE NEXT ITERATIONS.

                        /*
                        listOfTriangleIndicestop.Add(_index0);
                        listOfTriangleIndicestop.Add(_index1);
                        listOfTriangleIndicestop.Add(_index2);
                        listOfTriangleIndicestop.Add(_index3);
                        listOfTriangleIndicestop.Add(_index2);
                        listOfTriangleIndicestop.Add(_index1);*/



                        /*
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop++;

                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop = 0;
                        }
                       
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop = 0;
                        }*/


                        /*sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop++;

                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop = 0;
                        }

                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop = 0;
                        }
                       
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop = 0;
                        }
                        */

                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop++;
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiztop = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiytop = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixtop = 0;
                        }

                    }
                }
            }

            /*//_mesh = new Mesh();
            _mesh.vertices = vertexlist.ToArray();
            _mesh.listOfTriangleIndices = listOfTriangleIndices.ToArray();

            _testChunk.GetComponent<MeshFilter>().mesh = _mesh;

            _meshRend = _testChunk.GetComponent<MeshRenderer>();
            _meshRend.material = _mat;*/

        }

        /*
        private void createleftFace(Vector4 start, Vector4 offset1, Vector4 offset2)
        {
            //offset1 = back * planeSize;
            //offset2 = down * planeSize;

            //positions[0 + vertzIndex] = start; //(x,y+1,z+1)
            //positions[1 + vertzIndex] = start + offset1;//(x,y+1,z)
            //positions[2 + vertzIndex] = start + offset2; //(x,y,z+1)
            //positions[3 + vertzIndex] = start + offset1 + offset2;//(x,y,z)



            int index0 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start,
                color = leftfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index1 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1,
                color = leftfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index2 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset2,
                color = leftfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index3 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1 + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1 + offset2,
                color = leftfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            listOfTriangleIndices.Add(index0);
            listOfTriangleIndices.Add(index1);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index3);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index1);
        }



        private void createRightFace(Vector4 start, Vector4 offset1, Vector4 offset2)
        {


            int index0 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start,
                color = rightfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index1 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1,
                color = rightfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index2 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset2,
                color = rightfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index3 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1 + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1 + offset2,
                color = rightfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            listOfTriangleIndices.Add(index0);
            listOfTriangleIndices.Add(index1);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index3);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index1);
        }
        */

        int someix = 0;
        int someiy = 0;
        int someiz = 0;

        /*
        private void createTopFace(Vector4 start, Vector4 offset1, Vector4 offset2, int xi, int yi, int zi)
        {

            var someindex = someix + widthflat * ((someiy) + heightflat * (someiz));

            mapvertindexfordims[someindex] = 1;


            //position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,

            int index0 = vertexlisttop.Count;
            vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = (start), //new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                indexPos = new Vector4(xi, yi, zi, 1),
                color = topfacecolor,
                normal = new Vector3(0, 1, 0),
                padding0 = padding0,
                tex = new Vector2(1, 1),
                padding1 = padding1,
                padding2 = padding2,
            });

            int index1 = vertexlisttop.Count;
            //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
            //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
            vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = ((start) + (offset1)), // new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                indexPos = new Vector4(xi, yi, zi, 2),
                color = topfacecolor,
                normal = new Vector3(0, 1, 0),
                padding0 = padding0,
                tex = new Vector2(1, 1),
                padding1 = padding1,
                padding2 = padding2,
            });

            int index2 = vertexlisttop.Count;
            //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
            //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
            vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = ((start) + (offset2)), //new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                indexPos = new Vector4(xi, yi, zi, 3),
                color = topfacecolor,
                normal = new Vector3(0, 1, 0),
                padding0 = padding0,
                tex = new Vector2(1, 1),
                padding1 = padding1,
                padding2 = padding2,
            });

            int index3 = vertexlisttop.Count;
            //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
            //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
            vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = ((start) + (offset1) + (offset2)), // new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                indexPos = new Vector4(xi, yi, zi, 4),
                color = topfacecolor,
                normal = new Vector3(0, 1, 0),
                padding0 = padding0,
                tex = new Vector2(1, 1),
                padding1 = padding1,
                padding2 = padding2,
            });

            var offset11 = Vector3.UnitZ;
            var offset22 = Vector3.UnitX;

            var vert0 = new Vector3(xi, yi, zi);// new Vector4(start.x, start.y, start.z, 1);
            var vert1 = new Vector3(xi, yi, zi) + offset11;// new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
            var vert2 = new Vector3(xi, yi, zi) + offset22;// new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
            var vert3 = new Vector3(xi, yi, zi) + offset11 + offset22;// new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

            //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
            mapfirstvertxtop[someindex] = xi;
            mapfirstvertytop[someindex] = yi;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
            mapfirstvertztop[someindex] = zi;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

            // widthdimtop[someindex] = (int)Math.Abs(vert0.x - vert2.x); //0  3 == 3 
            //heightdimtop[someindex] = (int)Math.Abs(vert0.y);
            //depthdimtop[someindex] = (int)Math.Abs(vert0.z - vert1.z);

            /*widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert2.x)); //0  3 == 3 
            heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
            depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindextop] = (int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));
            

            widthdimtop[someindex] = (int)((vert2.x) - (vert0.x)); //0  3 == 3 
            heightdimtop[someindex] = yi;// (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
            depthdimtop[someindex] = (int)((vert1.z) - (vert0.z));


            /*
            listOfTriangleIndicestop.Add(index0);
            listOfTriangleIndicestop.Add(index1);
            listOfTriangleIndicestop.Add(index2);
            listOfTriangleIndicestop.Add(index3);
            listOfTriangleIndicestop.Add(index2);
            listOfTriangleIndicestop.Add(index1);

            someiz++;
            if (someiz == depthflat)
            {
                someiy++;
                someiz = 0;
            }
            if (someiy == heightflat)
            {
                someix++;
                someiy = 0;
            }
            if (someix == widthflat)
            {
                someix = 0;
            }
        }*/


        /*
        private void createBottomFace(Vector4 start, Vector4 offset1, Vector4 offset2)
        {


            int index0 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start,
                color = bottomfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index1 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1,
                color = bottomfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index2 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset2,
                color = bottomfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index3 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1 + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1 + offset2,
                color = bottomfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;


            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index1);
            listOfTriangleIndices.Add(index0);
            listOfTriangleIndices.Add(index1);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index3);
        }

        private void createFrontFace(Vector4 start, Vector4 offset1, Vector4 offset2)
        {


            int index0 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start,
                color = frontfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index1 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1,
                color = frontfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index2 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset2,
                color = frontfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index3 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1 + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1 + offset2,
                color = frontfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;


            listOfTriangleIndices.Add(index0);
            listOfTriangleIndices.Add(index1);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index3);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index1);
        }



        private void createBackFace(Vector4 start, Vector4 offset1, Vector4 offset2)
        {


            int index0 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start,
                color = backfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index1 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1,
                color = backfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index2 = vertexlist.Count;//sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset2,
                color = backfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

            int index3 = vertexlist.Count;// sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
            //vertexlist.Add(start + offset1 + offset2);
            //vertexlist.Add(leftfacecolor);
            vertexlist.Add(new tutorialcubeaschunkinst.DVertex()
            {
                position = start + offset1 + offset2,
                color = backfacecolor,
                //normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),

            });
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;


            listOfTriangleIndices.Add(index0);
            listOfTriangleIndices.Add(index1);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index3);
            listOfTriangleIndices.Add(index2);
            listOfTriangleIndices.Add(index1);
        }*/


        void buildTopLeft(int xi, int yi, int zi, float block, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain) //int _x, int _y, int _z, Vector3 chunkPos
        {
            //Vector3 somechunkpos = chunkPos;
            //somechunkpos.x -= (1.0f * width) * planeSize;
            //sccstriglevelchunk someChunk = (sccstriglevelchunk)componentparent.getChunklod0(somechunkpos.x, 0, somechunkpos.z);


            //////Console.WriteLine(planeSize);

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = width;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = depth;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = height;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour = false;
            //TOPFACE

            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[xi + width * (yi + height * zi)];

            //if (block == 1) //|| block == 2
            {
                //if (someChunk != null)
                {
                    //if (someChunk.map != null)
                    {
                        //if (someChunk.IsTransparent(width - 1, yi, zi))
                        {

                            if (IsTransparent(xi - 1, yi, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))// && someChunk.IsTransparent(width - 1, yi, zi))
                            {
                                for (int _yy = 0; _yy < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight; _yy++)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY = yi + _yy;

                                    for (int _zz = 0; _zz < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth; _zz++)//int _zz = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth-1; _zz >= 0; _zz--) //int _zz = 0; _zz < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth; _zz++
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ = zi + _zz;

                                        //if (someChunk != null)
                                        {
                                            //if (someChunk.map != null)
                                            {
                                                //if (someChunk.IsTransparent(width - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                {



                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY < height && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ < depth)
                                                    {
                                                        if (_yy == 0 && _zz == 0)
                                                        {

                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX = xi;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = true;

                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                                if (block == 0)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y+1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);

                                                                }
                                                                else if (block == 1 || block == 2)
                                                                {
                                                                    if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                                    {
                                                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                                        if (block == 1 || block == 2)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize + chunkPos, Quaternion.identity);

                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }

                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                                if (block == 0)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);
                                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                    }
                                                                }
                                                                else if (block == 1 || block == 2) //block == 1||
                                                                {
                                                                    if (block == 1)
                                                                    {
                                                                        if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                                        {
                                                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                                            if (block == 1 || block == 2)
                                                                            {
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                                {
                                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    else if (block == 2)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }
                                                        }

                                                        else if (_yy == 0 && _zz > 0)
                                                        {
                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                                if (block == 0)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                    }


                                                                }
                                                                else if (block == 1 || block == 2) //block == 1||
                                                                {
                                                                    if (block == 1)
                                                                    {
                                                                        if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                                        {
                                                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                                                            if (block == 1 || block == 2)
                                                                            {
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);

                                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                                {
                                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                                }
                                                                            }
                                                                        }
                                                                        else //continue??
                                                                        {

                                                                        }
                                                                    }
                                                                    else if (block == 2)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);
                                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;

                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize + chunkPos, Quaternion.identity);
                                                            }

                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                                if (block == 0)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);
                                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                    }
                                                                }
                                                                else if (block == 1 || block == 2)
                                                                {
                                                                    //********************************************************
                                                                    if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                                    {
                                                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                                        if (block == 1 || block == 2)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);
                                                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                            {
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                            }
                                                                        }
                                                                    }
                                                                    //************************************************************
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }
                                                        }
                                                        else if (_yy > 0 && _zz == 0)
                                                        {
                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                                if (block == 0)
                                                                {
                                                                    //UnityEngine.Debug.Log("test");
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo)
                                                                    {
                                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                        }
                                                                    }
                                                                }
                                                                else if (block == 1 || block == 2)
                                                                {
                                                                    if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                                    {
                                                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                                        if (block == 1 || block == 2)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }

                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                                if (block == 1 || block == 2)
                                                                {
                                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                    }
                                                                }

                                                                if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                                {
                                                                    //*****************************************************************************
                                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                                                    if (block == 1 || block == 2)
                                                                    {
                                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                        }
                                                                    }
                                                                    //*****************************************************************************
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }
                                                        }

                                                        else if (_yy > 0 && _zz > 0)
                                                        {
                                                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                            {
                                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                                if (block == 0)
                                                                {
                                                                    //UnityEngine.Debug.Log("test");
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                                else if (block == 1 || block == 2)
                                                                {
                                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                    {
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                    }

                                                                    //***********************************************************
                                                                    if (blockExistsInArray(xi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                                    {
                                                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                                        if (block == 1 || block == 2)
                                                                        {
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;

                                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize + chunkPos, Quaternion.identity);

                                                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                            {
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                            }
                                                                        }
                                                                    }
                                                                    //*******************************************************
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }

                                                            if (!blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                            {
                                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                                {
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize + chunkPos, Quaternion.identity);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))] = 2;
                                                        ////////Instantiate(blockZero, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 0.5f, y, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 0.5f) * planeSize + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }






                                if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = 1;
                                }

                                if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = 1;
                                }

                                if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = 1;
                                }

                                if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = 1;
                                }

                                if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1)//
                                {
                                    //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz));
                                    //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft + widthflat * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft) + heightflat * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft));

                                    //////Console.WriteLine("index:" + someindex);

                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = 1;

                                    /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                                    {
                                        position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                                        indexPos = new Vector4(xi, yi, zi, 1),
                                        color = leftfacecolor,
                                        normal = new Vector3(0, 1, 0),
                                        padding0 = padding0,
                                        tex = new Vector2(1, 1),
                                        padding1 = padding1,
                                        padding2 = padding2,
                                    });*/
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                                    //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
                                    //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
                                    /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                                    {
                                        position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                                        indexPos = new Vector4(xi, yi, zi, 2),
                                        color = leftfacecolor,
                                        normal = new Vector3(0, 1, 0),
                                        padding0 = padding0,
                                        tex = new Vector2(1, 1),
                                        padding1 = padding1,
                                        padding2 = padding2,
                                    });*/
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                                    //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
                                    //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
                                    /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                                    {
                                        position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                                        indexPos = new Vector4(xi, yi, zi, 3),
                                        color = leftfacecolor,
                                        normal = new Vector3(0, 1, 0),
                                        padding0 = padding0,
                                        tex = new Vector2(1, 1),
                                        padding1 = padding1,
                                        padding2 = padding2,
                                    });*/
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                                    //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
                                    //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
                                    /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                                    {
                                        position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                                        indexPos = new Vector4(xi, yi, zi, 4),
                                        color = leftfacecolor,
                                        normal = new Vector3(0, 1, 0),
                                        padding0 = padding0,
                                        tex = new Vector2(1, 1),
                                        padding1 = padding1,
                                        padding2 = padding2,
                                    });*/
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                                    _index0 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)];
                                    _index1 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)];
                                    _index2 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)];
                                    _index3 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)];

                                    var vert0 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1);
                                    var vert1 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
                                    var vert2 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
                                    var vert3 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

                                    //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

                                    //////Console.WriteLine("/v1d:" + vert0.z + "/v2d:" + vert1.z);
                                    //////Console.WriteLine("/v1h:" + vert0.y + "/v2h:" + vert2.y);

                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;//(int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert2.x)); //0  3 == 3 
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                                    sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft] = (int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));


                                    /*
                                    for (int y = 0; y < heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft]; y++)
                                    {
                                        for (int z = 0; z < depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexleft]; z++)
                                        {
                                            int theindex = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX) + width * (((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY + y)) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ + z));
                                            sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[theindex] = 3;
                                        }
                                    }
                                    */



                                    /*listOfTriangleIndicesleft.Add(_index0);
                                    listOfTriangleIndicesleft.Add(_index1);
                                    listOfTriangleIndicesleft.Add(_index2);
                                    listOfTriangleIndicesleft.Add(_index3);
                                    listOfTriangleIndicesleft.Add(_index2);
                                    listOfTriangleIndicesleft.Add(_index1);*/







                                    /*
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft++;

                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft == heightflat)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft++;

                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft = 0;
                                    }
                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft == depthflat)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft++;

                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft = 0;
                                    }
                                    
                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft == widthflat)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft = 0;
                                    }*/

                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft++;
                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft == depthflat)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft++;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizleft = 0;
                                    }
                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft == heightflat)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft++;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyleft = 0;
                                    }
                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft == widthflat)
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixleft = 0;
                                    }


                                }
                            }
                        }
                    }
                }
            }
            /*//_mesh = new Mesh();
            _mesh.vertices = vertexlist.ToArray();
            _mesh.listOfTriangleIndices = _trigz.ToArray();

            _testChunk.GetComponent<MeshFilter>().mesh = _mesh;

            _meshRend = _testChunk.GetComponent<MeshRenderer>();
            _meshRend.material = _mat;*/

            /*_mesh.vertices = vertexlist.ToArray();
            _mesh.listOfTriangleIndices = listOfTriangleIndices.ToArray();

            _testChunk.GetComponent<MeshFilter>().mesh = _mesh;*/
            //_testChunk.GetComponent<MeshRenderer>().material = _mat;
        }

        void buildTopRight(int xi, int yi, int zi, float block, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain) //int xi, int _y, int _z, Vector3 chunkPos
        {
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = width;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = depth;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = height;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour = false;
            //TOPFACE

            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[xi + width * (yi + height * zi)];

            if (block == 1) //|| block == 2
            {
                if (IsTransparent(xi + 1, yi, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                {
                    for (int _yy = 0; _yy < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight; _yy++)
                    {
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY = yi + _yy;
                        for (int _zz = 0; _zz < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth; _zz++)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ = zi + _zz;

                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY < height && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ < depth)
                            {
                                if (_yy == 0 && _zz == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX = xi + 1;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = true;

                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y+1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);

                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_yy == 0 && _zz > 0)
                                {
                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }


                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                                else //continue??
                                                {

                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = xi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);
                                    }

                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            //********************************************************
                                            if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);
                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //************************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                                else if (_yy > 0 && _zz == 0)
                                {
                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                        if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                        {
                                            //*****************************************************************************
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                            if (block == 1 || block == 2)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                            //*****************************************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_yy > 0 && _zz > 0)
                                {
                                    if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }

                                            //***********************************************************
                                            if (blockExistsInArray(xi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = xi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //*******************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (!blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = xi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                            }

                            if (blockExistsInArray(xi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(xi) + width * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))] = 2;
                                ////////Instantiate(blockZero, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 0.5f, y, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 0.5f) * planeSize  + chunkPos, Quaternion.identity);
                            }
                        }
                    }






                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1)//
                    {
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz));
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright + widthflat * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright) + heightflat * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright));

                        //////Console.WriteLine("index:" + someindex);

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = 1;

                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 1),
                            color = rightfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 2),
                            color = rightfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
                        //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
                        /* vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                         {
                             position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                             indexPos = new Vector4(xi, yi, zi, 3),
                             color = rightfacecolor,
                             normal = new Vector3(0, 1, 0),
                             padding0 = padding0,
                             tex = new Vector2(1, 1),
                             padding1 = padding1,
                             padding2 = padding2,
                         });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 4),
                            color = rightfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        _index0 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)];
                        _index1 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)];
                        _index2 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)];
                        _index3 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)];

                        var vert0 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1);
                        var vert1 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
                        var vert2 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
                        var vert3 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

                        //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

                        // widthdimright[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = (int)Math.Abs(vert0.x - vert2.x); //0  3 == 3 
                        // heightdimright[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = (int)Math.Abs(vert0.y - vert2.y);
                        //depthdimright[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = (int)Math.Abs(vert0.z - vert1.z);
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;//(int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert2.x)); //0  3 == 3 
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright] = (int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));


                        /*
                        for (int y = 0; y < heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright]; y++)
                        {
                            for (int z = 0; z < depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexright]; z++)
                            {
                                int theindex = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX - 1) + 8 * (((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY + y)) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ + z));
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[theindex] = 3;
                            }
                        }
                        */

                        /*listOfTriangleIndicesright.Add(_index0);
                        listOfTriangleIndicesright.Add(_index1);
                        listOfTriangleIndicesright.Add(_index2);
                        listOfTriangleIndicesright.Add(_index3);
                        listOfTriangleIndicesright.Add(_index2);
                        listOfTriangleIndicesright.Add(_index1);*/




                        /*sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright++;

                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright = 0;
                        }
                      
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright = 0;
                        }*/

                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright++;
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizright = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyright = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixright = 0;
                        }


                    }


                }
            }
            /*//_mesh = new Mesh();
            _mesh.vertices = vertexlist.ToArray();
            _mesh.listOfTriangleIndices = listOfTriangleIndices.ToArray();

            _testChunk.GetComponent<MeshFilter>().mesh = _mesh;

            _meshRend = _testChunk.GetComponent<MeshRenderer>();
            _meshRend.material = _mat;*/
        }




        void buildFrontFace(int xi, int yi, int zi, float block, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain) // int _x, int _y, int _z, Vector3 chunkPos
        {

            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = width;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = depth;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = height;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour = false;
            //TOPFACE

            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[xi + width * (yi + height * zi)];

            if (block == 1) //|| block == 2
            {
                if (IsTransparent(xi, yi, zi + 1, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                {
                    for (int _yy = 0; _yy < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight; _yy++)
                    {
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY = yi + _yy;
                        for (int _xx = 0; _xx < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth; _xx++)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX = xi + _xx;

                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY < height && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX < width)
                            {
                                if (_yy == 0 && _xx == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ = zi + 1;
                                    //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);

                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = true;

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y+1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);

                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi + 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi + 1))];

                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi + 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi + 1))];

                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_yy == 0 && _xx > 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }


                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi + 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi + 1))];
                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                                else //continue??
                                                {

                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;


                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);


                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            //********************************************************
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi + 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi + 1))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //************************************************************
                                        }
                                    }
                                    else
                                    {

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                                else if (_yy > 0 && _xx == 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi + 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi + 1))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi))];

                                        if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi + 1))
                                        {
                                            //*****************************************************************************
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi + 1))];
                                            if (block == 1 || block == 2)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                            //*****************************************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_yy > 0 && _xx > 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }

                                            //***********************************************************
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi + 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi + 1))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //*******************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (!blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi + 1;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                            }

                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + height * (zi))] = 2;
                                //////Instantiate(blockZero, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 0.5f, y, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 0.5f) * planeSize  + _chunkPos, Quaternion.identity);
                            }
                        }
                    }




                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1)//
                    {
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz));
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixfront + widthflat * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyfront) + heightflat * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizfront));

                        ////Console.WriteLine("index:" + someindex);

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = 1;

                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 1),
                            color = frontfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 2),
                            color = frontfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });
                        */
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
                        //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 3),
                            color = frontfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 4),
                            color = frontfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        _index0 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)];
                        _index1 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)];
                        _index2 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)];
                        _index3 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)];

                        var vert0 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1);
                        var vert1 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
                        var vert2 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
                        var vert3 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

                        //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

                        //widthdimfront[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = (int)Math.Abs(vert0.x - vert1.x); //0  3 == 3 
                        //heightdimfront[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = (int)Math.Abs(vert0.y - vert2.y);
                        //depthdimfront[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = (int)Math.Abs(vert0.z - vert1.z);


                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = (int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert1.x)); //0  3 == 3 
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;//(int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));




                        /*
                        for (int y = 0; y < heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront]; y++)
                        {
                            for (int x = 0; x < widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexfront]; x++)
                            {
                                int theindex = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + x) + width * (((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY + y)) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ-1));
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[theindex] = 3;
                            }
                        }*/



                        /*
                        listOfTriangleIndicesfront.Add(_index0);
                        listOfTriangleIndicesfront.Add(_index1);
                        listOfTriangleIndicesfront.Add(_index2);
                        listOfTriangleIndicesfront.Add(_index3);
                        listOfTriangleIndicesfront.Add(_index2);
                        listOfTriangleIndicesfront.Add(_index1);*/

                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizfront++;
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizfront == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyfront++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizfront = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyfront == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixfront++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyfront = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixfront == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixfront = 0;
                        }


                    }

                }
            }

        }


        void buildBackFace(int xi, int yi, int zi, float block, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain) //int _x, int _y, int zi, Vector3 chunkPos
        {
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = width;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = depth;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = height;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour = false;
            //TOPFACE

            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[xi + width * (yi + height * zi)];
            if (block == 1) //|| block == 2
            {
                if (IsTransparent(xi, yi, zi - 1, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                {
                    for (int _yy = 0; _yy < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight; _yy++)
                    {
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY = yi + _yy;
                        for (int _xx = 0; _xx < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth; _xx++)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX = xi + _xx;

                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY < height && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX < width)
                            {
                                if (_yy == 0 && _xx == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ = zi;
                                    //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = true;

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y+1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);

                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi - 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi - 1))];

                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + _chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi - 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi - 1))];

                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_yy == 0 && _xx > 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }


                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi - 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi - 1))];
                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                                else //continue??
                                                {

                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);


                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = zi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;


                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + _chunkPos, Quaternion.identity);
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);


                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            //********************************************************
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi - 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi - 1))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //************************************************************
                                        }
                                    }
                                    else
                                    {

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                                else if (_yy > 0 && _xx == 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi - 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi - 1))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi))];

                                        if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi - 1))
                                        {
                                            //*****************************************************************************
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY) + height * (zi - 1))];
                                            if (block == 1 || block == 2)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                }
                                            }
                                            //*****************************************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_yy > 0 && _xx > 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                            }

                                            //***********************************************************
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1, zi - 1))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1) + height * (zi - 1))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX - _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = zi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = _yy;

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - ziz) * planeSize  + _chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                                        //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //*******************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (!blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = zi;
                                            //////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, y + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + _chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                            }

                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY, zi))
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateY + height * (zi))] = 2;
                                //////Instantiate(blockZero, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 0.5f, y, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 0.5f) * planeSize  + _chunkPos, Quaternion.identity);
                            }
                        }
                    }





                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1)//
                    {
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz));
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback + widthflat * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback) + heightflat * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback));

                        //////Console.WriteLine("index:" + someindex);

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = 1;

                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 1),
                            color = backfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 2),
                            color = backfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
                        //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 3),
                            color = backfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 4),
                            color = backfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        _index0 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)];
                        _index1 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)];
                        _index2 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)];
                        _index3 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)];

                        var vert0 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1);
                        var vert1 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
                        var vert2 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
                        var vert3 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

                        //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

                        //widthdimback[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = (int)Math.Abs(vert0.x - vert1.x); //0  3 == 3 
                        //heightdimback[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = (int)Math.Abs(vert0.y);
                        //depthdimback[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = (int)Math.Abs(vert0.z - vert1.z);


                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = (int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert1.x)); //0  3 == 3 
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;// (int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));



                        /*
                        for (int y = 0; y < heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback]; y++)
                        {
                            for (int x = 0; x < widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexback]; x++)
                            {
                                int theindex = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + x) + width * (((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY + y)) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[theindex] = 3;
                            }
                        }*/



                        /*
                        listOfTriangleIndicesback.Add(_index0);
                        listOfTriangleIndicesback.Add(_index1);
                        listOfTriangleIndicesback.Add(_index2);
                        listOfTriangleIndicesback.Add(_index3);
                        listOfTriangleIndicesback.Add(_index2);
                        listOfTriangleIndicesback.Add(_index1);*/


                        /*
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback++;

                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback = 0;
                        }
                       
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback = 0;
                        }*/

                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback++;
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizback = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiyback = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixback = 0;
                        }
                    }


                }
            }
        }




        void buildBottomFace(int xi, int yi, int zi, float block, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain) //int _x, int _y, int _z, Vector3 chunkPos
        {
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = width;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = depth;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxHeight = height;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = false;
            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertFour = false;
            //TOPFACE

            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[xi + width * (yi + height * zi)];
            if (block == 1) //|| block == 2
            {
                if (IsTransparent(xi, yi - 1, zi, thefirstbundlechunkindex, levelofdetail, facetype, someindexmain))
                {
                    for (int _xx = 0; _xx < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth; _xx++)
                    {
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX = xi + _xx;
                        for (int _zz = 0; _zz < sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth; _zz++)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ = zi + _zz;

                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX < width && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ < depth)
                            {
                                if (_xx == 0 && _zz == 0)
                                {
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY = yi;
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                    //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);
                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertOne = true;

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);

                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ) * planeSize  + chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                            //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                        //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_xx == 0 && _zz > 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                            //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }


                                        }
                                        else if (block == 1 || block == 2) //block == 1||
                                        {
                                            if (block == 1)
                                            {
                                                if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                                {
                                                    block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                                    if (block == 1 || block == 2)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                        //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                        {
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                            //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                        }
                                                    }
                                                }
                                                else //continue??
                                                {

                                                }
                                            }
                                            else if (block == 2)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;
                                                //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);

                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY = yi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxDepth = _zz + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo = true;

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                        //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1) * planeSize  + chunkPos, Quaternion.identity);
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            //Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            //********************************************************
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //************************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            //Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                                else if (_xx > 0 && _zz == 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertTwo)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    ////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                        ////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];

                                        if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }
                                        }

                                        if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                        {
                                            //*****************************************************************************
                                            block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))];
                                            if (block == 1 || block == 2)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                    ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                }
                                            }
                                            //*****************************************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }

                                else if (_xx > 0 && _zz > 0)
                                {
                                    if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                    {
                                        block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];

                                        if (block == 0)
                                        {
                                            //UnityEngine.Debug.Log("test");
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                            ////Instantiate(_sphereVisualOtherColorBlack, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX+1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                        else if (block == 1 || block == 2)
                                        {
                                            if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                            {
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                ////Instantiate(_sphereVisualOtherColorOrange, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                            }

                                            //***********************************************************
                                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi - 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                                            {
                                                block = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1) + width * ((yi - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))];
                                                if (block == 1 || block == 2)
                                                {
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY = yi;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz;
                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._maxWidth = _xx;

                                                    sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].foundVertThree = true;
                                                    ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ - _zz) * planeSize  + chunkPos, Quaternion.identity);

                                                    if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                                    {
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                                        ////Instantiate(_sphereVisualOtherColorOrange, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                                    }
                                                }
                                            }
                                            //*******************************************************
                                        }
                                    }
                                    else
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }

                                    if (!blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1))
                                    {
                                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ && sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1 == sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX)
                                        {
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY = yi;
                                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ;
                                            ////Instantiate(_sphereVisualOtherColor, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 1, yi + 1, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ) * planeSize  + chunkPos, Quaternion.identity);
                                        }
                                    }
                                }
                            }

                            if (blockExistsInArray(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX, yi, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))
                            {
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX) + width * (yi + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ))] = 2;
                                //////Instantiate(blockZero, new Vector3(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateX + 0.5f, y, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].rowIterateZ + 0.5f) * planeSize  + chunkPos, Quaternion.identity);
                            }
                        }
                    }






                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 0)
                    {
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = 1;
                    }

                    if (getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1 && getChunklod0Vertexint0(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, indexinlevelarray, levelofdetail, facetype, thefirstbundlechunkindex, someindexmain) == 1)//
                    {
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertx + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstverty) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].firstvertz));
                        //var indexofmapvertindexfordimsone = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ));
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom + widthflat * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom) + heightflat * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom));

                        //////Console.WriteLine("index:" + someindex);

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapvertindexfordims[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = 1;

                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 1),
                            color = bottomfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimstwo = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimstwo] = 2;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 2),
                            color = bottomfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsthree = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ));
                        //mapvertindexfordims[indexofmapvertindexfordimsthree] = 3;
                        /*vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                        {
                            position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                            indexPos = new Vector4(xi, yi, zi, 3),
                            color = bottomfacecolor,
                            normal = new Vector3(0, 1, 0),
                            padding0 = padding0,
                            tex = new Vector2(1, 1),
                            padding1 = padding1,
                            padding2 = padding2,
                        });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        //var indexofmapvertindexfordimsfour = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX - 1) + width * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY - 1) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ - 1));
                        //mapvertindexfordims[indexofmapvertindexfordimsfour] = 4;
                        /* vertexlisttop.Add(new tutorialcubeaschunkinst.DVertex()
                         {
                             position = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY * planeSize * levelofdetailmul, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ * planeSize * levelofdetailmul, 1) + chunkoriginpos,
                             indexPos = new Vector4(xi, yi, zi, 4),
                             color = bottomfacecolor,
                             normal = new Vector3(0, 1, 0),
                             padding0 = padding0,
                             tex = new Vector2(1, 1),
                             padding1 = padding1,
                             padding2 = padding2,
                         });*/
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter;
                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray]._newVertzCounter++;

                        _index0 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ)];
                        _index1 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ)];
                        _index2 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ)];
                        _index3 = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._testVertexArray0[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX + vertexlistWidth * ((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY) + vertexlistHeight * sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ)];

                        var vert0 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1);
                        var vert1 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].twoVertIndexZ, 1);
                        var vert2 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].threeVertIndexZ, 1);
                        var vert3 = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].fourVertIndexZ, 1);

                        //Vector3 firstvert = new Vector4(sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY, sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ, 1));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertxtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertytop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].mapfirstvertztop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ;

                        //widthdimbottom[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = (int)Math.Abs(vert0.x - vert2.x); //0  3 == 3 
                        //heightdimbottom[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = (int)Math.Abs(vert0.y - vert2.y);
                        //depthdimbottom[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = (int)Math.Abs(vert0.z - vert1.z);

                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = (int)Math.Abs(Math.Abs(vert0.x) - Math.Abs(vert2.x)); //0  3 == 3 
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].heightdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY;// (int)Math.Abs(Math.Abs(vert0.y) - Math.Abs(vert2.y));
                        sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom] = (int)Math.Abs(Math.Abs(vert0.z) - Math.Abs(vert1.z));


                        /*
                        for (int x = 0; x < widthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom]; x++)
                        {
                            for (int z = 0; z < depthdimtop[sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someindexbottom]; z++)
                            {
                                int theindex = (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexX + x) + width * (((sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexY)) + height * (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].oneVertIndexZ + z));
                                sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[theindex] = 3;
                            }
                        }
                        */



                        /*
                        listOfTriangleIndicesbottom.Add(_index0);
                        listOfTriangleIndicesbottom.Add(_index1);
                        listOfTriangleIndicesbottom.Add(_index2);
                        listOfTriangleIndicesbottom.Add(_index3);
                        listOfTriangleIndicesbottom.Add(_index2);
                        listOfTriangleIndicesbottom.Add(_index1);*/

                        /*sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom++;

                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom++;

                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom = 0;
                        }
                       
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom = 0;
                        }*/

                        sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom++;
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom == depthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someizbottom = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom == heightflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom++;
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someiybottom = 0;
                        }
                        if (sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom == widthflat)
                        {
                            sccslevelgen.chunkdata[levelofdetail][facetype][someindexmain][indexinlevelarray].someixbottom = 0;
                        }
                    }

                }
            }
            /*//_mesh = new Mesh();
            _mesh.vertices = vertexlist.ToArray();
            _mesh.listOfTriangleIndices = listOfTriangleIndices.ToArray();

            _testChunk.GetComponent<MeshFilter>().mesh = _mesh;

            _meshRend = _testChunk.GetComponent<MeshRenderer>();
            _meshRend.material = _mat;*/
        }














        public void setAdjacentChunks(Vector3 pos, int indexx, int indexy, int indexz)
        {
            /*if (indexx == 0)
            {
                if (listofchunksadjacent)
                {

                }
            }*/
        }






        /*
        public void setAdjacentChunks(Vector3 pos, int indexx, int indexy, int indexz)
        {
            //int width = currentChunk.sclevelgenclass.width;
            //int height = currentChunk.sclevelgenclass.height;
            //int depth = currentChunk.sclevelgenclass.depth;

            //////Debug.Log("x: " + (indexx) + " y: " + (indexy) + " z: " + (indexz));

            int useonlyunitOneForNeighboorIndexPlease = 1;

            if (indexx == 0)
            {
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z);

                    if (adjacentChunk.map != null)
                    {


                        if (adjacentChunk.Getint((int)width - 1, (int)indexy, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)indexy, (int)indexz, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexx == width - 1)
            {
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)indexy, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk right exists");
                            adjacentChunk.Setint((int)0, (int)indexy, (int)indexz, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexy == 0)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)height - 1, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)height - 1, (int)indexz, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexy == height - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)0, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)0, (int)indexz, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexz == 0)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)indexy, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)indexy, (int)depth - 1, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexz == depth - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)indexy, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)indexy, (int)0, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
















            //neighboorTiles
            if (indexx == 0 && indexy == 0 && indexz > 0 && indexz < depth - 1)
            {
                //already checked
                /*if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z);

                    if (adjacentChunk.Getint((int)width - 1, (int)indexy, (int)indexz) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)width - 1, (int)indexy, (int)indexz, activeBlockType, pos);

                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)indexz, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                /*if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z);

                    if (adjacentChunk.Getint((int)indexx, (int)height - 1, (int)indexz) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)indexx, (int)height - 1, (int)indexz, activeBlockType, pos);

                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }
            }
            if (indexx == 0 && indexy == 0 && indexz == 0)
            {
                /*if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x , (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z);

                    if (adjacentChunk.Getint((int)width-1, (int)height - 1, (int)depth-1) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }


                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                /*
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);

                    if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)depth - 1) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }










            if (indexx == 0 && indexy == 0 && indexz == depth - 1)
            {
                /*if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z);

                    if (adjacentChunk.Getint((int)indexx, (int)height - 1, (int)0) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)indexx, (int)height - 1, (int)0, activeBlockType, pos);

                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }

                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                /*
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);

                    if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);
                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);
                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }




            if (indexx == 0 && indexz == 0 && indexy > 0 && indexy < height - 1)
            {
                /*if (componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z- useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);

                    if (adjacentChunk.Getint((int)width - 1, (int)indexz, (int)depth-1) == 1)
                    {
                        //////Debug.Log("adjacent chunk left exists");
                        adjacentChunk.Setint((int)width - 1, (int)indexz, (int)depth - 1, activeBlockType, pos);

                        adjacentChunk.sccsSetMap();
                        adjacentChunk.Regenerate();
                        adjacentChunk.chunkbuildingswtc = 1;
                        adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)indexy, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)indexy, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            /*if (indexx == 0 && indexz == 0 && indexy == 0)
            {

            }
            if (indexx == 0 && indexz == 0 && indexy == height - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexz == 0 && indexy == 0 && indexx > 0 && indexx < width - 1)
            {

                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

            }
            /*if (indexz == 0 && indexy == 0 && indexx == 0)
            {

            }
            if (indexz == 0 && indexy == 0 && indexx == width - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }



                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexx == width - 1 && indexy == 0 && indexz > 0 && indexz < depth - 1)
            {
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)indexz, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            /*if (indexx == width - 1 && indexy == 0 && indexz == 0)
            {

            }
            if (indexx == width - 1 && indexy == 0 && indexz == depth - 1)
            {
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }


                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexx == 0 && indexz == depth - 1 && indexy > 0 && indexy < height - 1)
            {

                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)indexy, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)indexy, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            if (indexx == 0 && indexz == depth - 1 && indexy == 0)
            {
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }




            }
            if (indexx == 0 && indexz == depth - 1 && indexy == height - 1)
            {
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

            }
            if (indexz == 0 && indexy == height - 1 && indexx > 0 && indexx < width - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            if (indexz == 0 && indexy == height - 1 && indexx == 0)
            {
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x - useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)width - 1, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)width - 1, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            if (indexz == 0 && indexy == height - 1 && indexx == width - 1)
            {
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z - useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)depth - 1) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)depth - 1, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            if (indexx == width - 1 && indexy == height - 1 && indexz > 0 && indexz < depth - 1)
            {
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)indexz) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)indexz, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            /*if (indexx == width - 1 && indexy == height - 1 && indexz == 0)
            {

            }
            if (indexx == width - 1 && indexy == height - 1 && indexz == depth - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }


            if (indexx == width - 1 && indexz == depth - 1 && indexy > 0 && indexy < height - 1)
            {
                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)indexy, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)indexy, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            if (indexx == width - 1 && indexz == depth - 1 && indexy == 0)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }

                if (componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x + useonlyunitOneForNeighboorIndexPlease, (int)pos.y - useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)0, (int)height - 1, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)0, (int)height - 1, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }
            /*if (indexx == width - 1 && indexz == depth - 1 && indexy == height - 1)
            {

            }


            if (indexz == depth - 1 && indexy == height - 1 && indexx > 0 && indexx < width - 1)
            {
                if (componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease) != null)
                {
                    sclevelgenclass adjacentChunk = (sclevelgenclass)componentparent.getChunklod0((int)pos.x, (int)pos.y + useonlyunitOneForNeighboorIndexPlease, (int)pos.z + useonlyunitOneForNeighboorIndexPlease);
                    if (adjacentChunk.map != null)
                    {

                        if (adjacentChunk.Getint((int)indexx, (int)0, (int)0) == 1)
                        {
                            //////Debug.Log("adjacent chunk left exists");
                            adjacentChunk.Setint((int)indexx, (int)0, (int)0, activeBlockType, pos);

                            adjacentChunk.sccsSetMap();
                            adjacentChunk.Regenerate();
                            adjacentChunk.chunkbuildingswtc = 1;
                            if (adjacentChunk.vertexlist.Count > 0)
                            {
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.Clear();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.vertices = adjacentChunk.vertexlist.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.triangles = adjacentChunk.triangles.ToArray();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateBounds();
                                adjacentChunk.planetchunk.GetComponent<MeshFilter>().mesh.RecalculateNormals();

                                adjacentChunk.planetchunk.transform.GetComponent<MeshRenderer>().material = hitmaterial;
                            }
                        }
                    }
                }
            }

            /*if (indexz == depth - 1 && indexy == height - 1 && indexx == 0)
            {

            }*/
        /*if (indexz == depth - 1 && indexy == height - 1 && indexx == width - 1)
        {

        }*/

        /*for (int x = -1; x < 1; x++)
        {
            for (int y = -1; y < 1; y++)
            {
                for (int z = -1; z < 1; z++)
                {

                }
            }
        }
    }*/




        public int getneighboortileblock(int levelofdetail, int facetype, int someindexmain, int thefirstbundlechunkindex, int x, int y, int z, int indexofneighboortile, int xn,int yn,int zn)
        {
            //indexofneighboortile 
            //0 => left chunk
            //1 => right chunk
            //2 => back chunk
            //3 => front chunk
            //4 => bottom chunk
            //5 => top chunk

            try
            {


                for (int i = indexofneighboortile; i < indexofneighboortile + 1; i++)
                {
                    //if (levelofdetail == 0)
                    {
                        //Console.WriteLine(i);
                        int xx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][0];
                        int yy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][1];
                        int zz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][2];

                        if (xx < 0)
                        {
                            xx *= -1;
                            xx = xx + (sccslevelgen.maxx - 1);
                        }

                        if (yy < 0)
                        {
                            yy *= -1;
                            yy = yy + (sccslevelgen.maxy - 1);
                        }
                        if (zz < 0)
                        {
                            zz *= -1;
                            zz = zz + (sccslevelgen.maxz - 1);
                        }

                        int theneighboorchunkindex = xx + sccslevelgen.somewidth * (yy + sccslevelgen.someheight * zz); //y is always 0 on floor tiles


                        if (theneighboorchunkindex >= 0 && theneighboorchunkindex < sccslevelgen.somewidth * sccslevelgen.someheight * sccslevelgen.somedepth)
                        {
                            int typeofterraintile = sccslevelgen.levelmap[theneighboorchunkindex];

                            if (typeofterraintile == 0 ||
                               typeofterraintile == 1101 ||
                               typeofterraintile == 1102 ||
                               typeofterraintile == 1103 ||
                               typeofterraintile == 1104 ||
                               typeofterraintile == 1105 ||
                               typeofterraintile == 1106 ||
                               typeofterraintile == 1107 ||
                               typeofterraintile == 1108 ||
                               typeofterraintile == 1109 ||
                               typeofterraintile == 1110 ||
                               typeofterraintile == 1111 ||
                               typeofterraintile == 1112 ||
                               typeofterraintile == -99 ||
                               typeofterraintile == 1115)
                            {

                                //int theindexofthenewchunk = 
                                int indexofchunkinbundle = 0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx) * (0 + (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony) * 0); //y is always 0 on floor tiles

                                //int thecounterofloop = sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                                //int thecounterofloop = (indexofthefirstchunktile * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;// sccslevelgen.arrayofindexesalt[(indexinlevelarray * (sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccs.sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle];//sccslevelgen.thecallbackstructdata[facetype][thevoxelindex][indexindivdivlevel].thesomecounterout;// callbackstructdata.rwthesomecounterout;
                                //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;


                                //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theindexalt];


                                //int thecorrectneighboornindex = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;


                                //int theindexalt = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;
                                //int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[theneighboorchunkindex];




                                int indexinmapplusbundlechunks = (theneighboorchunkindex * (sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionx * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractiony * sccsgraphicssec.currentsccsgraphicssec.thechunkbundlefractionz)) + indexofchunkinbundle;

                                int thecorrectneighboornindex = sccslevelgen.arrayofindexesalt[indexinmapplusbundlechunks];




                                
                                int oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainx;
                                int oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainy;
                                int oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].originalposmainz;


                                if (i == 0) //check chunk left
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypex == 0)
                                    {
                                        oriposmainx -= 1;
                                        oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                        oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    }

                                }
                                else if (i == 1) //check chunk right
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypex == 1)
                                    {
                                        oriposmainx += 1;
                                        oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                        oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    }
                                }
                                else if (i == 2) //check chunk back
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypez == 4)
                                    {
                                        oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                        oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                        oriposmainz -= 1;
                                    }
                                }
                                else if (i == 3) //check chunk front
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypez == 5)
                                    {
                                        oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                        oriposmainy = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy;
                                        oriposmainz += 1;
                                    }
                                }
                                else if (i == 4) //check chunk bottom
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypey == 2)
                                    {
                                        oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                        oriposmainy -= 1;
                                        oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;

                                    }
                                }
                                else if (i == 5) //check chunk top
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].isextremitytypey == 3)
                                    {
                                        oriposmainx = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx;
                                        oriposmainy += 1;
                                        oriposmainz = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz;
                                    }
                                }

                                int posmainx = oriposmainx;
                                int posmainy = oriposmainy;
                                int posmainz = oriposmainz;
                                
                                /*
                                int posmainx = (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][0] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracx);
                                int posmainy = (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][1] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracy);
                                int posmainz = (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][2] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracz);
                                */

                                /*
                                int posmainx = (int)Math.Round((double)(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][0] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracx));
                                int posmainy = (int)Math.Round((double)(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][1] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracy));
                                int posmainz = (int)Math.Round((double)(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][2] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracz));
                                */
                                
                                /*
                                int posmainx = (int)Math.Floor((double)(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][0] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracx));
                                int posmainy = (int)Math.Floor((double)(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][1] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracy));
                                int posmainz = (int)Math.Floor((double)(sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].somearrayofcoords[i][2] / sccsgraphicssec.currentsccsgraphicssec.incrementsfracz));
                                */

                                if (posmainx < 0)
                                {
                                    posmainx *= -1;
                                    posmainx = posmainx + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisionx / 2) - 1);
                                }

                                if (posmainy < 0)
                                {
                                    posmainy *= -1;
                                    posmainy = posmainy + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisiony / 2) - 1);
                                }
                                if (posmainz < 0)
                                {
                                    posmainz *= -1;
                                    posmainz = posmainz + ((sccsgraphicssec.currentsccsgraphicssec.leveldivisionz / 2) - 1);
                                }




                                //var thesomeindexmain = posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * posmainz);


                                var thesomeindexmain = sccslevelgen.arrayofindexesmain[indexinmapplusbundlechunks];





                                //Console.WriteLine("/thesomeindexmain0:" + thesomeindexmain0 + "/thesomeindexmain:" + thesomeindexmain);

                                if (thesomeindexmain >= 0 && thesomeindexmain < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx * sccsgraphicssec.currentsccsgraphicssec.leveldivisiony * sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                                {
                                    //lock (sccsgraphicssec.emptyobjectlock[thesomeindexmain])
                                    //lock (sccslevelgen.chunkdata)
                                    {


                                        if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain] != null)
                                        {
                                            var thestring1 = sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Substring(((width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes)) + (xn + width * (yn + height * zn)), 1);// width * height * depth);

                                            foreach (var strdata in thestring1)
                                            {
                                                int bar;
                                                if (int.TryParse(strdata.ToString(), out bar))
                                                {
                                                    return bar;
                                                }
                                                else
                                                {
                                                    Console.WriteLine("error parse map script");
                                                    return -1;
                                                }
                                            }


                                            /*
                                            if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex] != null)
                                            {
                                                if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map != null)
                                                {
                                                    //Console.WriteLine(thecorrectneighboornindex);
                                                    if (thecorrectneighboornindex >= 0 && thecorrectneighboornindex < sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain].Length)
                                                    {
                                                        if (xn + width * (yn + height * zn) < sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map.Length && sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map.Length > 0)
                                                        {
                                                            //Console.WriteLine("index:"+ (xn + width * (yn + height * zn)));
                                                            return sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map[xn + width * (yn + height * zn)];

                                                        }
                                                        else
                                                        {
                                                            return -1;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        return -1;
                                                    }
                                                }
                                                return -1;
                                            }
                                            return -1;*/

                                        }
                                        else
                                        {
                                            Console.WriteLine("null neighboor chunk");
                                        }
                                    }
                                    return -1;

                                }
                                else
                                {
                                    //Console.WriteLine("typeof:" + indexofneighboortile + "/mx:" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx + "/my:" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy + "/mz:" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz + "/mxi:" + posmainx + "/myi:" + posmainy + "/mzi:" + posmainz);

                                }














                                /*
                                if (posmainx < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx && posmainy < sccsgraphicssec.currentsccsgraphicssec.leveldivisiony && posmainz < sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                                {
                                    //var thesomeindexmain = sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thecorrectneighboornindex].posmainz);
                                    var thesomeindexmain = posmainx + (sccsgraphicssec.currentsccsgraphicssec.leveldivisionx) * (posmainy + (sccsgraphicssec.currentsccsgraphicssec.leveldivisiony) * posmainz);

                                    //achunk = sccsgraphicssec.mainchunktopstruct[levelofdetail][facetype][someindexmain];

                                    if (thesomeindexmain >= 0 && thesomeindexmain < sccsgraphicssec.currentsccsgraphicssec.leveldivisionx * sccsgraphicssec.currentsccsgraphicssec.leveldivisiony * sccsgraphicssec.currentsccsgraphicssec.leveldivisionz)
                                    {                                
                                        //lock (sccsgraphicssec.emptyobjectlock[thesomeindexmain])
                                        //lock (sccslevelgen.chunkdata)
                                        {                                        


                                            if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain] != null)
                                            {
                                                var thestring1 = sccsgraphicssec.mainchunktopstruct[levelofdetail][0][thesomeindexmain].str.Substring(((width * height * depth) * (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].counterofindexes)) + (xn + width * (yn + height * zn)), 1);// width * height * depth);

                                                foreach (var strdata in thestring1)
                                                {
                                                    int bar;
                                                    if (int.TryParse(strdata.ToString(), out bar))
                                                    {
                                                        return bar;
                                                    }
                                                    else
                                                    {
                                                        Console.WriteLine("error parse map script");
                                                        return -1;
                                                    }
                                                }


                                                /*
                                                if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex] != null)
                                                {
                                                    if (sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map != null)
                                                    {
                                                        //Console.WriteLine(thecorrectneighboornindex);
                                                        if (thecorrectneighboornindex >= 0 && thecorrectneighboornindex < sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain].Length)
                                                        {
                                                            if (xn + width * (yn + height * zn) < sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map.Length && sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map.Length > 0)
                                                            {
                                                                //Console.WriteLine("index:"+ (xn + width * (yn + height * zn)));
                                                                return sccslevelgen.chunkdata[levelofdetail][0][thesomeindexmain][thecorrectneighboornindex].map[xn + width * (yn + height * zn)];

                                                            }
                                                            else
                                                            {
                                                                return -1;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            return -1;
                                                        }
                                                    }
                                                    return -1;
                                                }
                                                return -1;

                                            }
                                            else
                                            {
                                                Console.WriteLine("null neighboor chunk");
                                            }
                                        }
                                        return -1;

                                    }
                                    else
                                    {
                                        Console.WriteLine("typeof:" + indexofneighboortile + "/mx:" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainx + "/my:" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy + "/mz:" + sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainz + "/mxi:" + posmainx + "/myi:" + posmainy + "/mzi:" + posmainz);

                                    }



                                    return -1;

                                }
                                else
                                {
                                    if (sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex].posmainy == 1 && posmainy < 0)
                                    {
                                        Console.WriteLine("wrong index");
                                    }
                                }
                                return -1;*/

                            }
                            return -1;

                        }
                        return -1;
                    }
                }
                return -1;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                return -1;
            }

            //return -1;

        }










        public static int GetByteMap(int x, int y, int z, int[] map)
        {
            if ((x < 0) || (y < 0) || (z < 0) || (x >= width) || (y >= height) || (z >= depth))
            {
                //////Console.WriteLine("out of range");
                return -1;
            }

            if (map != null)
            {
                if (x + width * (y + height * z) < map.Length)
                {
                    return map[x + width * (y + height * z)];
                }
                else
                {
                    return -1;
                }

            }
            else
            {
                return -1;
            }
            //////Console.WriteLine("index:" + (x + width * (y + height * z)) + "/mapl:" + map.Length + "/x:" + x + "/y:" + y + "/z:" + z + "/w:" + width + "/h:" + height + "/d:" + depth);

        }


        public int GetByte(int x, int y, int z, int indexinlevelarray, int levelofdetail, int facetype, int someindexmain)
        {
            if ((x < 0) || (y < 0) || (z < 0) || (x >= width) || (y >= height) || (z >= depth))
            {
                //////Console.WriteLine("out of range");
                return 0;
            }
            //////Console.WriteLine("index:" + (x + width * (y + height * z)) + "/mapl:" + map.Length + "/x:" + x + "/y:" + y + "/z:" + z + "/w:" + width + "/h:" + height + "/d:" + depth);
            return sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[x + width * (y + height * z)];
        }

        //using as reference from Craig Perko's first minecraft tutorial on youtube. //https://www.youtube.com/watch?v=YpHQ-Kykp_s&t=18s&ab_channel=CraigPerko
        public bool IsTransparent(int _x, int _y, int _z, int indexinlevelarray, int levelofdetail, int facetype, int someindexmain)
        {
            if ((_x < 0) || (_y < 0) || (_z < 0) || (_x >= width) || (_y >= height) || (_z >= depth)) return true;
            return sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[_x + width * (_y + height * _z)] == 0; //_chunkArray
        }

        int getChunklod0int(int _x, int _y, int _z, int indexinlevelarray, int levelofdetail, int facetype, int someindexmain)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < width && _y < height && _z < depth)
            {
                return sccslevelgen.chunkdata[levelofdetail][0][someindexmain][indexinlevelarray].map[_x + width * (_y + height * _z)]; //_chunkArray
            }
            return 0;
        }

        /*
        int getTempArrayint(int _x, int _y, int _z, int indexinlevelarray, int levelofdetail,int facetype)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < width && _y < height && _z < depth)
            {
                return sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._tempChunkArray[_x + width * (_y + height * _z)];
            }
            return 0;
        }*/



                            int getChunklod0Vertexint0(int _x, int _y, int _z, int indexinlevelarray, int levelofdetail, int facetype, int thefirstbundlechunkindex, int someindexmain)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < vertexlistWidth && _y < vertexlistHeight && _z < vertexlistDepth)
            {
                return sccslevelgen.chunkdata[levelofdetail][0][someindexmain][thefirstbundlechunkindex]._chunkVertexArray0[_x + vertexlistWidth * (_y + vertexlistHeight * _z)];
            }
            return 0;
        }



        /*
        int getChunklod0Vertexint1(int _x, int _y, int _z)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < vertexlistWidth && _y < vertexlistHeight && _z < vertexlistDepth)
            {
                return _chunkVertexArray1[_x + vertexlistWidth * (_y + vertexlistHeight * _z)];
            }
            return 0;
        }




        int getChunklod0Vertexint2(int _x, int _y, int _z)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < vertexlistWidth && _y < vertexlistHeight && _z < vertexlistDepth)
            {
                return _chunkVertexArray2[_x + vertexlistWidth * (_y + vertexlistHeight * _z)];
            }
            return 0;
        }




        int getChunklod0Vertexint0(int _x, int _y, int _z)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < vertexlistWidth && _y < vertexlistHeight && _z < vertexlistDepth)
            {
                return _chunkVertexArray3[_x + vertexlistWidth * (_y + vertexlistHeight * _z)];
            }
            return 0;
        }




        int getChunklod0Vertexint4(int _x, int _y, int _z)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < vertexlistWidth && _y < vertexlistHeight && _z < vertexlistDepth)
            {
                return _chunkVertexArray4[_x + vertexlistWidth * (_y + vertexlistHeight * _z)];
            }
            return 0;
        }




        int getChunklod0Vertexint0(int _x, int _y, int _z)
        {
            if (_x >= 0 && _y >= 0 && _z >= 0 && _x < vertexlistWidth && _y < vertexlistHeight && _z < vertexlistDepth)
            {
                return _chunkVertexArray5[_x + vertexlistWidth * (_y + vertexlistHeight * _z)];
            }
            return 0;
        }

        */









        public bool blockExistsInArray(int _x, int _y, int _z)
        {
            if ((_x < 0) || (_y < 0) || (_z < 0) || (_x >= width) || (_y >= height) || (_z >= depth))
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        /*
        public void Setint(int x, int y, int z, int block, Vector3 chunkintpos_)
        {
            /*if (addfracturedcubeonimpact == 1)
            {
                //var unityTutorialObjectPool = this.GameObject.GetComponent<NewObjectPoolerScript>();
                var UnityTutorialPooledObject = UnityTutorialGameObjectPool.GetPooledObject();
                UnityTutorialPooledObject.transform.position = chunkintpos_;
                UnityTutorialPooledObject.GetComponent<Fracture4>().enabled = true;
                UnityTutorialPooledObject.SetActive(true);
            }

            if ((x < 0) || (y < 0) || (z < 0) || (y >= width) || (x >= height) || (z >= depth))
            {
                //Debug.Log("out of range");
                return;
            }

            int indexOf = x + width * (y + depth * z);
            map[indexOf] = block;
        }


        public int Getint(int x, int y, int z)
        {
            if ((x < 0) || (y < 0) || (z < 0) || (y >= width) || (x >= height) || (z >= depth))
            {
                return 0;
            }

            int indexOf = x + width * (y + depth * z);
            return map[indexOf];
            //returnmap[x + width * (y + depth * z)];
        }
    */



















        /*
        public void Regenerate(Vector4 currentPosition)
        {
            for (int x = 0; x < width; x++)
            {
                for (int y = 0; y < height; y++)
                {
                    for (int z = 0; z < depth; z++)
                    {

                        block = map[x + width * (y + height * z)];

                        DrawBrick(x, y, z, currentPosition, block);
                    }
                }
            }
        }

        public void DrawBrick(int x, int y, int z, Vector4 currentPosition, int block)
        {
            Vector4 start = new Vector4(x * planeSize, y * planeSize, z * planeSize,1) + chunkoriginpos;
            Vector4 offset1, offset2;

            offset1 = forward * planeSize;
            offset2 = right * planeSize;
            createTopFace(start + up * planeSize, offset1, offset2, currentPosition, x, y, z, 1);

            offset1 = back * planeSize;
            offset2 = down * planeSize;
            createleftFace(start + up * planeSize + forward * planeSize, offset1, offset2, currentPosition, x, y, z, 1);

            offset1 = up * planeSize;
            offset2 = forward * planeSize;
            createRightFace(start + right * planeSize, offset1, offset2, currentPosition, x, y, z, 1);

            offset1 = left * planeSize;
            offset2 = up * planeSize;
            createFrontFace(start + right * planeSize, offset1, offset2, currentPosition, x, y, z, 1);

            offset1 = right * planeSize;
            offset2 = up * planeSize;
            createBackFace(start + forward * planeSize, offset1, offset2, currentPosition, x, y, z, 1);

            offset1 = right * planeSize;
            offset2 = forward * planeSize;
            createBottomFace(start, offset1, offset2, currentPosition, x, y, z, 1);
        }


        private void createTopFace(Vector4 start, Vector4 offset1, Vector4 offset2, Vector4 currentPosition, int x, int y, int z, int block)
        {
            int index = listOfVerts.Count;

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, 0),
                tex = new Vector2(0, 0),
            });

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, 0),
                tex = new Vector2(0, 1),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, 0),
                tex = new Vector2(1, 0),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1 + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, 0),
                tex = new Vector2(1f, 1),
            });

            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 0);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 3);
        }



        private void createBottomFace(Vector4 start, Vector4 offset1, Vector4 offset2, Vector4 currentPosition, int x, int y, int z, int block)
        {
            int index = listOfVerts.Count;
            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 1, -1),
                tex = new Vector2(0f, 0),
            });

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 1, -1),
                tex = new Vector2(0f, 1f),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset2,
                indexPos = new Vector4(x, y, z, block),
                normal = new Vector3(0, 1, -1),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                tex = new Vector2(1, 0),

            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1 + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 1, -1),
                tex = new Vector2(1, 1f),
            });

            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 0);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 3);

        }


        private void createFrontFace(Vector4 start, Vector4 offset1, Vector4 offset2, Vector4 currentPosition, int x, int y, int z, int block)
        {
            int index = listOfVerts.Count;

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, 0),
                tex = new Vector2(0, 0),
            });

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, 0),
                tex = new Vector2(0, 1f),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, 0),
                tex = new Vector2(1, 0),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1 + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, 0),
                tex = new Vector2(1, 1f),
            });

            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 0);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 3);

        }
        private void createBackFace(Vector4 start, Vector4 offset1, Vector4 offset2, Vector4 currentPosition, int x, int y, int z, int block)
        {
            int index = listOfVerts.Count;

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 0, -1),
                tex = new Vector2(0, 0),
            });

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 0, -1),
                tex = new Vector2(0, 1),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 0, -1),
                tex = new Vector2(1, 0),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1 + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(0, 0, -1),
                tex = new Vector2(1, 1f),
            });

            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 0);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 3);
        }

        private void createRightFace(Vector4 start, Vector4 offset1, Vector4 offset2, Vector4 currentPosition, int x, int y, int z, int block)
        {
            int index = listOfVerts.Count;

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, -1),
                tex = new Vector2(0, 0),
            });

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, -1),
                tex = new Vector2(0, 1),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, -1),
                tex = new Vector2(1, 0),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1 + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 0, -1),
                tex = new Vector2(1, 1f),
            });

            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 0);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 3);
        }

        private void createleftFace(Vector4 start, Vector4 offset1, Vector4 offset2, Vector4 currentPosition, int x, int y, int z, int block)
        {
            int index = listOfVerts.Count;
            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 0),
            });

            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, -1),
                tex = new Vector2(0, 1),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, -1),
                tex = new Vector2(1, 0),
            });


            listOfVerts.Add(new sclevelgenclass.DVertex()
            {
                position = start + offset1 + offset2,
                indexPos = new Vector4(x, y, z, block),
                color = new Vector4(0.25f, 0.25f, 0.25f, 1),
                normal = new Vector3(-1, 1, -1),
                tex = new Vector2(1, 1),
            });

            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 0);
            listOfTriangleIndices.Add(index + 1);
            listOfTriangleIndices.Add(index + 2);
            listOfTriangleIndices.Add(index + 3);

        }
        public bool IsTransparent(int x, int y, int z)
        {
            if ((x < 0) || (y < 0) || (z < 0) || (x >= width) || (y >= height) || (z >= depth)) return true;
            {
                return map[x + width * (y + height * z)] == 0;
            }
        }*/
    }
}
