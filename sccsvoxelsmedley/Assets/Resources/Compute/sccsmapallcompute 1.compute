//CREATIVE COMMONS LICENSE COMING STRAIGHT FROM THE FIRST MINECRAFT TUTORIAL OF GAMEDEVGUIDE AND SEBASTIAN LAGUE ON YOUTUBE.

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeMap
#include "/Includes/Noise.compute"

//#include "/Includes/Noise.compute"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
//RWTexture2D<float4> Result;

//RWStructuredBuffer<int> map;
struct mapbytes
{   
    int ix;
    int iy;
    int iz;
    int thebyte;
    float3 position;
};

int width = 10;
int height = 10;
int depth = 10;

RWStructuredBuffer<mapbytes> themap;

[numthreads(10,1,1)]
void ComputeMap (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
    //int[] map = new int[width*height*depth]

    mapbytes map = themap[id.x];
    //map.thebyte = 1;

    float levelgenmapsplanesize = 0.1f;
    float detailScale = 100;
    float heightScale = 100;
    int seed = 3420; //0 //3420 //45345


    int seedx = 783783; //0 //3420 //45345
    int seedz = 446378; //0 //3420 //45345


    int x = map.ix;
    int y = map.iy;
    int z = map.iz;

    int posx = map.position.x;
    int posy = map.position.y;
    int posz = map.position.z;


    float offsetx = 10.0f;
    float offsety = 100.0f;
    float offsetz = 50.0f;

    float prepx = (((((x+offsetx) * levelgenmapsplanesize) + posx + seed) / detailScale) * heightScale);
    float prepy = (((((y+offsety) * levelgenmapsplanesize) + posy + seed) / detailScale) * heightScale);
    float prepz = (((((z+offsetz) * levelgenmapsplanesize) + posz + seed) / detailScale) * heightScale);

    float3 noiseprepvec = float3(prepx,prepy,prepz);

    detailScale = 100;
    heightScale = 10;
    levelgenmapsplanesize = 0.1f;

    prepx = abs(((((x+offsetx) * levelgenmapsplanesize) + posx + seedx) / (detailScale )) * (heightScale));
    prepy = abs(((((y+offsety) * levelgenmapsplanesize) + posy + seed) / (detailScale )) * (heightScale));
    prepz = abs(((((z+offsetz) * levelgenmapsplanesize) + posz + seedz) / (detailScale )) * (heightScale));

    float3 noiseprepvecalt = float3(prepx,prepz, prepy);

    //float3 noiseprepvecori = noiseprepvec;// float3(prepx,prepy,prepz);

    float noiseXZ = snoise(noiseprepvec);
    float noiseXZori = snoise(noiseprepvec);

    float noiseXZalt = snoise(noiseprepvecalt);
    float size1 = (1 / 0.1f) * posy;
    noiseXZalt -= size1;

    float size0 = (1 / 0.1f) * posy;
    noiseXZ -= size0;


    float3 noiseprepvecmix= float3(noiseXZori,noiseXZ, noiseXZalt);

    float noisemix = snoise(noiseprepvecmix);

    /*
    if(noiseXZalt >= y)
    {
        map.thebyte = 1;
    }*/


    //noiseXZ *= OriginalSimplexNoise.SeamlessNoise((((x * levelgenmapsplanesize) + chunkPos[0] + seed) / _detailScale) * _heightScale, (((z * levelgenmapsplanesize) + chunkPos[2] + seed) / _detailScale) * _heightScale, 15, 15, 0);
    //float noiseXZ = snoise(x,y,z);
    //float size0 = (1 / 0.1f) * posy;
    //noiseXZ -= size0;

    
    /*if (round(noiseXZ) >= y) //|| (int)Math.Round(noiseXZ) < -y
    {
        map.thebyte = 1;
    }
    else
    {
        map.thebyte = 0;     
    }*/


    /*if(posy > 0)
    {
        if(noisemix >= y)
        {
            map.thebyte = 1;
         }
    }*/





















    //TOREADD
    //TOREADD
    //TOREADD
    if (noiseXZ >=  y) //|| (int)Math.Round(noiseXZ) < -y
    {
        ///map.thebyte = 1;
        /*if(posy < 3 )
        {
            map.thebyte = 1;
        }*/
        
        
        
        
        
        
        
        if( noiseXZori < 0 && posy < height * 2)
        {

            
            if(posy < 3 )
            {
                map.thebyte = 1;
            }
            else if(posy > 3 && posy < height * 2)
            {
                if(noiseXZ >= posy)
                {
                    map.thebyte = 1;

                }
            }

        }
        else
        {
            if(posy >= 0)
            {
                if(noiseXZalt >= y)
                {
                    map.thebyte = 1;
                }
                
                
            }



            /*if(posy >= 0)
            {
                if(noiseXZ >= noiseXZori)
                {
                    map.thebyte = 1;
                }
            }
            else
            {
                map.thebyte = 0;
            }*/
            
        }



    }
    else
    {
       
        /*if(noiseXZalt > 0)
        {
            map.thebyte = 1;
        }
        else
        {
            map.thebyte = 0; 
        }*/


        //map.thebyte = 1;
        
        /*if( noiseXZori > 0)
        {
            //map.thebyte = 1;
        }
        else
        {
            map.thebyte = 0; 
        }*/
            
    }


    
    /*if(posy >= 0)
    {
        if(noiseXZalt < -y)
        {
            map.thebyte = 1;
        }
    }*/










    
    //TOREADD
    //TOREADD
    //TOREADD
    //map.thebyte = 1;

    themap[id.x] = map;
}
